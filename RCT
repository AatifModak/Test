CREATE OR REPLACE PACKAGE BODY IMM.xxmm_create_receipts
AS
    ----------------------------------------------------------------------------------
    --
    -- Package:     XXMM_CREATE_RECEIPTS
    --
    -- Inputs:
    --
    -- Output:
    --
    -- Description:
    --
    --
    --
    --
    --
    --
    -- Created By:    Allstream
    --
    -- Creation Date: 02-Jul-2009
    --
    --+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    --
    --  Modified By        Date         Description
    --
    --  Naeem              17-NOV-2011   UAT issue 5238 for Incorrect OU name
    --  Mohammed Arif Ali  31-Jul-2012   Noordzee FT#6579
    --  Sead Mucevic       05-NOV-2012   FP# 59712: Added parameter debug level to
    --                                   log_message to avoid unnecessary debug messages.
    --  Karen Jiang       10-JUN-2014    R 3.5 PWR A-10-1009 Automation of credit push receipts
    -- Karen Jiang       07-OCT-2014    UAT issue , modify it to always create new reciept batch for intraday file
    --
    --
    -- Naeem Ibrahim    18-NOV-2014    Updated the logic for matching control number and name while creating receipts.
    --
    --
    -- Naeem Ibrahim    08-JUN-2015    Updated the logic forcreating zero dollar USRW receipts with NRM(Non-remit) status, FP 64150..
    --
    -- Naeem Ibrahim    10-JAN-2017    Include Impound Swift BIC to populate in receipts , FP 65412.
    --
    -- Sharath Yaski    21-JUL-2017    FP65679 - Intraday package Redesign - Added few variables/procedures in the
    --                                 Package spec so that thay can be used from new package XXMM_CREATE_INTRADAY_RECEIPTS
    -- Arun Bacha       17-OCT-2017    US 812543 - Added the logic to store the ORG Account Information in Receipts Table
    -- Sharath Yaski    23-FEB-2018    FP66338 - User is unable to apply CP receipt
    -- Arun Bacha       11th May, 2018 US US998870 -- Release 4.5. The Intraday should automatically release the holds defined in the lookup XXMM_CP_REC_APPL_REL_HOLD_CODE
    -- George Felian    07-MAY-2018   PWR 17-121 Rel 4.5 | 07-MAY-2018  CQ - Sprint 1 - US US988191 - Debit Pull Straight Thru Processing
    --                               | Muhammad Imran Qureshiand George Felian
    -- Arun Bacha       11th May, 2018 US US998870 -- Release 4.5. The Intraday should automatically release the holds defined in the lookup XXMM_CP_REC_APPL_REL_HOLD_CODE
    --
    -- Muhammad I. Qureshi 07-OCT-2019 FP-67895 -- to filter Impounds for that particulart Originator Account.
    -- Sharath Yaski    21-OCT-2019    Project Moose   changes for Bill Pay.
    -- George Felian   26-MAY-2020       IMM 20-253 UK Intraday Receipt Logic
     -- Ranjitha         23-JUN-2020      For STP If we have only one receipt with 0. cancel the batch as it is NRM status
    -- George Felian   14-JUL-2020       FP68480 - Correct UK ITD Exceptions
    -- George Felian   15-JUL-2020      FP68479  - UK ITD Receipt application om Unapplied Receipts
    -- George Felian   17-JUL-2020      FP68493  - no cient name matching whentoo many row for org account
    -- George Felian   29-JUL-2020      FP68480  -IMMS Intraday Receipt Exceptions Report not working as expected
    -- Pooja Gonla     09-Mar-2023      FP70355  -Validation on Bank number to contain only numeric values
    -----------------------------------------------------------------------------------
    --
    -- GLOBAL VARIABLES
    --
    -->>US 47748 | Arun Bacha | 18-Jul-2016 | Added the constant value to hold the package name
    gc_package_name                  CONSTANT VARCHAR2 (32) := $$plsql_unit || '.';
    --<<US 47748 | Arun Bacha | 18-Jul-2016 | Added the constant value to hold the package name
    g_cnt                                     NUMBER DEFAULT NULL;
    g_clt_region                              VARCHAR2 (30) DEFAULT NULL;
    g_clt_tmz_id                              xxmm_timezone.timezone_id%TYPE
                                                  DEFAULT NULL;
    g_srv_tmz_id                              xxmm_timezone.timezone_id%TYPE
                                                  DEFAULT NULL;
    g_clt_tmz_code                            xxmm_timezone.timezone_code%TYPE
                                                  DEFAULT NULL;
    g_srv_tmz_code                            xxmm_timezone.timezone_code%TYPE
                                                  DEFAULT NULL;

    g_org_id                          xxmm_cts_headers.org_id%TYPE
                                                  DEFAULT XXMM_SECURITY_PROFILE.GET_ORG_ID ;
    -->> Project G'day | Ranjitha | 4-Apr-2016 |For CP and NSF Log messages modified display based on debug level set
    gc_debug_level                   CONSTANT NUMBER
        := xxmm_wrap_utilities.get_program_debug_level ($$plsql_unit) ;
    --<< Project G'day | Ranjitha | 4-Apr-2016 |For CP and NSF Log messages modified display based on debug level set
    --g_batch_prefix              varchar2(3)                                 Default 'RCT';  -- PWC
    g_batch_prefix_rct                        VARCHAR2 (3) DEFAULT 'RCT'; -- PWC
    g_batch_prefix_cm                         VARCHAR2 (3) DEFAULT 'CM'; -- PWC
    g_batch_prefix_int                        VARCHAR2 (3) DEFAULT 'INT'; --Karen Jiang /PWR A-10-1009
    -->>  Project G'day | Ranjitha | 4-Apr-2016 |Intializing the begingin of the session
    g_ou_name                                 VARCHAR2 (150) DEFAULT XXMM_SECURITY_PROFILE.GET_ORG_ID; --MO_GLOBAL.GET_OU_NAME (G_ORG_ID); --'ADP France OU';
    g_err_code                                VARCHAR2 (100) DEFAULT NULL;
    g_err_msg                                 VARCHAR2 (2000) DEFAULT NULL;
    g_table_id                                NUMBER DEFAULT NULL;
    g_conc_program_id                         VARCHAR2 (100)
                                                  DEFAULT XXMM_UTILITIES.GET_CONC_PROGRAM_NAME;
    --Ranjitha | 19-AUG-2016
    g_request_id                     CONSTANT NUMBER := XXMM_UTILITIES.GET_CONCURRENT_REQUEST_ID ;
    --NUMBER DEFAULT fnd_global.conc_request_id;
    g_batch_id                                xxmm_receipt_batches.receipt_batch_id%TYPE
                                                  DEFAULT NULL;
    g_receipt_id                              xxmm_receipts.receipt_id%TYPE DEFAULT NULL;
    g_application_id                          xxmm_receipt_applications.application_id%TYPE
                                                  DEFAULT NULL;
    g_new_flag                                VARCHAR2 (03) DEFAULT NULL;

    g_creation_date                           DATE DEFAULT NULL;
    g_created_by                              NUMBER DEFAULT NULL;
    g_last_update_date                        DATE DEFAULT NULL;
    g_last_updated_by                         NUMBER DEFAULT NULL;
    g_last_update_login                       NUMBER DEFAULT NULL;

    g_country                                 xxmm_cts_headers.country%TYPE DEFAULT NULL;
    g_input_source                            xxmm_cts_headers.input_source%TYPE
                                                  DEFAULT NULL;
    g_funding_method                          xxmm_cts_impound_trx.funding_method%TYPE
                                                  DEFAULT NULL;
    g_remit_thru_date                         DATE DEFAULT NULL;
    g_impound_number_from                     xxmm_cts_impound_trx.impound_trx_number%TYPE
                                                  DEFAULT NULL;
    g_impound_number_to                       xxmm_cts_impound_trx.impound_trx_number%TYPE
                                                  DEFAULT NULL;
    g_control                                 xxmm_customer_controls.control_number%TYPE
                                                  DEFAULT NULL;
    g_bank_acc_id_funding                     xxmm_bank_accounts.bank_account_id%TYPE
                                                  DEFAULT NULL;
    g_control_account_name                    xxmm_receipts.control_account_name%TYPE
                                                  DEFAULT NULL;
    g_control_bank                            xxmm_receipts.control_bank%TYPE DEFAULT NULL;
    g_control_branch                          xxmm_receipts.control_branch%TYPE DEFAULT NULL;
    g_control_account                         xxmm_receipts.control_account%TYPE
                                                  DEFAULT NULL;
    g_control_swift_bic                       xxmm_receipts.control_swift_bic%TYPE
                                                  DEFAULT NULL;
    g_accounted_flag                          xxmm_receipts.accounted_flag%TYPE DEFAULT NULL;

    ---
    ---Start Muhammad PL-61920 20-NOV-2013
    ---
    g_imp_account_name                        xxmm_receipts.control_account_name%TYPE
                                                  DEFAULT NULL;
    g_imp_bank                                xxmm_receipts.control_bank%TYPE DEFAULT NULL;
    g_imp_branch                              xxmm_receipts.control_branch%TYPE DEFAULT NULL;
    g_imp_account                             xxmm_receipts.control_account%TYPE
                                                  DEFAULT NULL;
    --
    -- Naeem Start 10-JAN-2017, FP issue 65412
    --

    g_imp_swift_bic                           xxmm_receipts.control_swift_bic%TYPE
                                                  DEFAULT NULL;


    --
    -- Naeem  End  10-JAN-2017, FP issue 65412
    --

    ---
    ---End Muhammad PL-61920 20-NOV-2013
    ---
    g_bank_acc_inten_stlmt                    xxmm_bank_accounts.account_name%TYPE
                                                  DEFAULT NULL;

    g_receipt_batches_rec                     xxmm_receipt_batches%ROWTYPE DEFAULT NULL;
    g_receipts_rec                            xxmm_receipts%ROWTYPE DEFAULT NULL;
    g_receipt_applications_rec                xxmm_receipt_applications%ROWTYPE
                                                  DEFAULT NULL;

    g_batch_number                            xxmm_receipt_batches.receipt_batch_number%TYPE
        DEFAULT NULL;
    g_batch_name                              xxmm_receipt_batches.receipt_batch_name%TYPE
                                                  DEFAULT NULL;
    g_batch_date                              xxmm_receipt_batches.receipt_batch_date%TYPE
                                                  DEFAULT SYSDATE;
    g_bank_number                             xxmm_bank_branches.bank_number%TYPE
                                                  DEFAULT NULL;
    g_branch_number                           xxmm_bank_branches.bank_branch_number%TYPE
                                                  DEFAULT NULL;
    g_account_number                          xxmm_bank_accounts.account_number%TYPE
                                                  DEFAULT NULL;
    g_account_name                            xxmm_bank_accounts.account_name%TYPE
                                                  DEFAULT NULL;
    g_receipt_number                          xxmm_receipts.receipt_number%TYPE
                                                  DEFAULT NULL;
    g_serv_code                               NUMBER DEFAULT 2;
    g_spread_tier                             xxmm_receipts.spread_tier%TYPE DEFAULT NULL;
    g_spread_rate                             xxmm_receipts.spread_rate%TYPE DEFAULT NULL;

    g_max_receipt_char                        NUMBER DEFAULT NULL;
    g_max_receipt_count                       NUMBER DEFAULT 9999;
    g_max_receipt_amount                      NUMBER DEFAULT 9999999.99;

    g_fm_short_name                           VARCHAR2 (30) DEFAULT NULL;
    g_fm_descr                                xxmm_lookups.meaning%TYPE DEFAULT NULL;
    g_consolidate_impounds                    BOOLEAN DEFAULT FALSE;
    g_cons_by_impound_type                    BOOLEAN DEFAULT FALSE;
    g_cons_negative_amount                    BOOLEAN DEFAULT FALSE;
    g_create_empty_batches                    BOOLEAN DEFAULT FALSE;
    g_create_auto_receipts                    BOOLEAN DEFAULT FALSE;
    g_sequence_name                           VARCHAR2 (30) DEFAULT NULL;
    g_seq_max_value                           VARCHAR2 (30) DEFAULT NULL;
    g_srv_sysdate                             DATE DEFAULT NULL;
    -->> Project G'day | ranjitha | 4-Apr-2016 | Modified the code to fetch sysdate based on OU using timezones pakg
    -->>Project G'Day (Australia) Sprint 3||Muhammad Imran Qureshi ||14-MAR-2016
    --   g_clt_sysdate                             DATE DEFAULT NULL;
    g_clt_sysdate                             DATE
        := xxmm_timezones.get_ou_date (SYSDATE, g_org_id);
    --<<Project G'Day (Australia) Sprint 3||Muhammad Imran Qureshi ||14-MAR-2016

    --<< Project G'day | ranjitha | 4-Apr-2016 | Modified the code to fetch sysdate based on OU using timezones pakg
    g_receipt_cnt                             NUMBER DEFAULT 0;
    g_batch_impound_amount                    NUMBER DEFAULT 0;
    g_batch_imp_trx_amount                    NUMBER DEFAULT 0;

    g_bank_acc_id_intended_stlmt              xxmm_bank_accounts.bank_account_id%TYPE
                                                  DEFAULT NULL;
    g_bank_acc_id_final_stlmt                 xxmm_bank_accounts.bank_account_id%TYPE
                                                  DEFAULT NULL;
    g_bank_acc_id_concentration               xxmm_bank_accounts.bank_account_id%TYPE
                                                  DEFAULT NULL;

    g_receipt_bank_acc_id                     xxmm_bank_accounts.bank_account_id%TYPE
                                                  DEFAULT NULL;

    g_status_apply                            VARCHAR2 (30) DEFAULT 'APPLY';
    g_status_sel                              VARCHAR2 (30) DEFAULT 'SEL';
    g_apply_type                              VARCHAR2 (30) DEFAULT 'APPLY';

    g_msg_type_error                 CONSTANT VARCHAR2 (50)
                                                  := xxmm_constants.msg_type_error ;
    g_msg_type_debug                 CONSTANT VARCHAR2 (50)
                                                  := xxmm_constants.msg_type_debug ;
    g_msg_type_warn                  CONSTANT VARCHAR2 (50)
                                                  := xxmm_constants.msg_type_warning ;
    g_package_name                   CONSTANT VARCHAR2 (32) := $$plsql_unit;
    g_debug_level                    CONSTANT NUMBER
        := xxmm_wrap_utilities.get_program_debug_level ($$plsql_unit) ;
    -- Start and End indicators for Debugging
    g_enter_prog                     CONSTANT VARCHAR2 (10)
                                                  := xxmm_constants.gc_enter_prog ;
    g_exit_prog                      CONSTANT VARCHAR2 (10)
                                                  := xxmm_constants.gc_exit_prog ;

    g_message_rec                             xxmm_messages.g_message_rec_typ;


    gc_impound_trx_receipt           CONSTANT xxmm_lookups.lookup_code%TYPE := 'SEL';
    gc_impound_trx_partial_receipt   CONSTANT xxmm_lookups.lookup_code%TYPE
                                                  := 'PAR' ;
    gc_impound_trx_remit             CONSTANT xxmm_lookups.lookup_code%TYPE
                                                  := 'REM' ;
    gc_impound_trx_reconcile         CONSTANT xxmm_lookups.lookup_code%TYPE
                                                  := 'REC' ;



    gc_rec_app_status_apply          CONSTANT xxmm_lookups.lookup_code%TYPE
                                                  := 'APPLY' ;

    gc_usrw_bank                              VARCHAR2 (30) DEFAULT 'JPMC';
    gc_usrw_bank_contingency                  VARCHAR2 (30) DEFAULT 'DB';
    gc_usrw_contingency                       VARCHAR2 (01) DEFAULT 'N';

    g_inv_imp_acc_cur                         xxmm_lookups.lookup_code%TYPE
        DEFAULT 'XXMM_INV_IMP_ACC_CUR_MSG';
    g_inv_spread_tier                         xxmm_lookups.lookup_code%TYPE
        DEFAULT 'XXMM_INV_SPREAD_TIER_MSG';
    g_neg_receipt_amt                         xxmm_lookups.lookup_code%TYPE
        DEFAULT 'XXMM_NEG_RECEIPT_AMT_MSG';

    g_inv_imp_acc_cur_hold                    xxmm_lookups.lookup_code%TYPE
        DEFAULT 'INVALID_IMP_ACCOUNT_CUR';
    g_inv_spread_tier_hold                    xxmm_lookups.lookup_code%TYPE
        DEFAULT 'INVALID_SPREAD_TIER';
    g_neg_receipt_amt_hold                    xxmm_lookups.lookup_code%TYPE
        DEFAULT 'NEGATIVE_RECEIPT_AMOUNT';

    g_inv_imp_acc_cur_msg                     VARCHAR2 (200) DEFAULT NULL;
    g_inv_spread_tier_msg                     VARCHAR2 (200) DEFAULT NULL;
    g_neg_receipt_amt_msg                     VARCHAR2 (200) DEFAULT NULL;
    g_invalid_impound_bank_msg                VARCHAR2 (200) DEFAULT NULL;--Added for FP70355

    g_func_imp_currency                       xxmm_receipt_batches.impound_currency%TYPE
        DEFAULT 'CAD';
    g_hold_catg_rec                           VARCHAR2 (30) DEFAULT 'RCT';
    g_line_cnt                                NUMBER DEFAULT 0;
    g_page_cnt                                NUMBER DEFAULT 0;
    g_summary_cnt                             NUMBER DEFAULT 0;      --FT#6579
    -->> FP65679 | Sharath Yaski | 21-JUL-2017
    -- Automatic Intraday Credit Push Receipt Created for Incorrect Control
    -- Defining the variable in the Package spec instead of Body as it is used from XXMM_CREATE_INTRADAY_RECEIPTS Package.
    -- g_intraday_flag                           VARCHAR2 (1) DEFAULT NULL;
    --<< FP65679 | Sharath Yaski | 21-JUL-2017
    --
    -->> Arun Bacha || R Q3 || Mar 7th 2016 ||EU -15-600 || Added the lookup  codes for the ORG ACCT exceptions report
    g_batch_count                             NUMBER DEFAULT 0;
    g_org_acc_exclsn_rpt_lookup               xxmm_lookup_types.lookup_type%TYPE
        := 'XXMM_ORG_ACCT_EXCEPTIONS';
    g_org_acc_not_exist                       xxmm_lookups.lookup_code%TYPE
        := 'XXMM_ORG_ACCT_NOT_EXIST_IMMS';
    g_org_acc_mismatch                        xxmm_lookups.lookup_code%TYPE
        := 'XXMM_ORG_ACCT_MISMATCH_IMMS';
    g_org_acc_null_bank_acc                   xxmm_lookups.lookup_code%TYPE
        := 'XXMM_ORG_ACCT_NULL_BANK_FILE';
    g_org_acc_null_bank_acc_ctl               xxmm_lookups.lookup_code%TYPE-->> George Felian   26-MAY-2020       IMM 20-253 UK Intraday Receipt Logic
        := 'XXMM_ORG_ACCT_NULL_BANK_NO_CTL';
    g_org_acc_report_header                   xxmm_lookups.lookup_code%TYPE
        := 'XXMM_ORG_ACC_REPORT_HEADER';
    g_org_acc_report_header_line2             xxmm_lookups.lookup_code%TYPE
        := 'XXMM_ORG_ACC_REPORT_HEAD_LINE2';
    g_org_risk_tier_hol_rel                   xxmm_lookups.lookup_code%TYPE
        := 'XXMM_RISK_TIER_HOLD_REL';
    g_no_bank_org_trn_cnt                     NUMBER DEFAULT 0;
    g_itd_rct                                 xxmm_lookups.lookup_code%TYPE
                                                  := 'XXMM_ITD_RCT';
    g_extrct_control_name                     xxmm_lookups.lookup_code%TYPE
        := 'XXMM_EXTRCT_CONTROL_NAME';
    g_itd_rpt_trx_cnt                         NUMBER DEFAULT 0;
    g_invalid_impound_bank                         xxmm_lookups.lookup_code%TYPE
        DEFAULT 'XXMM_USRW_IMPOUND_BANK_INVALD' ;--Added for FP70355 --New fnd_message created to apply Hold

    --<< Arun Bacha || R Q3 || Mar 7th 2016 ||EU -15-600 || Added the lookup  codes for the ORG ACCT exceptions report

    --<<START  George Felian 28-JUN-2016 PWR EU-15-600 US477483 Start
    -- hint. should be Y for UK
    g_check_sort_code                         xxmm_lookups.attribute1%TYPE
                                                  := xxmm_lookup_utilities.get_code_attribute (
                                                         NULL,
                                                         'XXMM_SORT_CODE_CHECK',
                                                         'CHECK_SORT_CODE',
                                                         'XXMM_SORT_CODE_CHECK',
                                                         'ATTRIBUTE1');

    -->><END  George Felian 28-JUN-2016 PWR EU-15-600 US477483 Start

    -- Cursor to select the Impound Transactions
    --
    CURSOR g_sel_imp (
        x_country                IN xxmm_cts_headers.country%TYPE,
        x_input_source           IN xxmm_cts_headers.input_source%TYPE,
        x_funding_method         IN xxmm_cts_impound_trx.funding_method%TYPE,
        x_bank_acc_inten_stlmt   IN xxmm_bank_accounts.account_name%TYPE,
        x_remit_thru_date        IN xxmm_receipt_batches.remittance_due_date%TYPE,
        x_control                IN xxmm_customer_controls.control_number%TYPE,
        x_impound_number_from    IN xxmm_cts_impound_trx.impound_trx_number%TYPE,
        x_impound_number_to      IN xxmm_cts_impound_trx.impound_trx_number%TYPE)
    IS
          --
          -- For impound transaction Non Credit Push funding method
          --
          SELECT cit.funding_method,
                 --Functional Issue 2037
                 --        xlc.lookup_code intended_stlmt_bank,
                 xlc.attribute5 intended_stlmt_bank,
                 --
                 xba.account_name inten_stlmt_account_name,
                 TRUNC (get_remittance_due_date (cit.funding_method,
                                                 cit.impound_due_date,
                                                 x_remit_thru_date,
                                                 cit.impound_bank,
                                                 cit.impound_branch,
                                                 ich.input_source,
                                                 cit.adp_banking_partner,
                                                 cit.funding_method_sub_type,
                                                 -->>Rel3.2 QC 96 | Mamtha Babu | 29-Oct_2013
                                                 cit.impound_account,
                                                 --<<Rel3.2 QC 96 | Mamtha Babu | 29-Oct_2013
                                                 -->>PWR EU-13-352 - Debit Pull Selection Date | Ranjitha | 17-Jun-2013
                                                 ich.control_id --<<PWR EU-13-352 - Debit Pull Selection Date | Ranjitha | 17-Jun-2013
                                                               ))
                     remit_due_date,
                 xcc.control_number,
                 cit.impound_trx_type,
                 ich.country,
                 xbb.bank_number inten_stlmt_bank,
                 xbb.bank_branch_number inten_stlmt_branch,
                 xba.account_number inten_stlmt_account,
                 xba.bank_account_id inten_stlmt_bank_account_id,
                 xba.bank_branch_id inten_stlmt_bank_branch_id,
                 cit.impound_due_date,
                 cit.impound_bank,
                 cit.impound_branch,
                 cit.impound_account,
                 cit.impound_swift_bic,
                 cit.impound_account_name,
                 (  (  NVL (cit.impound_trx_amount, 0)
                     + NVL (cit.adjustment_amount, 0))
                  - (  NVL (cit.applied_amount, 0)
                     + NVL (cit.write_off_amount, 0)))
                     imp_trx_amt,
                 cit.receipt_currency,
                 ich.input_source,
                 cit.impound_trx_id impound_trx_id,
                 cit.cts_header_id cts_header_id,
                 cit.impound_trx_number,
                 cit.impound_trx_date,
                 cit.impound_trx_currency imp_trx_cur,
                 cit.receipt_currency imp_cur,
                 cit.fun_currency,
                 cit.exch_rate,
                 cit.fun_impound_trx_amount,
                 ich.control_id,
                 cit.applied_amount,
                 xl1.attribute3 consolidate_impounds,
                 DECODE (
                     cit.funding_method,
                     xxmm_constants.gc_credit_push_fund_meth, xlc.attribute3,
                     -->> Sharath Yaski | Project Moose | 29-OCT-2019
                     -- Bill pay changes
                     xxmm_constants.gc_bill_pay_fund_meth, xlc.attribute3,
                     --<< Sharath Yaski | Project Moose | 29-OCT-2019
                     xxmm_constants.gc_debit_pull_fund_meth, NULL,
                     xxmm_constants.gc_usrw_funding_method, NULL,
                     xxmm_constants.gc_nsfr_fund_meth, xlc.attribute4,
                     xxmm_constants.gc_uscp_fund_meth, xlc.attribute4,
                     NULL)
                     conc_bank_acct_name,
                 cit.funding_method_sub_type,
                 cit.adp_banking_partner
            FROM xxmm_cts_impound_trx cit,
                 xxmm_cts_headers ich,
                 xxmm_customer_controls xcc,
                 xxmm_lookups_v xl1,
                 xxmm_lookups_v xlc,
                 xxmm_bank_accounts xba,
                 xxmm_bank_branches xbb
           WHERE     ich.cts_header_id = cit.cts_header_id
                 --and     ich.status              =   xxmm_constants.gc_cts_status_com
                 --'COM'
                 AND ich.status IN
                         (xxmm_constants.gc_cts_header_status_completed,
                          xxmm_constants.gc_cts_header_status_prv,
                          xxmm_constants.gc_cts_header_status_rev)
                 AND cit.status = xxmm_constants.gc_validated_status
                 --'VAL'
                 AND NVL (cit.application_status,
                          xxmm_constants.gc_imp_unapplied_status       --'UNP'
                                                                ) IN
                         (xxmm_constants.gc_imp_unapplied_status,
                          xxmm_constants.gc_imp_partial_status)
                 --('UNP', 'PAP')
                 --
                 AND ich.country = NVL (x_country, ich.country)
                 --
                 AND ich.input_source = NVL (x_input_source, ich.input_source)
                 --AND     NVL(X_INPUT_SOURCE,ICH.INPUT_SOURCE)
                 --                             LIKE  '%'||ICH.INPUT_SOURCE||'%'
                 --
                 AND cit.funding_method =
                         NVL (x_funding_method, cit.funding_method)
                 AND TRUNC (
                         get_remittance_due_date (cit.funding_method,
                                                  cit.impound_due_date,
                                                  x_remit_thru_date,
                                                  cit.impound_bank,
                                                  cit.impound_branch,
                                                  ich.input_source,
                                                  cit.adp_banking_partner,
                                                  cit.funding_method_sub_type,
                                                  -->>Rel3.2 QC 96 | Mamtha Babu | 29-Oct_2013
                                                  cit.impound_account,
                                                  --<<Rel3.2 QC 96 | Mamtha Babu | 29-Oct_2013
                                                  -->>PWR EU-13-352 - Debit Pull Selection Date | Ranjitha | 17-Jun-2013
                                                  ich.control_id --<<PWR EU-13-352 - Debit Pull Selection Date | Ranjitha | 17-Jun-2013
                                                                )) <=
                         TRUNC (x_remit_thru_date)
                 AND cit.impound_trx_number BETWEEN NVL (
                                                        x_impound_number_from,
                                                        cit.impound_trx_number)
                                                AND NVL (
                                                        x_impound_number_to,
                                                        NVL (
                                                            x_impound_number_from,
                                                            cit.impound_trx_number))
                 AND (  (  NVL (cit.impound_trx_amount, 0)
                         + NVL (cit.adjustment_amount, 0))
                      - (  NVL (cit.applied_amount, 0)
                         + NVL (cit.write_off_amount, 0))) >= 0
                 AND xcc.control_id = ich.control_id
                 AND xcc.control_number = NVL (x_control, xcc.control_number)
                 AND cit.funding_method = xl1.lookup_code
                 AND NVL (xl1.attribute9, 'N') = 'Y'
                 AND xl1.lookup_type = xxmm_constants.gc_funding_method_lt
                 --'XXMM_FUNDING_METHODS'
                 -->> Sharath Yaski | Project Moose | 29-OCT-2019
                 -- Bill Pay changes
                 /*AND ( (    cit.funding_method !=
                                xxmm_constants.gc_credit_push_fund_meth*/
                 AND ( (    cit.funding_method NOT IN
                                (xxmm_constants.gc_credit_push_fund_meth,
                                xxmm_constants.gc_bill_pay_fund_meth)
                 --<< Sharath Yaski | Project Moose | 29-OCT-2019
                        AND ( --'02'                                        and
                             xlc .lookup_type =
                                     xxmm_constants.gc_settlement_bank_lt
                             AND --'XXMM_IF_SETTLEMENT_BANK'                AND
                                                       --Functional Issue 2037
                              --          xlc.lookup_code       =   cit.adp_banking_partner                     and
                              xlc.attribute5 = cit.adp_banking_partner
                             AND                                            --
                                xlc.attribute2 = cit.funding_method
                             AND xlc.source_value = ich.input_source
                             AND xlc.attribute3 =
                                     NVL (x_bank_acc_inten_stlmt,
                                          xlc.attribute3)
                             AND xba.account_name = xlc.attribute3)) /*
                                                                 or
                                                                  (  cit.funding_method   =   xxmm_constants.gc_credit_push_fund_meth    (  and
                                                                    xlc.lookup_type       =   xxmm_constants.gc_credit_push_acct_lt        and
                                                                                              --'XXMM_CREDIT_PUSH_ACCOUNTS'              AND
                                                                    xlc.lookup_code       =   cit.adp_banking_partner                     and
                                                                    xlc.source_value      =   ich.input_source                            and
                                                                    xlc.attribute2        =   nvl(x_bank_acc_inten_stlmt,xlc.attribute2)  and
                                                                    xba.account_name      =   xlc.attribute2                              and
                                                                    xlc.attribute1        = ( select  a.account_name
                                                                                              from    xxmm_bank_accounts a,
                                                                                                      xxmm_bank_branches b
                                                                                              where   a.bank_branch_id        =   b.bank_branch_id
                                                                                              and     b.bank_number           =   cit.impound_bank
                                                                                              and     b.bank_branch_number    =   cit.impound_branch
                                                                                              and     a.account_number        =   cit.impound_account
                                                                                              and     trunc(sysdate)    between   trunc(nvl(a.effective_start_date,sysdate))
                                                                                                                            and   trunc(nvl(a.effective_end_date,sysdate))
                                                                                              )
                                                                  ) ) */
                                                                    )
                 --
                 AND xbb.bank_branch_id = xba.bank_branch_id
                 --
                 AND TRUNC (SYSDATE) BETWEEN TRUNC (
                                                 NVL (xba.effective_start_date,
                                                      SYSDATE))
                                         AND TRUNC (
                                                 NVL (xba.effective_end_date,
                                                      SYSDATE))
                 --
                 AND NOT EXISTS
                         (SELECT hold_id
                            FROM xxmm_cts_holds a
                           WHERE     a.cts_header_id = cit.cts_header_id
                                 AND (   ( -- FP60651, if the HOLD type is 'SRV', then check the Impound level Hold, jwu
                                          a   .hold_entity_type =
                                                  DECODE (
                                                      cit.impound_trx_type,
                                                      xxmm_constants.gc_hold_entity_type_srv, xxmm_constants.gc_hold_entity_type_imp,
                                                      impound_trx_type)
                                          AND -- a.hold_entity_type  =   cit.impound_trx_type and
                                             a.entity_id = cit.impound_trx_id
                                          AND a.hold_type =
                                                  xxmm_constants.gc_hold_type
                                          AND --'Hold'                                  AND
                                             a.hold_code IS NOT NULL
                                          AND (   a.release_code IS NULL
                                               OR (    a.release_code
                                                           IS NOT NULL
                                                   AND a.approval_date IS NULL)))
                                      OR (    a.hold_entity_type =
                                                  xxmm_constants.gc_hold_entity_type_cts
                                          AND --'CTS'                                 AND
                                             a.entity_id = cit.cts_header_id
                                          AND a.hold_type =
                                                  xxmm_constants.gc_hold_type
                                          AND --'Hold'                                  AND
                                             a.hold_code IS NOT NULL
                                          AND (   a.release_code IS NULL
                                               OR (    a.release_code
                                                           IS NOT NULL
                                                   AND a.approval_date IS NULL)))))
        --
        ORDER BY 1,
                 2,
                 3,
                 4,
                 5,
                 6,
                 7 -->>Project G'Day (Australia) Sprint 5||Muhammad Imran Qureshi ||20-APR-2016
                  ,
                 13,
                 14,
                 15,
                 16
        --<<Project G'Day (Australia) Sprint 5||Muhammad Imran Qureshi ||20-APR-2016
        FOR UPDATE
            SKIP LOCKED;

    --



    CURSOR g_sel_imp1 (
        x_country                IN xxmm_cts_headers.country%TYPE,
        x_input_source           IN xxmm_cts_headers.input_source%TYPE,
        x_funding_method         IN xxmm_cts_impound_trx.funding_method%TYPE,
        x_bank_acc_inten_stlmt   IN xxmm_bank_accounts.account_name%TYPE,
        x_remit_thru_date        IN xxmm_receipt_batches.remittance_due_date%TYPE,
        x_control                IN xxmm_customer_controls.control_number%TYPE,
        x_impound_number_from    IN xxmm_cts_impound_trx.impound_trx_number%TYPE,
        x_impound_number_to      IN xxmm_cts_impound_trx.impound_trx_number%TYPE)
    IS
          --
          -- For impound transaction with Credit Push funding method
          --
          SELECT cit.funding_method,
                 --Functional Issue 2037
                 --        xlc.lookup_code intended_stlmt_bank,
                 xlc.attribute5 intended_stlmt_bank,
                 --
                 xba.account_name inten_stlmt_account_name,
                 TRUNC (get_remittance_due_date (cit.funding_method,
                                                 cit.impound_due_date,
                                                 x_remit_thru_date,
                                                 cit.impound_bank,
                                                 cit.impound_branch,
                                                 ich.input_source,
                                                 cit.adp_banking_partner,
                                                 cit.funding_method_sub_type,
                                                 -->>Rel3.2 QC 96 | Mamtha Babu | 29-Oct_2013
                                                 cit.impound_account,
                                                 --<<Rel3.2 QC 96 | Mamtha Babu | 29-Oct_2013
                                                 -->>PWR EU-13-352 - Debit Pull Selection Date | Ranjitha | 17-Jun-2013
                                                 ich.control_id --<<PWR EU-13-352 - Debit Pull Selection Date | Ranjitha | 17-Jun-2013
                                                               ))
                     remit_due_date,
                 xcc.control_number,
                 cit.impound_trx_type,
                 ich.country,
                 xbb.bank_number inten_stlmt_bank,
                 xbb.bank_branch_number inten_stlmt_branch,
                 xba.account_number inten_stlmt_account,
                 xba.bank_account_id inten_stlmt_bank_account_id,
                 xba.bank_branch_id inten_stlmt_bank_branch_id,
                 cit.impound_due_date,
                 cit.impound_bank,
                 cit.impound_branch,
                 cit.impound_account,
                 cit.impound_swift_bic,
                 cit.impound_account_name,
                 (  (  NVL (cit.impound_trx_amount, 0)
                     + NVL (cit.adjustment_amount, 0))
                  - (  NVL (cit.applied_amount, 0)
                     + NVL (cit.write_off_amount, 0)))
                     imp_trx_amt,
                 cit.receipt_currency,
                 ich.input_source,
                 cit.impound_trx_id impound_trx_id,
                 cit.cts_header_id cts_header_id,
                 cit.impound_trx_number,
                 cit.impound_trx_date,
                 cit.impound_trx_currency imp_trx_cur,
                 cit.receipt_currency imp_cur,
                 cit.fun_currency,
                 cit.exch_rate,
                 cit.fun_impound_trx_amount,
                 ich.control_id,
                 cit.applied_amount,
                 xl1.attribute3 consolidate_impounds,
                 DECODE (
                     cit.funding_method,
                     xxmm_constants.gc_credit_push_fund_meth, xlc.attribute3,
                     -->> Sharath Yaski | Project Moose | 29-OCT-2019
                     -- Bill pay changes
                     xxmm_constants.gc_bill_pay_fund_meth, xlc.attribute3,
                     --<< Sharath Yaski | Project Moose | 29-OCT-2019
                     xxmm_constants.gc_debit_pull_fund_meth, NULL,
                     xxmm_constants.gc_usrw_funding_method, NULL,
                     xxmm_constants.gc_nsfr_fund_meth, xlc.attribute4,
                     xxmm_constants.gc_uscp_fund_meth, xlc.attribute4,
                     NULL)
                     conc_bank_acct_name,
                 cit.funding_method_sub_type,
                 cit.adp_banking_partner
            FROM xxmm_cts_impound_trx cit,
                 xxmm_cts_headers ich,
                 xxmm_customer_controls xcc,
                 xxmm_lookups_v xl1,
                 xxmm_lookups_v xlc,
                 xxmm_bank_accounts xba,
                 xxmm_bank_branches xbb
           WHERE     ich.cts_header_id = cit.cts_header_id
                 --and     ich.status              =   xxmm_constants.gc_cts_status_com
                 --'COM'
                 AND ich.status IN
                         (xxmm_constants.gc_cts_header_status_completed,
                          xxmm_constants.gc_cts_header_status_prv,
                          xxmm_constants.gc_cts_header_status_rev)
                 AND cit.status = xxmm_constants.gc_validated_status
                 --'VAL'
                 AND NVL (cit.application_status,
                          xxmm_constants.gc_imp_unapplied_status       --'UNP'
                                                                ) IN
                         (xxmm_constants.gc_imp_unapplied_status,
                          xxmm_constants.gc_imp_partial_status)
                 --('UNP', 'PAP')
                 --
                 AND ich.country = NVL (x_country, ich.country)
                 --
                 AND ich.input_source = NVL (x_input_source, ich.input_source)
                 --AND     NVL(X_INPUT_SOURCE,ICH.INPUT_SOURCE)
                 --                             LIKE  '%'||ICH.INPUT_SOURCE||'%'
                 --
                 AND cit.funding_method =
                         NVL (x_funding_method, cit.funding_method)
                 AND TRUNC (
                         get_remittance_due_date (cit.funding_method,
                                                  cit.impound_due_date,
                                                  x_remit_thru_date,
                                                  cit.impound_bank,
                                                  cit.impound_branch,
                                                  ich.input_source,
                                                  cit.adp_banking_partner,
                                                  cit.funding_method_sub_type,
                                                  -->>Rel3.2 QC 96 | Mamtha Babu | 29-Oct_2013
                                                  cit.impound_account,
                                                  --<<Rel3.2 QC 96 | Mamtha Babu | 29-Oct_2013
                                                  -->>PWR EU-13-352 - Debit Pull Selection Date | Ranjitha | 17-Jun-2013
                                                  ich.control_id --<<PWR EU-13-352 - Debit Pull Selection Date | Ranjitha | 17-Jun-2013
                                                                )) <=
                         TRUNC (x_remit_thru_date)
                 AND cit.impound_trx_number BETWEEN NVL (
                                                        x_impound_number_from,
                                                        cit.impound_trx_number)
                                                AND NVL (
                                                        x_impound_number_to,
                                                        NVL (
                                                            x_impound_number_from,
                                                            cit.impound_trx_number))
                 AND (  (  NVL (cit.impound_trx_amount, 0)
                         + NVL (cit.adjustment_amount, 0))
                      - (  NVL (cit.applied_amount, 0)
                         + NVL (cit.write_off_amount, 0))) >= 0
                 AND xcc.control_id = ich.control_id
                 AND xcc.control_number = NVL (x_control, xcc.control_number)
                 AND cit.funding_method = xl1.lookup_code
                 AND NVL (xl1.attribute9, 'N') = 'Y'
                 AND xl1.lookup_type = xxmm_constants.gc_funding_method_lt
                 --'XXMM_FUNDING_METHODS'
                 AND ( /*
                      (  cit.funding_method   !=   xxmm_constants.gc_credit_push_fund_meth    (  and
                                                   --'02'                                        and
                         xlc.lookup_type       =   xxmm_constants.gc_settlement_bank_lt        and
                                                   --'XXMM_IF_SETTLEMENT_BANK'                AND
               --Functional Issue 2037
               --          xlc.lookup_code       =   cit.adp_banking_partner                     and
                         xlc.attribute5        =   cit.adp_banking_partner                     and
               --
                         xlc.attribute2        =   cit.funding_method                          and
                         xlc.source_value      =   ich.input_source                            and
                         xlc.attribute3        =   nvl(x_bank_acc_inten_stlmt,xlc.attribute3)  and
                         xba.account_name      =   xlc.attribute3
                      ) )
                      or */
                       (    cit.funding_method IN
                                -->> Sharath Yaski | Project Moose | 29-OCT-2019
                                -- Bill Pay changes
                                (xxmm_constants.gc_credit_push_fund_meth,
                                 xxmm_constants.gc_bill_pay_fund_meth)
        ---
        --- Start Muhammad 09-AUG-2019 FP-67663  Invalid Credit Push Accounts for Clients Based
        ---
                        AND (    xlc.lookup_type =
                                     --xxmm_constants.gc_credit_push_acct_lt
                                     xxmm_constants.gc_credit_push_acct_flex_lt
                             AND --'XXMM_CREDIT_PUSH_ACCOUNTS'              AND
                                --xlc.lookup_code = cit.adp_banking_partner
                                xlc.attribute8 = cit.adp_banking_partner
        ---
        --- End Muhammad 09-AUG-2019 FP-67663  Invalid Credit Push Accounts for Clients Based
        ---
                             AND xlc.source_value = ich.input_source
                             AND xlc.attribute2 =
                                     NVL (x_bank_acc_inten_stlmt,
                                          xlc.attribute2)
                             AND xba.account_name = xlc.attribute2
                             AND xlc.attribute1 =
                                     (SELECT a.account_name
                                        FROM xxmm_bank_accounts a,
                                             xxmm_bank_branches b
                                       WHERE     a.bank_branch_id =
                                                     b.bank_branch_id
                                             AND b.bank_number =
                                                     cit.impound_bank
                                             AND b.bank_branch_number =
                                                     cit.impound_branch
                                             AND a.account_number =
                                                     cit.impound_account
                                             AND TRUNC (SYSDATE) BETWEEN TRUNC (
                                                                             NVL (
                                                                                 a.effective_start_date,
                                                                                 SYSDATE))
                                                                     AND TRUNC (
                                                                             NVL (
                                                                                 a.effective_end_date,
                                                                                 SYSDATE))))))
                 --
                 AND xbb.bank_branch_id = xba.bank_branch_id
                 --
                 AND TRUNC (SYSDATE) BETWEEN TRUNC (
                                                 NVL (xba.effective_start_date,
                                                      SYSDATE))
                                         AND TRUNC (
                                                 NVL (xba.effective_end_date,
                                                      SYSDATE))
                 --
                 AND NOT EXISTS
                         (SELECT hold_id
                            FROM xxmm_cts_holds a
                           WHERE     a.cts_header_id = cit.cts_header_id
                                 AND (   ( -- FP60651, if the HOLD type is 'SRV', then check the Impound level Hold, jwu
                                          a   .hold_entity_type =
                                                  DECODE (
                                                      cit.impound_trx_type,
                                                      xxmm_constants.gc_hold_entity_type_srv, xxmm_constants.gc_hold_entity_type_imp,
                                                      impound_trx_type)
                                          AND -- a.hold_entity_type  =   cit.impound_trx_type and
                                             a.entity_id = cit.impound_trx_id
                                          AND a.hold_type =
                                                  xxmm_constants.gc_hold_type
                                          AND --'Hold'                                  AND
                                             a.hold_code IS NOT NULL
                                          AND (   a.release_code IS NULL
                                               OR (    a.release_code
                                                           IS NOT NULL
                                                   AND a.approval_date IS NULL)))
                                      OR (    a.hold_entity_type =
                                                  xxmm_constants.gc_hold_entity_type_cts
                                          AND --'CTS'                                 AND
                                             a.entity_id = cit.cts_header_id
                                          AND a.hold_type =
                                                  xxmm_constants.gc_hold_type
                                          AND --'Hold'                                  AND
                                             a.hold_code IS NOT NULL
                                          AND (   a.release_code IS NULL
                                               OR (    a.release_code
                                                           IS NOT NULL
                                                   AND a.approval_date IS NULL)))))
        --

        ORDER BY 1,
                 2,
                 3,
                 4,
                 5,
                 6,
                 7 -->>Project G'Day (Australia) Sprint 5||Muhammad Imran Qureshi ||20-APR-2016
                  ,
                 13,
                 14,
                 15,
                 16
        --<<Project G'Day (Australia) Sprint 5||Muhammad Imran Qureshi ||20-APR-2016
        FOR UPDATE
            SKIP LOCKED;


    --
    -- Cursor to select Funding Methods and related bank accounts for the creaion
    --        of Empty receipt Batches.
    --


    CURSOR g_empty_batch (
        x_input_source           IN xxmm_cts_headers.input_source%TYPE,
        x_funding_method         IN xxmm_cts_impound_trx.funding_method%TYPE,
        x_bank_acc_inten_stlmt   IN VARCHAR2)
    IS
          SELECT DISTINCT
                 xl1.lookup_code funding_method,
                 xl2.attribute5 country,
                 xbb.bank_number inten_stlmt_bank,
                 xbb.bank_branch_number inten_stlmt_branch,
                 xba.account_number inten_stlmt_account,
                 xba.account_name inten_stlmt_account_name,
                 xba.bank_account_id inten_stlmt_bank_account_id,
                 xba.bank_branch_id inten_stlmt_bank_branch_id,
                 xba.currency bank_acct_currency,
                 DECODE (
                     xl1.lookup_code,
                     xxmm_constants.gc_credit_push_fund_meth,          --'02',
                                                             xlc.attribute3,
                     -->> Sharath Yaski | Project Moose | 29-OCT-2019
                     -- Bill Pay
                     xxmm_constants.gc_bill_pay_fund_meth,             --'09',
                                                             xlc.attribute3,
                     --<< Sharath Yaski | Project Moose | 29-OCT-2019
                     xxmm_constants.gc_debit_pull_fund_meth,           --'00',
                                                            NULL,
                     xxmm_constants.gc_usrw_funding_method,            --'04',
                                                           NULL,
                     xxmm_constants.gc_nsfr_fund_meth,                 --'05',
                                                      xlc.attribute4,
                     xxmm_constants.gc_uscp_fund_meth,                 --'06',
                                                      xlc.attribute4,
                     NULL)
                     conc_bank_acct_name
            --
            FROM xxmm_lookups_v xl1,
                 xxmm_lookups_v xlc,
                 xxmm_lookups_v xl2,
                 xxmm_bank_accounts xba,
                 xxmm_bank_branches xbb
           WHERE     xl1.lookup_type = xxmm_constants.gc_funding_method_lt
                 --'XXMM_FUNDING_METHODS'
                 AND xl1.lookup_code = NVL (x_funding_method, xl1.lookup_code)
                 --
                 AND xl2.lookup_type = xxmm_constants.gc_input_source_lt
                 --'XXMM_INPUT_SOURCE'
                 AND xl2.lookup_code = NVL (x_input_source, xl2.lookup_code)
                 --
                 --Functional Issue 1901

                 --and     nvl(xl1.source_value,'X') =   nvl(x_input_source,nvl(xl1.source_value,'X'))
                 --
                 AND NVL (xl1.attribute9, 'N') = 'Y'
                 AND NVL (xl1.attribute6, 'N') = 'Y'
                 --
                 /*
                 and     xlc.lookup_type         =   decode(xl1.lookup_code,xxmm_constants.gc_debit_pull_fund_meth,xxmm_constants.gc_settlement_bank_lt,
                                                                            xxmm_constants.gc_usrw_funding_method , xxmm_constants.gc_settlement_bank_lt
                                                                                                                  , xxmm_constants.gc_credit_push_acct_lt)
                 and   ((  xl1.lookup_code       not in (    xxmm_constants.gc_credit_push_fund_meth,    --Functional Issue 1901
                                                             xxmm_constants.gc_nsfr_fund_meth ) and      --Functional Issue 1901
                 */
                 --
                 AND xlc.lookup_type = xxmm_constants.gc_settlement_bank_lt
                 AND xl1.lookup_code IN
                         (xxmm_constants.gc_debit_pull_fund_meth,
                          xxmm_constants.gc_usrw_funding_method,
                          xxmm_constants.gc_nsfr_fund_meth)
                 --
                 --'02'                              and
                 --xlc.lookup_type       =   xxmm_constants.gc_settlement_bank_lt        and
                 --'xxmm_if_settlement_bank'                and
                 AND xlc.attribute2 = xl1.lookup_code
                 --Functional Issue 1901

                 --nvl(xlc.source_value,'X')  =   nvl(x_input_source,nvl(xlc.source_value,'X')) and
                 --
                 AND xlc.attribute3 =
                         NVL (x_bank_acc_inten_stlmt, xlc.attribute3)
                 AND xba.account_name = xlc.attribute3
                 --       )
                 --       or
                 --       (  xl1.lookup_code       in  (    xxmm_constants.gc_credit_push_fund_meth,       --Functional Issue 1901
                 --                                         xxmm_constants.gc_nsfr_fund_meth ) and         --Functional Issue 1901
                 --'02'                                    and
                 --xlc.lookup_type       =   xxmm_constants.gc_credit_push_acct_lt    and
                 --'xxmm_credit_push_accounts'              and
                 --Functional Issue 1901

                 --nvl(xlc.source_value,'X')  =   nvl(x_input_source,nvl(xlc.source_value,'X')) and
                 --
                 --          xlc.attribute2        =   nvl(x_bank_acc_inten_stlmt,xlc.attribute2)  and
                 --          xba.account_name      =   xlc.attribute2
                 --       )
                 --       )
                 --
                 AND xbb.bank_branch_id = xba.bank_branch_id
                 --
                 AND TRUNC (SYSDATE) BETWEEN TRUNC (
                                                 NVL (xba.effective_start_date,
                                                      SYSDATE))
                                         AND TRUNC (
                                                 NVL (xba.effective_end_date,
                                                      SYSDATE))
        --
        GROUP BY xl1.lookup_code,
                 xl2.attribute5,
                 xbb.bank_number,
                 xbb.bank_branch_number,
                 xba.account_number,
                 xba.account_name,
                 xba.bank_account_id,
                 xba.bank_branch_id,
                 xba.currency,
                 xlc.attribute3,
                 xlc.attribute4
        --
        UNION
          --
          SELECT DISTINCT
                 xl1.lookup_code funding_method,
                 xl2.attribute5 country,
                 xbb.bank_number inten_stlmt_bank,
                 xbb.bank_branch_number inten_stlmt_branch,
                 xba.account_number inten_stlmt_account,
                 xba.account_name inten_stlmt_account_name,
                 xba.bank_account_id inten_stlmt_bank_account_id,
                 xba.bank_branch_id inten_stlmt_bank_branch_id,
                 xba.currency bank_acct_currency,
                 DECODE (
                     xl1.lookup_code,
                     xxmm_constants.gc_credit_push_fund_meth,          --'02',
                                                             xlc.attribute3,
                     -->> Sharath Yaski | Project Moose | 29-OCT-2019
                     -- Bill Pay
                     xxmm_constants.gc_bill_pay_fund_meth,             --'09',
                                                             xlc.attribute3,
                     --<< Sharath Yaski | Project Moose | 29-OCT-2019
                     xxmm_constants.gc_debit_pull_fund_meth,           --'00',
                                                            NULL,
                     xxmm_constants.gc_usrw_funding_method,            --'04',
                                                           NULL,
                     xxmm_constants.gc_nsfr_fund_meth,                 --'05',
                                                      xlc.attribute4,
                     xxmm_constants.gc_uscp_fund_meth,                 --'06',
                                                      xlc.attribute4,
                     NULL)
                     conc_bank_acct_name
            --
            FROM xxmm_lookups_v xl1,
                 xxmm_lookups_v xlc,
                 xxmm_lookups_v xl2,
                 xxmm_bank_accounts xba,
                 xxmm_bank_branches xbb
           WHERE     xl1.lookup_type = xxmm_constants.gc_funding_method_lt
                 --'XXMM_FUNDING_METHODS'
                 AND xl1.lookup_code = NVL (x_funding_method, xl1.lookup_code)
                 --
                 AND xl2.lookup_type = xxmm_constants.gc_input_source_lt
                 --'XXMM_INPUT_SOURCE'
                 AND xl2.lookup_code = NVL (x_input_source, xl2.lookup_code)
                 --
                 --Functional Issue 1901

                 --and     nvl(xl1.source_value,'X') =   nvl(x_input_source,nvl(xl1.source_value,'X'))
                 --
                 AND NVL (xl1.attribute9, 'N') = 'Y'
                 AND NVL (xl1.attribute6, 'N') = 'Y'
                 --
                 /*
                 and     xlc.lookup_type         =   decode(xl1.lookup_code,xxmm_constants.gc_debit_pull_fund_meth,xxmm_constants.gc_settlement_bank_lt,
                                                                            xxmm_constants.gc_usrw_funding_method , xxmm_constants.gc_settlement_bank_lt
                                                                                                                  , xxmm_constants.gc_credit_push_acct_lt)

                 --
                 and   ((  xl1.lookup_code       not in (    xxmm_constants.gc_credit_push_fund_meth,    --Functional Issue 1901
                                                             xxmm_constants.gc_nsfr_fund_meth ) and      --Functional Issue 1901
                                                      --'02'                              and
                           --xlc.lookup_type       =   xxmm_constants.gc_settlement_bank_lt        and
                                                     --'xxmm_if_settlement_bank'                and
                           xlc.attribute2        =   xl1.lookup_code and
                 --Functional Issue 1901

                           --nvl(xlc.source_value,'X')  =   nvl(x_input_source,nvl(xlc.source_value,'X')) and
                 --
                           xlc.attribute3        =   nvl(x_bank_acc_inten_stlmt,xlc.attribute3)  and
                           xba.account_name      =   xlc.attribute3
                        )
                        or
                        (
                 */
                 --
       ---
        --- Start Muhammad 09-AUG-2019 FP-67663  Invalid Credit Push Accounts for Clients Based
        ---
                 --AND xlc.lookup_type = xxmm_constants.gc_credit_push_acct_lt
                 AND xlc.lookup_type = xxmm_constants.gc_credit_push_acct_flex_lt
                             --AND --'XXMM_CREDIT_PUSH_ACCOUNTS'              AND
                                --xlc.lookup_code = cit.adp_banking_partner         --MIQ
                              --  xlc.attribute8 = cit.adp_banking_partner            --MIQ
        ---
        --- End Muhammad 09-AUG-2019 FP-67663  Invalid Credit Push Accounts for Clients Based
        ---
                 AND xl1.lookup_code IN
                         (xxmm_constants.gc_credit_push_fund_meth,
                         -->> Sharath Yaski | Project Moose | 29-OCT-2019
                         -- bill pay changes
                         xxmm_constants.gc_bill_pay_fund_meth
                         --<< Sharath Yaski | Project Moose | 29-OCT-2019
                         )
                 --
                 --       xl1.lookup_code       in  (    xxmm_constants.gc_credit_push_fund_meth,       --Functional Issue 1901
                 --                                         xxmm_constants.gc_nsfr_fund_meth ) and         --Functional Issue 1901
                 --'02'                                    and
                 --xlc.lookup_type       =   xxmm_constants.gc_credit_push_acct_lt    and
                 --'xxmm_credit_push_accounts'              and
                 --Functional Issue 1901

                 --nvl(xlc.source_value,'X')  =   nvl(x_input_source,nvl(xlc.source_value,'X')) and
                 --
                 AND xlc.attribute3 =
                         NVL (x_bank_acc_inten_stlmt, xlc.attribute3)
                 AND xba.account_name = xlc.attribute3
                 --       )
                 --       )
                 --
                 AND xbb.bank_branch_id = xba.bank_branch_id
                 --
                 AND TRUNC (SYSDATE) BETWEEN TRUNC (
                                                 NVL (xba.effective_start_date,
                                                      SYSDATE))
                                         AND TRUNC (
                                                 NVL (xba.effective_end_date,
                                                      SYSDATE))
        --
        GROUP BY xl1.lookup_code,
                 xl2.attribute5,
                 xbb.bank_number,
                 xbb.bank_branch_number,
                 xba.account_number,
                 xba.account_name,
                 xba.bank_account_id,
                 xba.bank_branch_id,
                 xba.currency,
                 xlc.attribute3,
                 xlc.attribute4
        --
        ORDER BY 1,
                 2,
                 3,
                 4,
                 5,
                 6;

    r_sel_imp                                 g_sel_imp%ROWTYPE;

    r_empty_batch                             g_empty_batch%ROWTYPE;

    r_sel_trans                               g_sel_imp%ROWTYPE;

    TYPE g_sel_trans IS TABLE OF g_sel_imp%ROWTYPE
        INDEX BY BINARY_INTEGER;

    g_trans_sel                               g_sel_trans;


    r_holds_rec                               xxmm_cts_holds%ROWTYPE;



    /*   PROCEDURE TEST (P_TEXT IN VARCHAR2 ) IS
          PRAGMA AUTONOMOUS_TRANSACTION;

       BEGIN

           G_CNT   :=  NVL(G_CNT,0) + 1;

       INSERT INTO xxmm.TEST VALUES (P_TEXT, G_CNT, FND_GLOBAL.USER_NAME--, sysdate
       );
       COMMIT;

       END TEST;
    */


    --
    -- This procedure is created for writing short debug text messages
    --


    PROCEDURE log_message -- >> Zephyr Canada | FP# 59712 | Sead Mucevic | 05-NOV-2012
                         -- Added p_debug_level to avoid always adding debug messages.
                          (
        p_message       IN xxmm_messages.g_message_rec.MESSAGE_TEXT%TYPE DEFAULT NULL,
        p_debug_level   IN PLS_INTEGER DEFAULT 1)
    IS
    ---------------------------------------------------------------------------------

    BEGIN
        IF gc_debug_level >= p_debug_level
        THEN
            xxmm_messages.reset_message_record;
            g_message_rec.MESSAGE_TYPE := xxmm_constants.msg_type_debug;

            IF g_request_id > 0
            THEN
                g_message_rec.message_destination :=
                    xxmm_constants.msg_destination_log;
            ELSE
                g_message_rec.message_destination :=
                    xxmm_constants.msg_destination_sql;
            END IF;

            g_message_rec.MESSAGE_TEXT := p_message;
            g_message_rec.message_level := p_debug_level;
            xxmm_messages.set_message_context (g_message_rec);
            xxmm_messages.log_message (g_message_rec);
        END IF;
    -- << Zephyr Canada | FP# 59712 | Sead Mucevic | 05-NOV-2012

--DBMS_OUTPUT.put_line (p_message);

    END log_message;



    --
    -- this procedure is created for writing error messages
    --

    PROCEDURE log_error (
        p_message        IN xxmm_messages.g_message_rec.MESSAGE_TEXT%TYPE DEFAULT NULL,
        p_message_type   IN xxmm_messages.g_message_rec.MESSAGE_TYPE%TYPE DEFAULT g_msg_type_error)
    IS
    ---------------------------------------------------------------------------------

    BEGIN
        xxmm_messages.reset_message_record;

        g_message_rec.MESSAGE_TYPE := p_message_type;
        g_message_rec.message_destination :=
            xxmm_constants.msg_destination_table;

        g_message_rec.MESSAGE_TEXT := p_message;

        xxmm_messages.set_message_context (g_message_rec);
        xxmm_messages.log_message (g_message_rec);

--DBMS_OUTPUT.put_line (p_message);

    END log_error;

    --
    -- this procedure is created for writing log messages
    --


    PROCEDURE log_file (
        p_message       IN xxmm_messages.g_message_rec.MESSAGE_TEXT%TYPE DEFAULT NULL,
        p_debug_level   IN PLS_INTEGER DEFAULT 1)
    IS
    ---------------------------------------------------------------------------------


    BEGIN
        IF p_debug_level <= g_debug_level
        THEN
            xxmm_messages.reset_message_record;
            g_message_rec.MESSAGE_TYPE := xxmm_constants.msg_type_debug;
            g_message_rec.message_destination :=
                xxmm_constants.msg_destination_log;

            g_message_rec.MESSAGE_TEXT := p_message;
            g_message_rec.message_level := p_debug_level;

            xxmm_messages.set_message_context (g_message_rec);
            xxmm_messages.log_message (g_message_rec);
        END IF;

        --xxmm_utilities.put_line_log (p_message);
        --DBMS_OUTPUT.put_line (p_message);
    --test(p_message);

    END log_file;


    PROCEDURE insert_hold_warn (
        x_cts_header_id      IN xxmm_cts_impound_trx.cts_header_id%TYPE,
        x_hold_entity_type   IN xxmm_cts_holds.hold_entity_type%TYPE,
        x_entity_id          IN xxmm_cts_holds.entity_id%TYPE,
        x_hold_code          IN xxmm_cts_holds.hold_code%TYPE,
        x_notes              IN xxmm_cts_holds.notes%TYPE,
        x_hold_type          IN xxmm_cts_holds.hold_type%TYPE,
        x_category           IN xxmm_cts_holds.category%TYPE)
    IS
    BEGIN
        r_holds_rec := NULL;

        r_holds_rec.hold_id := NULL;
        r_holds_rec.cts_header_id := x_cts_header_id;
        r_holds_rec.hold_entity_type := x_hold_entity_type;
        r_holds_rec.entity_id := x_entity_id;
        r_holds_rec.hold_code := x_hold_code;
        r_holds_rec.hold_date := g_srv_sysdate;
        r_holds_rec.held_by := XXMM_UTILITIES.get_user_name;
        r_holds_rec.hold_comments := NULL;
        r_holds_rec.release_code := NULL;
        r_holds_rec.release_date := NULL;
        r_holds_rec.release_by := NULL;
        r_holds_rec.release_comments := NULL;
        r_holds_rec.version := 1;
        r_holds_rec.attribute_category := NULL;
        r_holds_rec.attribute1 := NULL;
        r_holds_rec.attribute2 := NULL;
        r_holds_rec.attribute3 := NULL;
        r_holds_rec.attribute4 := NULL;
        r_holds_rec.attribute5 := NULL;
        r_holds_rec.attribute6 := NULL;
        r_holds_rec.attribute7 := NULL;
        r_holds_rec.attribute8 := NULL;
        r_holds_rec.attribute9 := NULL;
        r_holds_rec.attribute10 := NULL;
        r_holds_rec.attribute11 := NULL;
        r_holds_rec.attribute12 := NULL;
        r_holds_rec.attribute13 := NULL;
        r_holds_rec.attribute14 := NULL;
        r_holds_rec.attribute15 := NULL;
        r_holds_rec.concurrent_request_id := g_request_id;
        r_holds_rec.org_id := g_org_id;
        r_holds_rec.last_update_date := g_last_update_date;
        r_holds_rec.last_updated_by := g_last_updated_by;
        r_holds_rec.last_update_login := g_last_update_login;
        r_holds_rec.creation_date := g_creation_date;
        r_holds_rec.created_by := g_created_by;
        r_holds_rec.notes :=                           --g_batch_number||'~'||
               g_bank_number
            || ' '
            || g_branch_number
            || ' '
            || g_account_number
            || '~'
            || x_notes;
        r_holds_rec.hold_type := x_hold_type;
        r_holds_rec.approved_by := NULL;
        r_holds_rec.approval_date := NULL;
        r_holds_rec.category := x_category;

        IF NOT xxmm_cts_holds_h.insert_row (r_holds_rec,
                                            g_err_code,
                                            g_err_msg,
                                            g_table_id)
        THEN
            log_error (g_err_msg, xxmm_constants.msg_type_error);
            xxmm_utilities.put_line_log (g_err_msg);
            raise_application_error (-20001, g_err_msg || ' ' || SQLERRM);
        END IF;
    END insert_hold_warn;

    ----------------------------------------------------------------------------------
    --
    -- proecdure:     update_impound_trx
    --
    -- inputs:
    --
    --
    --
    --
    --
    -- output:        none
    --
    -- this procedure update the status of impound transaction in xxmm_cts_impound_trx table.
    --
    --+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    --
    --  modified by        date         description
    --
    -----------------------------------------------------------------------------------


    PROCEDURE update_impound_trx (
        x_impound_trx_id   IN xxmm_cts_impound_trx.impound_trx_id%TYPE,
        x_applied_amount   IN xxmm_cts_impound_trx.applied_amount%TYPE)
    IS
        l_program_unit   VARCHAR2 (100)
                             := g_package_name || '.UPDATE_IMPOUND_TRX';

        CURSOR c_imp_trx (
            p_impound_trx_id   IN xxmm_cts_impound_trx.impound_trx_id%TYPE)
        IS
            SELECT *
              FROM xxmm_cts_impound_trx
             WHERE impound_trx_id = p_impound_trx_id --for update of status, applied_amount
                                                    ;

        r_imp_trx        c_imp_trx%ROWTYPE;
    BEGIN
        log_message ('Starting >> ' || l_program_unit);



        log_file ('Impound Trx Id is ' || x_impound_trx_id);

        IF c_imp_trx%ISOPEN
        THEN
            CLOSE c_imp_trx;
        END IF;

        OPEN c_imp_trx (x_impound_trx_id);

        FETCH c_imp_trx INTO r_imp_trx;

        CLOSE c_imp_trx;

        log_file ('Impound Trx Number is ' || r_imp_trx.impound_trx_number);
        log_file (
               'Impound trx applied amount is '
            || TO_CHAR (r_imp_trx.applied_amount));
        log_file ('new applied amount is ' || TO_CHAR (x_applied_amount));


        IF (  NVL (r_imp_trx.impound_trx_amount, 0)
            + NVL (r_imp_trx.adjustment_amount, 0)) =
               (NVL (r_imp_trx.applied_amount, 0) + NVL (x_applied_amount, 0))
        THEN
            r_imp_trx.application_status :=
                xxmm_constants.gc_imp_applied_status;                 -- 'app'
        ELSIF (NVL (r_imp_trx.applied_amount, 0) + NVL (x_applied_amount, 0)) >
                  0
        THEN
            r_imp_trx.application_status :=
                xxmm_constants.gc_imp_partial_status;                 -- 'par'
        ELSE
            r_imp_trx.application_status :=
                xxmm_constants.gc_imp_unapplied_status;
        END IF;

        r_imp_trx.applied_amount :=
            NVL (r_imp_trx.applied_amount, 0) + NVL (x_applied_amount, 0);

        log_file (
            'Final applied amount is ' || TO_CHAR (r_imp_trx.applied_amount));
        log_file (
            'Final application Staus is ' || r_imp_trx.application_status);


        IF NOT xxmm_cts_impound_trx_h.update_row (
                   r_imp_trx.impound_trx_id,
                   r_imp_trx.cts_header_id,
                   r_imp_trx.impound_trx_type,
                   r_imp_trx.impound_trx_number,
                   r_imp_trx.impound_trx_date,
                   r_imp_trx.impound_trx_currency,
                   r_imp_trx.impound_trx_amount,
                   r_imp_trx.impound_due_date,
                   r_imp_trx.receipt_currency,
                   r_imp_trx.adp_banking_partner,
                   r_imp_trx.funding_method,
                   r_imp_trx.funding_terms,
                   r_imp_trx.status,
                   r_imp_trx.fun_currency,
                   r_imp_trx.exch_rate,
                   r_imp_trx.fun_impound_trx_amount,
                   r_imp_trx.version,
                   r_imp_trx.attribute_category,
                   r_imp_trx.attribute1,
                   r_imp_trx.attribute2,
                   r_imp_trx.attribute3,
                   r_imp_trx.attribute4,
                   r_imp_trx.attribute5,
                   r_imp_trx.attribute6,
                   r_imp_trx.attribute7,
                   r_imp_trx.attribute8,
                   r_imp_trx.attribute9,
                   r_imp_trx.attribute10,
                   r_imp_trx.attribute11,
                   r_imp_trx.attribute12,
                   r_imp_trx.attribute13,
                   r_imp_trx.attribute14,
                   r_imp_trx.attribute15,
                   r_imp_trx.concurrent_request_id,
                   r_imp_trx.org_id,
                   r_imp_trx.last_update_date,
                   r_imp_trx.last_updated_by,
                   r_imp_trx.last_update_login,
                   r_imp_trx.creation_date,
                   r_imp_trx.created_by,
                   r_imp_trx.impound_bank,
                   r_imp_trx.impound_branch,
                   r_imp_trx.impound_account,
                   r_imp_trx.comments,
                   r_imp_trx.applied_amount,
                   r_imp_trx.application_status,
                   r_imp_trx.adjustment_amount,
                   r_imp_trx.impound_swift_bic,
                   r_imp_trx.bank_account_id_refund,
                   r_imp_trx.impound_account_name,
                   r_imp_trx.fun_adjustment_amount,
                   r_imp_trx.funding_method_sub_type,
                   r_imp_trx.write_off_amount,
                   r_imp_trx.write_off_reason,
                   r_imp_trx.impound_bank_account_id,
                   r_imp_trx.approval_submitted_by,
                   r_imp_trx.bank_mandate_id,
                   g_err_code,
                   g_err_msg)
        THEN
            log_error (g_err_msg, xxmm_constants.msg_type_error);
            xxmm_utilities.put_line_log (g_err_msg);
            raise_application_error (-20002, g_err_msg || ' ' || SQLERRM);
        END IF;

        log_message ('Ending << ' || l_program_unit);
    EXCEPTION
        WHEN OTHERS
        THEN
            g_err_msg :=
                   'OTHER EXCEPTION, while Updating the STATUS of Impound Transaction in XXMM_CTS_IMPOUND_TRX table, the error text is :'
                || SQLERRM;

            log_error (g_err_msg, xxmm_constants.msg_type_error);
            xxmm_utilities.put_line_log (g_err_msg);
            raise_application_error (-20003, g_err_msg || ' ' || SQLERRM);
    END update_impound_trx;

    -->>PWR 17-121 Rel 4.5 | 07-MAY-2018  CQ - Sprint 1 - US US988191 - Debit Pull Straight Thru Processing | Muhammad Imran Qureshiand George Felian
    PROCEDURE update_receipt_batch_status (
        p_receipt_batch_id     IN xxmm_receipt_batches.receipt_batch_id%TYPE DEFAULT NULL,
        p_receipt_batch_name   IN xxmm_receipt_batches.receipt_batch_name%TYPE DEFAULT NULL,
        p_status               IN xxmm_receipt_batches.status%TYPE)
    IS
        l_program_unit      VARCHAR2 (100)
            := g_package_name || '.UPDATE_RECEIPT_BATCH_STATUS_DISB';

        CURSOR c_receipt_batches (
            x_receipt_batch_id     IN xxmm_receipt_batches.receipt_batch_id%TYPE,
            x_receipt_batch_name   IN xxmm_receipt_batches.receipt_batch_name%TYPE)
        IS
            SELECT *
              FROM xxmm_receipt_batches
             WHERE    receipt_batch_id = x_receipt_batch_id
                   OR receipt_batch_name = x_receipt_batch_name;

        r_receipt_batches   c_receipt_batches%ROWTYPE;
    BEGIN
        IF c_receipt_batches%ISOPEN
        THEN
            CLOSE c_receipt_batches;
        END IF;

        OPEN c_receipt_batches (p_receipt_batch_id, p_receipt_batch_name);

        FETCH c_receipt_batches INTO r_receipt_batches;

        CLOSE c_receipt_batches;

        r_receipt_batches.status := NVL (p_status, r_receipt_batches.status);
        r_receipt_batches.concurrent_request_id := g_request_id;
        r_receipt_batches.last_update_date := g_last_update_date;
        r_receipt_batches.last_updated_by := g_last_updated_by;

        IF NOT xxmm_receipt_batches_h.update_row (
                   r_receipt_batches.receipt_batch_id,
                   r_receipt_batches.receipt_batch_type,
                   r_receipt_batches.receipt_batch_number,
                   r_receipt_batches.receipt_batch_name,
                   r_receipt_batches.receipt_batch_date,
                   r_receipt_batches.country,
                   r_receipt_batches.funding_method,
                   r_receipt_batches.status,
                   r_receipt_batches.remittance_due_date,
                   r_receipt_batches.receipt_currency,
                   r_receipt_batches.impound_currency,
                   r_receipt_batches.bank_acc_id_intended_stlmt,
                   r_receipt_batches.bank_acc_id_final_stlmt,
                   r_receipt_batches.bank_acc_id_concentration,
                   r_receipt_batches.adp_exch_rate,
                   r_receipt_batches.attribute_category,
                   r_receipt_batches.attribute1,
                   r_receipt_batches.attribute2,
                   r_receipt_batches.attribute3,
                   r_receipt_batches.attribute4,
                   r_receipt_batches.attribute5,
                   r_receipt_batches.attribute6,
                   r_receipt_batches.attribute7,
                   r_receipt_batches.attribute8,
                   r_receipt_batches.attribute9,
                   r_receipt_batches.attribute10,
                   r_receipt_batches.attribute11,
                   r_receipt_batches.attribute12,
                   r_receipt_batches.attribute13,
                   r_receipt_batches.attribute14,
                   r_receipt_batches.attribute15,
                   r_receipt_batches.org_id,
                   r_receipt_batches.version,
                   r_receipt_batches.concurrent_request_id,
                   r_receipt_batches.last_update_date,
                   r_receipt_batches.last_updated_by,
                   r_receipt_batches.last_update_login,
                   r_receipt_batches.creation_date,
                   r_receipt_batches.created_by,
                   r_receipt_batches.adp_exch_rate_type,
                   r_receipt_batches.comments,
                   g_err_code,
                   g_err_msg)
        THEN
            log_error (g_err_msg, xxmm_constants.msg_type_error);
            xxmm_utilities.put_line_log (g_err_msg);
            xxmm_utilities.put_line_log (l_program_unit);
            raise_application_error (-20002, g_err_msg || ' ' || SQLERRM);
        END IF;
    EXCEPTION
        WHEN OTHERS
        THEN
            g_err_msg :=
                   'OTHER EXCEPTION, while Updating the STATUS of Disb Transaction in XXMM_RECEIPTS_BATCH table, the error text is :'
                || SQLERRM;
            log_error (g_err_msg, xxmm_constants.msg_type_error);
            xxmm_utilities.put_line_log (g_err_msg);
            xxmm_utilities.put_line_log (l_program_unit);
            raise_application_error (-20003, g_err_msg || ' ' || SQLERRM);
    END update_receipt_batch_status;

    --<<End  PWR 17-121 Rel 4.5 | 07-MAY-2018  CQ - Sprint 1 - US US988191 - Debit Pull Straight Thru Processing | Muhammad Imran Qureshiand George Felian

    -->>PWR 17-121 Rel 4.5 | 07-MAY-2018  CQ - Sprint 1 - US US988191 - Debit Pull Straight Thru Processing | Muhammad Imran Qureshiand George Felian
    PROCEDURE update_receipt_status (
        x_receipt_batch_id   IN xxmm_receipt_batches.receipt_batch_id%TYPE,
        --  x_receipt_number     IN xxmm_receipts.receipt_number%TYPE,
        x_receipt_status     IN xxmm_receipts.status%TYPE)
    IS
        l_program_unit   VARCHAR2 (100)
                             := g_package_name || '.UPDATE_RECEIPTS';

        CURSOR c_rec_trx (
            p_receipt_batch_id   IN xxmm_receipt_batches.receipt_batch_id%TYPE) --  p_receipt_number     IN xxmm_receipts.receipt_number%TYPE)
        IS
            SELECT *
              FROM xxmm_receipts
             WHERE     receipt_batch_id = p_receipt_batch_id --<<FP-66673 Exclude Non_Remit Receipt by updating status to 'Reviewed' | Muhammad Imran Qureshiand George Felian
                   AND status <> xxmm_constants.gc_receipt_status_non_remit -->>FP-66673 Exclude Non_Remit Receipt by updating status to 'Reviewed' | Muhammad Imran Qureshiand George Felian
                                                                           ;
    --  AND receipt_number = nvl(p_receipt_number,receipt_number);


    --r_rec_trx        c_rec_trx%ROWTYPE;
    BEGIN
        log_message ('Starting >> ' || l_program_unit);

        FOR r_rec_trx IN c_rec_trx (x_receipt_batch_id)
        LOOP
            /*
             IF c_rec_trx%ISOPEN
             THEN
                CLOSE c_rec_trx;
             END IF;


             OPEN c_rec_trx (x_receipt_batch_id, x_receipt_number);

             FETCH c_rec_trx INTO r_rec_trx;

             CLOSE c_rec_trx;
           */

            r_rec_trx.status := NVL (x_receipt_status, r_rec_trx.status);
            r_rec_trx.concurrent_request_id := g_request_id;
            r_rec_trx.last_update_date := g_last_update_date;
            r_rec_trx.last_updated_by := g_last_updated_by;


            IF NOT xxmm_receipts_h.update_row (
                       r_rec_trx.receipt_batch_id,
                       r_rec_trx.receipt_id,
                       r_rec_trx.control_id,
                       r_rec_trx.receipt_type,
                       r_rec_trx.receipt_number,
                       r_rec_trx.receipt_date,
                       r_rec_trx.receipt_currency,
                       r_rec_trx.receipt_amount,
                       r_rec_trx.applied_amount,
                       r_rec_trx.receipt_due_date,
                       r_rec_trx.input_source,
                       r_rec_trx.status,
                       r_rec_trx.application_status,
                       r_rec_trx.bank_acc_id_final_stlmt,
                       r_rec_trx.reversal_date,
                       r_rec_trx.reversed_by,
                       r_rec_trx.reversal_reason,
                       r_rec_trx.comments,
                       r_rec_trx.bank_statement_line_id,
                       r_rec_trx.outbound_file_id,
                       r_rec_trx.spread_tier,
                       r_rec_trx.spread_rate,
                       r_rec_trx.version,
                       r_rec_trx.attribute_category,
                       r_rec_trx.attribute1,
                       r_rec_trx.attribute2,
                       r_rec_trx.attribute3,
                       r_rec_trx.attribute4,
                       r_rec_trx.attribute5,
                       r_rec_trx.attribute6,
                       r_rec_trx.attribute7,
                       r_rec_trx.attribute8,
                       r_rec_trx.attribute9,
                       r_rec_trx.attribute10,
                       r_rec_trx.attribute11,
                       r_rec_trx.attribute12,
                       r_rec_trx.attribute13,
                       r_rec_trx.attribute14,
                       r_rec_trx.attribute15,
                       r_rec_trx.concurrent_request_id,
                       r_rec_trx.org_id,
                       r_rec_trx.last_update_date,
                       r_rec_trx.last_updated_by,
                       r_rec_trx.last_update_login,
                       r_rec_trx.creation_date,
                       r_rec_trx.created_by,
                       r_rec_trx.trace_number,
                       r_rec_trx.fun_receipt_amount,
                       r_rec_trx.control_exch_rate,
                       r_rec_trx.fun_spread_amount,
                       r_rec_trx.maturity_date,
                       r_rec_trx.cancelled_date,
                       r_rec_trx.description,
                       r_rec_trx.ack_flag,
                       r_rec_trx.control_account_name,
                       r_rec_trx.control_bank,
                       r_rec_trx.control_branch,
                       r_rec_trx.control_account,
                       r_rec_trx.control_swift_bic,
                       r_rec_trx.accounted_flag,
                       r_rec_trx.fun_currency,
                       r_rec_trx.write_off_amount,
                       r_rec_trx.accounted_flag_spread,
                       r_rec_trx.recon_status,
                       r_rec_trx.write_off_refund_reason,
                       r_rec_trx.recon_amount,
                       r_rec_trx.receipt_category,
                       r_rec_trx.file_group_number,
                       r_rec_trx.file_group_sequence,
                       r_rec_trx.reversal_rate,
                       r_rec_trx.reversal_gain_loss_amt,
                       r_rec_trx.approval_submitted_by,
                       g_err_code,
                       g_err_msg)
            THEN
                log_error (g_err_msg, xxmm_constants.msg_type_error);
                xxmm_utilities.put_line_log (g_err_msg);
                raise_application_error (-20004, g_err_msg || ' ' || SQLERRM);
            END IF;
        END LOOP;

        log_message ('Ending << ' || l_program_unit);
    EXCEPTION
        WHEN OTHERS
        THEN
            g_err_msg :=
                   'OTHER EXCEPTION, while Updating the receipt status in XXMM_RECEIPTS table, the error text is :'
                || SQLERRM;

            log_error (g_err_msg, xxmm_constants.msg_type_error);
            xxmm_utilities.put_line_log (g_err_msg);
            raise_application_error (-20005, g_err_msg || ' ' || SQLERRM);
    END update_receipt_status;

    --<<End  PWR 17-121 Rel 4.5 | 07-MAY-2018  CQ - Sprint 1 - US US988191 - Debit Pull Straight Thru Processing | Muhammad Imran Qureshiand George Felian


    PROCEDURE update_receipts (
        x_receipt_batch_id   IN xxmm_receipt_batches.receipt_batch_id%TYPE,
        x_receipt_number     IN xxmm_receipts.receipt_number%TYPE,
        x_receipt_amount     IN xxmm_receipts.receipt_amount%TYPE)
    IS
        l_program_unit   VARCHAR2 (100)
                             := g_package_name || '.UPDATE_RECEIPTS';

        CURSOR c_rec_trx (
            p_receipt_batch_id   IN xxmm_receipt_batches.receipt_batch_id%TYPE,
            p_receipt_number     IN xxmm_receipts.receipt_number%TYPE)
        IS
            SELECT *
              FROM xxmm_receipts
             WHERE     receipt_batch_id = p_receipt_batch_id
                   AND receipt_number = p_receipt_number;


        r_rec_trx        c_rec_trx%ROWTYPE;
    BEGIN
        log_message ('Starting >> ' || l_program_unit);



        IF c_rec_trx%ISOPEN
        THEN
            CLOSE c_rec_trx;
        END IF;

        OPEN c_rec_trx (x_receipt_batch_id, x_receipt_number);

        FETCH c_rec_trx INTO r_rec_trx;

        CLOSE c_rec_trx;

        --log_file ('the receipt number is '||x_receipt_number
        --     ||' and receipt amount is '
        --     ||to_char(x_receipt_amount));


        -->>Project G'Day (Australia) Sprint 5||Muhammad Imran Qureshi ||20-APR-2016

        IF g_consolidate_impounds
        THEN
            r_rec_trx.applied_amount := NVL (x_receipt_amount, 0);
            r_rec_trx.fun_receipt_amount := NVL (x_receipt_amount, 0);
            r_rec_trx.status := xxmm_constants.gc_receipt_status_created;
            r_rec_trx.application_status :=
                xxmm_constants.gc_rec_app_status_apply;
        END IF;

        --<<Project G'Day (Australia) Sprint 5||Muhammad Imran Qureshi ||20-APR-2016

        IF NOT xxmm_receipts_h.update_row (r_rec_trx.receipt_batch_id,
                                           r_rec_trx.receipt_id,
                                           r_rec_trx.control_id,
                                           r_rec_trx.receipt_type,
                                           r_rec_trx.receipt_number,
                                           r_rec_trx.receipt_date,
                                           r_rec_trx.receipt_currency,
                                           NVL (x_receipt_amount, 0),
                                           -->>Project G'Day (Australia) Sprint 5||Muhammad Imran Qureshi ||20-APR-2016
                                           r_rec_trx.applied_amount,
                                           -->>Project G'Day (Australia) Sprint 5||Muhammad Imran Qureshi ||20-APR-2016
                                           r_rec_trx.receipt_due_date,
                                           r_rec_trx.input_source,
                                           r_rec_trx.status,
                                           r_rec_trx.application_status,
                                           r_rec_trx.bank_acc_id_final_stlmt,
                                           r_rec_trx.reversal_date,
                                           r_rec_trx.reversed_by,
                                           r_rec_trx.reversal_reason,
                                           r_rec_trx.comments,
                                           r_rec_trx.bank_statement_line_id,
                                           r_rec_trx.outbound_file_id,
                                           r_rec_trx.spread_tier,
                                           r_rec_trx.spread_rate,
                                           r_rec_trx.version,
                                           r_rec_trx.attribute_category,
                                           r_rec_trx.attribute1,
                                           r_rec_trx.attribute2,
                                           r_rec_trx.attribute3,
                                           r_rec_trx.attribute4,
                                           r_rec_trx.attribute5,
                                           r_rec_trx.attribute6,
                                           r_rec_trx.attribute7,
                                           r_rec_trx.attribute8,
                                           r_rec_trx.attribute9,
                                           r_rec_trx.attribute10,
                                           r_rec_trx.attribute11,
                                           r_rec_trx.attribute12,
                                           r_rec_trx.attribute13,
                                           r_rec_trx.attribute14,
                                           r_rec_trx.attribute15,
                                           r_rec_trx.concurrent_request_id,
                                           r_rec_trx.org_id,
                                           r_rec_trx.last_update_date,
                                           r_rec_trx.last_updated_by,
                                           r_rec_trx.last_update_login,
                                           r_rec_trx.creation_date,
                                           r_rec_trx.created_by,
                                           r_rec_trx.trace_number,
                                           r_rec_trx.fun_receipt_amount,
                                           r_rec_trx.control_exch_rate,
                                           r_rec_trx.fun_spread_amount,
                                           r_rec_trx.maturity_date,
                                           r_rec_trx.cancelled_date,
                                           r_rec_trx.description,
                                           r_rec_trx.ack_flag,
                                           r_rec_trx.control_account_name,
                                           r_rec_trx.control_bank,
                                           r_rec_trx.control_branch,
                                           r_rec_trx.control_account,
                                           r_rec_trx.control_swift_bic,
                                           r_rec_trx.accounted_flag,
                                           r_rec_trx.fun_currency,
                                           r_rec_trx.write_off_amount,
                                           r_rec_trx.accounted_flag_spread,
                                           r_rec_trx.recon_status,
                                           r_rec_trx.write_off_refund_reason,
                                           r_rec_trx.recon_amount,
                                           r_rec_trx.receipt_category,
                                           r_rec_trx.file_group_number,
                                           r_rec_trx.file_group_sequence,
                                           r_rec_trx.reversal_rate,
                                           r_rec_trx.reversal_gain_loss_amt,
                                           r_rec_trx.approval_submitted_by,
                                           g_err_code,
                                           g_err_msg)
        THEN
            log_error (g_err_msg, xxmm_constants.msg_type_error);
            xxmm_utilities.put_line_log (g_err_msg);
            raise_application_error (-20004, g_err_msg || ' ' || SQLERRM);
        END IF;

        log_message ('Ending << ' || l_program_unit);
    EXCEPTION
        WHEN OTHERS
        THEN
            g_err_msg :=
                   'OTHER EXCEPTION, while Updating the receipt amount in XXMM_RECEIPTS table, the error text is :'
                || SQLERRM;

            log_error (g_err_msg, xxmm_constants.msg_type_error);
            xxmm_utilities.put_line_log (g_err_msg);
            raise_application_error (-20005, g_err_msg || ' ' || SQLERRM);
    END update_receipts;

    ----------------------------------------------------------------------------------
    --
    -- Proecdure:     GET_BATCH_DETAILS
    --
    -- Inputs:
    --
    --
    --
    --
    --
    -- Output:        None
    --
    -- This procedure get the receipt batch details for the batch in which receipts will
    -- be added. This will happen only in case if the ADD_RECEIPTS button will be use on
    -- receipt worbench form.
    --
    --+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    --
    --  Modified By        Date         Description
    --
    -----------------------------------------------------------------------------------


    FUNCTION get_batch_details (
        x_batch_id                     IN     xxmm_receipt_batches.receipt_batch_id%TYPE,
        x_remittance_due_date             OUT xxmm_receipt_batches.remittance_due_date%TYPE,
        x_receipt_currency                OUT xxmm_receipt_batches.receipt_currency%TYPE,
        x_impound_currency                OUT xxmm_receipt_batches.impound_currency%TYPE,
        x_exchange_rate                   OUT xxmm_receipt_batches.adp_exch_rate%TYPE,
        x_bank_acc_id_intended_stlmt      OUT xxmm_bank_accounts.bank_account_id%TYPE,
        x_country                         OUT xxmm_receipt_batches.country%TYPE,
        x_funding_method                  OUT xxmm_receipt_batches.funding_method%TYPE --
                                                                                      ,
        x_bank_acc_id_final_stlmt         OUT xxmm_bank_accounts.bank_account_id%TYPE)
        RETURN BOOLEAN
    IS
        CURSOR c_batch (
            p_batch_id   IN xxmm_receipt_batches.receipt_batch_id%TYPE)
        IS
            SELECT *
              FROM xxmm_receipt_batches
             WHERE receipt_batch_id = p_batch_id;



        l_program_unit   VARCHAR2 (100)
                             := g_package_name || '.GET_BATCH_DETAILS';
        l_return         BOOLEAN := FALSE;
    BEGIN
        log_message ('Starting Program Unit ' || l_program_unit);


        --
        -- check if the batch already exist
        --
        g_receipt_batches_rec := NULL;

        log_message ('Getting batch details  ' || l_program_unit);
        log_file ('Getting batch details  ' || l_program_unit);

        IF c_batch%ISOPEN
        THEN
            CLOSE c_batch;
        END IF;

        OPEN c_batch (x_batch_id);

        FETCH c_batch INTO g_receipt_batches_rec;

        CLOSE c_batch;

        IF g_receipt_batches_rec.receipt_batch_id IS NOT NULL
        THEN
            g_batch_id := g_receipt_batches_rec.receipt_batch_id;
            x_receipt_currency := g_receipt_batches_rec.receipt_currency;
            x_impound_currency := g_receipt_batches_rec.impound_currency;
            x_exchange_rate := g_receipt_batches_rec.adp_exch_rate;
            x_bank_acc_id_intended_stlmt :=
                g_receipt_batches_rec.bank_acc_id_intended_stlmt;
            x_country := g_receipt_batches_rec.country;
            x_funding_method := g_receipt_batches_rec.funding_method;
            x_bank_acc_id_final_stlmt :=
                g_receipt_batches_rec.bank_acc_id_final_stlmt;
            l_return := TRUE;
        ELSE
            x_receipt_currency := NULL;
            x_impound_currency := NULL;
            x_exchange_rate := NULL;
            x_bank_acc_id_intended_stlmt := NULL;
            x_country := NULL;
            x_funding_method := NULL;
            x_bank_acc_id_final_stlmt := NULL;

            l_return := FALSE;
        END IF;

        log_message ('Ending << ' || l_program_unit);


        RETURN (l_return);
    EXCEPTION
        WHEN OTHERS
        THEN
            g_err_msg :=
                   'OTHER EXCEPTION, Unable to get batch details from XXMM_RECEIPT_BATCHES table, the error text is :'
                || SQLERRM;
            log_error (g_err_msg, xxmm_constants.msg_type_error);
            xxmm_utilities.put_line_log (g_err_msg);
            RETURN (FALSE);
    END get_batch_details;



    ----------------------------------------------------------------------------------
    --
    -- proecdure:     insert_receipt_batch
    --
    -- inputs:
    --
    --
    --
    --
    --
    -- output:        none
    --
    -- this procedure inserts record into xxmm_receipt_batches table for
    -- each each receipt batch created.
    --
    --+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    --
    --  modified by        date         description
    --
    -----------------------------------------------------------------------------------


    PROCEDURE insert_receipt_batch (
        x_funding_method               IN     xxmm_receipt_batches.funding_method%TYPE,
        x_remittance_due_date          IN     xxmm_receipt_batches.remittance_due_date%TYPE,
        x_receipt_currency             IN     xxmm_receipt_batches.receipt_currency%TYPE,
        x_impound_currency             IN     xxmm_receipt_batches.impound_currency%TYPE,
        x_exchange_rate                IN     xxmm_receipt_batches.adp_exch_rate%TYPE,
        x_bank_acc_id_intended_stlmt   IN     NUMBER,
        x_bank_acc_id_final_stlmt      IN     NUMBER,
        x_country                      IN     xxmm_receipt_batches.country%TYPE,
        x_new_batch                    IN     VARCHAR2,
        x_rec_count                    IN OUT NUMBER)
    IS
        CURSOR c_batch (
            p_funding_method               IN xxmm_receipt_batches.funding_method%TYPE,
            p_remittance_due_date          IN xxmm_receipt_batches.remittance_due_date%TYPE,
            p_receipt_currency             IN xxmm_receipt_batches.receipt_currency%TYPE,
            p_impound_currency             IN xxmm_receipt_batches.impound_currency%TYPE,
            p_bank_acc_id_intended_stlmt   IN NUMBER,
            p_country                      IN xxmm_receipt_batches.country%TYPE)
        IS
            SELECT *
              FROM xxmm_receipt_batches
             WHERE     funding_method = p_funding_method
                   AND TRUNC (remittance_due_date) =
                           TRUNC (p_remittance_due_date)
                   AND receipt_currency = p_receipt_currency
                   AND impound_currency = p_impound_currency
                   AND country = p_country
                   AND bank_acc_id_intended_stlmt =
                           p_bank_acc_id_intended_stlmt
                   AND status = xxmm_constants.gc_rec_batch_status_created --'new'
                   AND receipt_batch_type =
                           xxmm_constants.gc_rec_batch_type_auto;

        CURSOR c_rec (
            p_receipt_batch_id   IN xxmm_receipt_batches.receipt_batch_id%TYPE)
        IS
            SELECT COUNT (*)
              FROM xxmm_receipts
             WHERE receipt_batch_id = p_receipt_batch_id;

        l_program_unit       VARCHAR2 (100)
                                 := g_package_name || '.Insert_Receipt_Batch';
        l_total_rec          NUMBER DEFAULT NULL;
        l_create_new_batch   BOOLEAN DEFAULT FALSE;
    BEGIN
        log_message ('Starting Program Unit ' || l_program_unit);


        --
        -- check if the batch already exist
        --
        g_receipt_batches_rec := NULL;



        IF NVL (x_new_batch, 'N') = 'Y'
        THEN
            log_file ('Create new batch... ');

            l_create_new_batch := TRUE;
        ELSE
            log_message ('Checking the existing Batch  ' || l_program_unit);
            log_file ('Checking the existing Batch  ' || l_program_unit);

            IF c_batch%ISOPEN
            THEN
                CLOSE c_batch;
            END IF;

            OPEN c_batch (x_funding_method,
                          x_remittance_due_date,
                          x_receipt_currency,
                          x_impound_currency,
                          x_bank_acc_id_intended_stlmt,
                          x_country);

            FETCH c_batch INTO g_receipt_batches_rec;

            IF c_batch%FOUND
            THEN
                --
                -- Check for Maximum receipts in the existing batch
                --
                log_file (
                       'c_batch exists, batch_id  '
                    || g_receipt_batches_rec.receipt_batch_id);


                IF c_rec%ISOPEN
                THEN
                    CLOSE c_rec;
                END IF;

                OPEN c_rec (g_receipt_batches_rec.receipt_batch_id);

                FETCH c_rec INTO l_total_rec;

                IF NVL (l_total_rec, 0) < NVL (g_max_receipt_count, 0)
                THEN
                    l_create_new_batch := FALSE;

                    log_message (
                           'Adding Receipts to an existing Batch.'
                        || g_receipt_batches_rec.receipt_batch_number);
                    log_file (
                           'Adding Receipts to an existing Batch.'
                        || g_receipt_batches_rec.receipt_batch_number);

                    log_file (
                           'funding_method = '
                        || g_receipt_batches_rec.funding_method);
                    log_file (
                           'remittance_due_date = '
                        || g_receipt_batches_rec.remittance_due_date);
                    log_file (
                           'batch_date = '
                        || g_receipt_batches_rec.receipt_batch_date);


                    g_batch_id := g_receipt_batches_rec.receipt_batch_id;
                    g_batch_number :=
                        g_receipt_batches_rec.receipt_batch_number;
                    g_batch_name := g_receipt_batches_rec.receipt_batch_name;
                    g_batch_date := g_receipt_batches_rec.receipt_batch_date;
                    g_new_flag := 'No';

                    x_rec_count := NVL (l_total_rec, 0);
                ELSE
                    log_message (
                        'Found existing batch but cannot add receipts, maximum receipts exist in the batch. Creating new batch.');
                    log_file (
                        'Found existing batch but cannot add receipts, maximum receipts exist in the batch. Creating new batch.');

                    l_create_new_batch := TRUE;
                END IF;
            ELSE
                l_create_new_batch := TRUE;
            END IF;

            --Karen Jiang |Oct 7,2014
            IF c_rec%ISOPEN
            THEN
                CLOSE c_rec;
            END IF;

            IF c_batch%ISOPEN
            THEN
                CLOSE c_batch;
            END IF;
        --Karen Jiang |Oct 7,2014
        END IF;



        IF l_create_new_batch
        THEN
            --
            -- create new batch
            --
            g_new_flag := 'Yes';
            g_batch_date := g_srv_sysdate; --19-APR-2016 --g_srv_sysdate;--g_clt_sysdate; --TRUNC(g_clt_sysdate);
            x_rec_count := 0;

            --log_message ('Client Timezone Date : '||  g_clt_sysdate);

            get_batch_number (
                x_funding_method,
                g_fm_short_name,
                -->>Project G'day | ranjitha | 11-APR-2016 | Converting into client timezone
                TRUNC (xxmm_timezones.get_ou_date (g_batch_date, g_org_id)),
                --<<Project G'day | ranjitha | 11-APR-2016 | Converting into client timezone
                g_batch_number);

            log_message (
                   'Creating Receipt Batch.'
                || g_batch_number
                || '   '
                || l_program_unit);

            log_file (
                   'Creating Receipt Batch.'
                || g_batch_number
                || '   '
                || l_program_unit);


            g_receipt_batches_rec.receipt_batch_id := NULL;
            g_receipt_batches_rec.receipt_batch_type :=
                xxmm_constants.gc_rec_batch_type_auto;
            g_receipt_batches_rec.receipt_batch_number := g_batch_number;
            g_receipt_batches_rec.receipt_batch_name := g_batch_name;
            g_receipt_batches_rec.receipt_batch_date :=
                TRUNC (xxmm_timezones.get_ou_date (g_batch_date, g_org_id)); --19-APR-2016 --g_srv_sysdate; --g_batch_date; --g_batch_date
            g_receipt_batches_rec.country := x_country;
            g_receipt_batches_rec.funding_method := x_funding_method;
            g_receipt_batches_rec.status :=
                xxmm_constants.gc_rec_batch_status_created;
            g_receipt_batches_rec.remittance_due_date :=
                x_remittance_due_date;
            g_receipt_batches_rec.receipt_currency := x_receipt_currency;
            g_receipt_batches_rec.impound_currency := x_impound_currency;
            g_receipt_batches_rec.bank_acc_id_intended_stlmt :=
                x_bank_acc_id_intended_stlmt;

            IF x_funding_method IN
                   (xxmm_constants.gc_credit_push_fund_meth,
                    -->> Sharath Yaski | Project Moose | 29-OCT-2019
                    -- Bill Pay changes
                    xxmm_constants.gc_bill_pay_fund_meth,
                    --<< Sharath Yaski | Project Moose | 29-OCT-2019
                    xxmm_constants.gc_nsfr_fund_meth,
                    xxmm_constants.gc_uscp_fund_meth)
            THEN
                g_receipt_batches_rec.bank_acc_id_final_stlmt :=
                    x_bank_acc_id_final_stlmt;
            ELSE
                g_receipt_batches_rec.bank_acc_id_final_stlmt := NULL;
            END IF;

            g_receipt_batches_rec.bank_acc_id_concentration := NULL;

            IF x_receipt_currency = x_impound_currency
            THEN
                g_receipt_batches_rec.adp_exch_rate := 1;
            ELSE
                g_receipt_batches_rec.adp_exch_rate := x_exchange_rate;
            END IF;

            g_receipt_batches_rec.last_update_date := g_srv_sysdate;
            g_receipt_batches_rec.last_updated_by := XXMM_UTILITIES.get_user_id;
            g_receipt_batches_rec.last_update_login := XXMM_UTILITIES.get_user_login;
            g_receipt_batches_rec.creation_date := g_srv_sysdate;
            g_receipt_batches_rec.created_by := XXMM_UTILITIES.get_user_id;
            g_receipt_batches_rec.attribute_category := NULL;
            g_receipt_batches_rec.attribute1 := NULL;
            g_receipt_batches_rec.attribute2 := NULL;
            g_receipt_batches_rec.attribute3 := NULL;
            g_receipt_batches_rec.attribute4 := NULL;
            g_receipt_batches_rec.attribute5 := NULL;
            g_receipt_batches_rec.attribute6 := NULL;
            g_receipt_batches_rec.attribute7 := NULL;
            g_receipt_batches_rec.attribute8 := NULL;
            g_receipt_batches_rec.attribute9 := NULL;
            g_receipt_batches_rec.attribute10 := NULL;
            g_receipt_batches_rec.attribute11 := NULL;
            g_receipt_batches_rec.attribute12 := NULL;
            g_receipt_batches_rec.attribute13 := NULL;
            g_receipt_batches_rec.attribute14 := NULL;
            g_receipt_batches_rec.attribute15 := NULL;
            g_receipt_batches_rec.org_id := g_org_id;
            g_receipt_batches_rec.version := 1;
            g_receipt_batches_rec.concurrent_request_id := g_request_id;
            g_receipt_batches_rec.adp_exch_rate_type := NULL;
            g_receipt_batches_rec.comments := NULL;

            log_message (
                   'Inserting record in xxmm_receipt_batches table '
                || l_program_unit);



            IF NOT xxmm_receipt_batches_h.insert_row (g_receipt_batches_rec,
                                                      g_err_code,
                                                      g_err_msg,
                                                      g_batch_id)
            THEN
                log_error (g_err_msg, xxmm_constants.msg_type_error);
                xxmm_utilities.put_line_log (g_err_msg);
                raise_application_error (-20006, g_err_msg || ' ' || SQLERRM);
            END IF;

            g_receipt_batches_rec.receipt_batch_id := g_batch_id;
        --
        END IF;

        --
        -- CLOSE c_batch;  karen jiang |Oct 7,2014

        log_message ('Ending << ' || l_program_unit);
    EXCEPTION
        WHEN OTHERS
        THEN
            g_err_msg :=
                   'OTHER EXCEPTION, Unable to insert record in XXMM_RECEIPT_BATCHES table, the error text is :'
                || SQLERRM;
            log_error (g_err_msg, xxmm_constants.msg_type_error);
            xxmm_utilities.put_line_log (g_err_msg);
            raise_application_error (-20007, g_err_msg || ' ' || SQLERRM);
    END insert_receipt_batch;


    ---------------------------------------------------------------------------------
    --
    -- proecdure:     insert_receipt_applications
    --
    -- inputs:
    --
    --
    --
    --
    --
    -- output:        none
    --
    -- this procedure inserts record into xxmm_receipt_applications table for
    -- each each receipt created.
    --
    --+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    --
    --  modified by        date         description
    --
    -----------------------------------------------------------------------------------


    PROCEDURE insert_receipt_applications (
        x_impound_trx_id   IN xxmm_receipt_applications.impound_trx_id%TYPE,
        --x_cts_header_id   in xxmm_cts_headers.cts_header_id%type,
        x_applied_amount   IN xxmm_receipt_applications.application_amount%TYPE,
        x_funding_method   IN xxmm_receipt_batches.funding_method%TYPE,
        x_imp_trx_cur      IN xxmm_cts_impound_trx.impound_trx_currency%TYPE)
    IS
        l_program_unit   VARCHAR2 (100)
            := g_package_name || '.Insert_Receipt_Applications';
    BEGIN
        log_message ('Starting >> ' || l_program_unit);



        g_receipt_applications_rec.application_id := NULL;
        g_receipt_applications_rec.receipt_id := g_receipt_id;
        g_receipt_applications_rec.impound_trx_id := x_impound_trx_id;
        g_receipt_applications_rec.application_type :=
            xxmm_constants.gc_rec_app_type_apply;
        g_receipt_applications_rec.application_date := g_srv_sysdate;
        g_receipt_applications_rec.application_amount := x_applied_amount;
        g_receipt_applications_rec.status :=
            xxmm_constants.gc_rec_app_status_apply;

        --
        g_receipt_applications_rec.last_update_date := g_srv_sysdate;
        g_receipt_applications_rec.last_updated_by := XXMM_UTILITIES.get_user_id;
        g_receipt_applications_rec.last_update_login := XXMM_UTILITIES.get_user_login;
        g_receipt_applications_rec.creation_date := g_srv_sysdate;
        g_receipt_applications_rec.created_by := XXMM_UTILITIES.get_user_id;
        g_receipt_applications_rec.attribute_category := NULL;
        g_receipt_applications_rec.attribute1 := NULL;
        g_receipt_applications_rec.attribute2 := NULL;
        g_receipt_applications_rec.attribute3 := NULL;
        g_receipt_applications_rec.attribute4 := NULL;
        g_receipt_applications_rec.attribute5 := NULL;
        g_receipt_applications_rec.attribute6 := NULL;
        g_receipt_applications_rec.attribute7 := NULL;
        g_receipt_applications_rec.attribute8 := NULL;
        g_receipt_applications_rec.attribute9 := NULL;
        g_receipt_applications_rec.attribute10 := NULL;
        g_receipt_applications_rec.attribute11 := NULL;
        g_receipt_applications_rec.attribute12 := NULL;
        g_receipt_applications_rec.attribute13 := NULL;
        ---
        ---Start Muhammad PL-61920 20-NOV-2013
        ---
        --g_receipt_applications_rec.attribute14                    := null;
        --g_receipt_applications_rec.attribute15                    := null;

        g_receipt_applications_rec.attribute14 := g_imp_account_name;
        g_receipt_applications_rec.attribute15 :=
            g_imp_bank || ' ' || g_imp_branch || ' ' || g_imp_account;

        ---
        ---End Muhammad PL-61920 20-NOV-2013
        ---
        g_receipt_applications_rec.org_id := g_org_id;
        g_receipt_applications_rec.version := 1;
        g_receipt_applications_rec.concurrent_request_id := g_request_id;
        g_receipt_applications_rec.complete_flag := 'N';
        g_receipt_applications_rec.fun_currency := x_imp_trx_cur;
        g_receipt_applications_rec.exch_rate := NULL;
        g_receipt_applications_rec.fun_application_amount := x_applied_amount;

        g_receipt_applications_rec.funding_method := x_funding_method;

        log_message (
               'Inserting record in Xxmm_Receipt_Applications table '
            || l_program_unit);



        IF NOT xxmm_receipt_applications_h.insert_row (
                   g_receipt_applications_rec,
                   g_err_code,
                   g_err_msg,
                   g_application_id)
        THEN
            log_error (g_err_msg, xxmm_constants.msg_type_error);
            xxmm_utilities.put_line_log (g_err_msg);
            raise_application_error (-20008, g_err_msg || ' ' || SQLERRM);
        END IF;


        g_receipt_applications_rec.application_id := g_application_id;

        log_message ('Ending << ' || l_program_unit);
    EXCEPTION
        WHEN OTHERS
        THEN
            g_err_msg :=
                   'OTHER EXCEPTION, Unable to insert record in XXMM_RECEIPT_APPLICATIONS table, the error text is :'
                || SQLERRM;
            log_error (g_err_msg, xxmm_constants.msg_type_error);
            xxmm_utilities.put_line_log (g_err_msg);
            raise_application_error (-20009, g_err_msg || ' ' || SQLERRM);
    END insert_receipt_applications;



    ----------------------------------------------------------------------------------
    --
    -- proecdure:     insert_receipts
    --
    -- inputs:
    --
    --
    --
    --
    --
    -- output:        none
    --
    -- this procedure inserts record into xxmm_receipts table for
    -- each each receipt created.
    --
    --+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    --
    --  modified by        date         description
    --
    -----------------------------------------------------------------------------------
    PROCEDURE insert_receipts (
        x_impound_trx_id            IN xxmm_receipt_applications.impound_trx_id%TYPE,
        x_control_id                IN xxmm_receipts.control_id%TYPE,
        x_receipt_date              IN xxmm_receipts.receipt_date%TYPE,
        --
        x_impound_due_date          IN xxmm_receipts.maturity_date%TYPE,
        --
        x_receipt_currency          IN xxmm_receipts.receipt_currency%TYPE,
        x_imp_trx_currency          IN xxmm_cts_impound_trx.impound_trx_currency%TYPE,
        x_receipt_amount            IN xxmm_receipts.receipt_amount%TYPE,
        x_funding_method            IN xxmm_receipt_batches.funding_method%TYPE,
        x_country                   IN xxmm_receipt_batches.country%TYPE,
        x_input_source              IN xxmm_receipts.input_source%TYPE,
        x_spread_tier               IN xxmm_receipts.spread_tier%TYPE,
        x_spread_rate               IN xxmm_receipts.spread_rate%TYPE,
        x_insert_appl               IN BOOLEAN,
        x_bank_acc_id_inten_stlmt   IN xxmm_bank_accounts.bank_account_id%TYPE)
    IS
        l_program_unit     VARCHAR2 (100)
                               := g_package_name || '.insert_Receipts';
        l_stmt_str         VARCHAR2 (100) := NULL;
        --l_seq_name          varchar2(30)  := null;
        l_receipt_number   NUMBER DEFAULT NULL;
    BEGIN
        log_message ('Starting >> ' || l_program_unit);


        l_stmt_str := 'SELECT ' || g_sequence_name || '.NEXTVAL FROM DUAL';

        log_message (
            'Getting receipt number, SQL statement is : ' || l_stmt_str);


        BEGIN
            EXECUTE IMMEDIATE l_stmt_str INTO l_receipt_number;
        END;

        g_receipt_number := TO_CHAR (l_receipt_number);

        log_message (
            'The receipt number is : ' || TO_CHAR (g_receipt_number));
        log_file ('The receipt number is : ' || TO_CHAR (g_receipt_number));

        g_receipts_rec.receipt_batch_id := g_batch_id;
        g_receipts_rec.receipt_id := NULL;
        g_receipts_rec.control_id := x_control_id;
        g_receipts_rec.receipt_type := xxmm_constants.gc_receipt_type_auto;
        g_receipts_rec.receipt_number := g_receipt_number;
        g_receipts_rec.receipt_date := TRUNC (g_clt_sysdate); --x_receipt_date;

        -->> FP 64978  || Arun Bacha || JULY 2016 || For NL and FR the value date passed in the file is being used as the maturity date
        IF     g_intraday_flag = 'Y'
           AND xxmm_lookup_utilities.lookup_code_exist (
                   NULL,
                   xxmm_constants.gc_err_code_lt,
                   g_itd_rct)
        THEN
            g_receipts_rec.maturity_date := TRUNC (x_impound_due_date);
            g_receipts_rec.receipt_due_date := TRUNC (x_impound_due_date);
        ELSE
            --<< FP 64978  || Arun Bacha || JULY 2016 || For NL and FR the value date passed in the file is being used as the maturity date
            IF TRUNC (x_impound_due_date) < TRUNC (g_clt_sysdate)
            THEN
                g_receipts_rec.maturity_date := TRUNC (g_clt_sysdate);
                g_receipts_rec.receipt_due_date := TRUNC (g_clt_sysdate);
            ELSE
                g_receipts_rec.maturity_date := TRUNC (x_impound_due_date);
                g_receipts_rec.receipt_due_date := TRUNC (x_impound_due_date);
            END IF;


            --
            -- Start, This change was missing and it was added by Naeem on 14--NOV-2014
            --
            -->> Karen Jiang |PWR A-10-1009
            IF g_intraday_flag = 'Y'
            THEN
                g_receipts_rec.maturity_date := TRUNC (g_clt_sysdate);
                g_receipts_rec.receipt_due_date := TRUNC (g_clt_sysdate);
            END IF;
        --<< Karen Jiang |PWR A-10-1009
        --
        -- End,  This change was missing and it was added by Naeem on 14--NOV-2014
        --
        --<< FP 64978  || Arun Bacha || JULY 2016 || For NL and FR the value date passed in the file is being used as the maturity date
        END IF;

        --<< FP 64978  || Arun Bacha || JULY 2016 || For NL and FR the value date passed in the file is being used as the maturity date
        g_receipts_rec.receipt_currency := x_receipt_currency;
        g_receipts_rec.fun_currency := x_imp_trx_currency;
        g_receipts_rec.receipt_amount := x_receipt_amount;
        g_receipts_rec.applied_amount := x_receipt_amount;
        g_receipts_rec.fun_receipt_amount := x_receipt_amount;
        g_receipts_rec.write_off_amount := 0;

        --g_receipts_rec.country                        := null; --x_country;
        g_receipts_rec.input_source := x_input_source;

        --if      g_consolidate_impounds

        g_receipts_rec.status := xxmm_constants.gc_receipt_status_created;


        IF     NVL (x_receipt_amount, 0) = 0
           AND x_funding_method <> xxmm_constants.gc_usrw_funding_method
        THEN
            g_receipts_rec.status :=
                xxmm_constants.gc_receipt_status_non_remit;
        END IF;

        --kj/June 2014/ PWR 10-1009
        IF x_control_id IS NULL
        THEN
            g_receipts_rec.application_status :=
                xxmm_constants.gc_rec_app_status_unidentified;
        ELSIF x_impound_trx_id IS NULL AND x_control_id IS NOT NULL
        THEN
            g_receipts_rec.application_status :=
                xxmm_constants.gc_rec_app_status_unapply;
        ELSE
            --kj/June 2014/ PWR 10-1009
            g_receipts_rec.application_status :=
                xxmm_constants.gc_rec_app_status_apply;
        END IF;

        IF x_funding_method = xxmm_constants.gc_usrw_funding_method
        THEN
            g_receipts_rec.receipt_amount := 0;
            g_receipts_rec.status := xxmm_constants.gc_receipt_status_created;

            --
            -- Start, Change for FP issue 64150 to create zero dollar USRW receipts by Naeem on 08-JUN-2015
            --

            IF     NVL (g_receipts_rec.receipt_amount, 0) = 0
               AND NVL (g_receipts_rec.fun_receipt_amount, 0) = 0
            THEN
                g_receipts_rec.status :=
                    xxmm_constants.gc_receipt_status_non_remit;
            END IF;
        --
        --  End, Change for FP issue 64150 to create zero dollar USRW receipts by Naeem on 08-JUN-2015
        --


        ELSIF x_funding_method = xxmm_constants.gc_uscp_fund_meth
        THEN
            g_receipts_rec.applied_amount := 0;
            g_receipts_rec.fun_receipt_amount := 0;
            g_receipts_rec.status := xxmm_constants.gc_receipt_status_created;
        END IF;

        --log_file    ('The intended stlmt bank acct id is : '||to_char(x_bank_acc_id_inten_stlmt));

        IF x_funding_method IN
               (xxmm_constants.gc_credit_push_fund_meth,
                -->> Sharath Yaski | Project Moose | 29-OCT-2019
                -- Bill Pay changes
                xxmm_constants.gc_bill_pay_fund_meth,
                --<< Sharath Yaski | Project Moose | 29-OCT-2019
                xxmm_constants.gc_nsfr_fund_meth,
                xxmm_constants.gc_uscp_fund_meth)
        THEN
            g_receipts_rec.bank_acc_id_final_stlmt :=
                x_bank_acc_id_inten_stlmt;
        ELSE
            g_receipts_rec.bank_acc_id_final_stlmt := NULL;
        END IF;

        --
        -- save bank account name, bank, branch and account, swift bic details instead of id
        --
        --g_receipts_rec.bank_account_id_funding        := g_bank_acc_id_funding;

        --Project G'Day Start Muhammad 27-APR-2016

        --      g_receipts_rec.control_account_name := g_control_account_name;
        --      g_receipts_rec.control_bank := g_control_bank;
        --      g_receipts_rec.control_branch := g_control_branch;
        --      g_receipts_rec.control_account := g_control_account;
        --      g_receipts_rec.control_swift_bic := g_control_swift_bic;

        -->> US US812543 || 09-SEP-2017 || Arun bacha || Populating the Control ORG Account information into the Control Account, Bank, Branch.
        IF (    g_intraday_flag = 'Y'
            AND (x_funding_method IN
                     (xxmm_constants.gc_credit_push_fund_meth,
                      xxmm_constants.gc_nsfr_fund_meth)))
        THEN
            IF g_check_sort_code = 'Y' AND LENGTH (g_control_account) > 10 -- If the Length of Originator Account is greater than 10 for UK, then the first 6 characters are Sort Code
            THEN
                -->> FP66338 | Sharath Yaski | 23-FEB-2018 | User is unable to apply CP receipt
                -- Adding TRIM Function to trim all the leading and trailing spaces
                g_receipts_rec.control_account_name :=
                    TRIM (
                           SUBSTR (g_control_account, 1, 6)
                        || ' '
                        || SUBSTR (g_control_account, 1, 6)
                        || ' '
                        || SUBSTR (g_control_account, 7));
                g_receipts_rec.control_bank :=
                    TRIM (SUBSTR (g_control_account, 1, 6));
                g_receipts_rec.control_branch :=
                    TRIM (SUBSTR (g_control_account, 1, 6));
                g_receipts_rec.control_account :=
                    TRIM (SUBSTR (g_control_account, 7));
            ELSE
                g_receipts_rec.control_account_name :=
                    TRIM (
                           g_control_bank
                        || ' '
                        || g_control_branch
                        || ' '
                        || g_control_account);
                g_receipts_rec.control_bank := TRIM (g_control_bank);
                g_receipts_rec.control_branch := TRIM (g_control_branch);
                g_receipts_rec.control_account := TRIM (g_control_account);
                g_receipts_rec.control_swift_bic :=
                    TRIM (g_control_swift_bic);
            --<< FP66338 | Sharath Yaski | 23-FEB-2018 | User is unable to apply CP receipt
            END IF;
        -->> US US812543 || 09-SEP-2017 || Arun bacha || Populating the Control ORG Account information into the Control Account, Bank, Branch.
        ELSE
            g_receipts_rec.control_account_name := g_imp_account_name;
            g_receipts_rec.control_bank := g_imp_bank;
            g_receipts_rec.control_branch := g_imp_branch;
            g_receipts_rec.control_account := g_imp_account;
            --      g_receipts_rec.control_swift_bic := g_imp_swift_bic;
            --
            -- Naeem Start 10-JAN-2017, FP issue 65412
            --

            g_receipts_rec.control_swift_bic := g_imp_swift_bic;
        END IF;

        --<< US US812543 || 09-SEP-2017 || Arun bacha || Populating the Control ORG Account information into the Control Account, Bank, Branch.
        --
        -- Naeem  End  10-JAN-2017, FP issue 65412
        --

        --Project G'Day End Muhammad 27-APR-2016

        --g_receipts_rec.bank_acc_id_final_stlmt        := null;

        g_receipts_rec.reversal_date := NULL;
        g_receipts_rec.reversal_reason := NULL;
        g_receipts_rec.reversed_by := NULL;
        g_receipts_rec.comments := NULL;

        g_receipts_rec.bank_statement_line_id := NULL;
        g_receipts_rec.outbound_file_id := NULL;
        g_receipts_rec.spread_tier := x_spread_tier;
        --g_receipts_rec.spread_amount                  := null;
        g_receipts_rec.fun_spread_amount := 0;
        g_receipts_rec.spread_rate := x_spread_rate;

        --
        g_receipts_rec.last_update_date := g_srv_sysdate;
        g_receipts_rec.last_updated_by := XXMM_UTILITIES.get_user_id;
        g_receipts_rec.last_update_login := XXMM_UTILITIES.get_user_login;
        g_receipts_rec.creation_date := g_srv_sysdate;
        g_receipts_rec.created_by := XXMM_UTILITIES.get_user_id;
        g_receipts_rec.attribute_category := NULL;
        g_receipts_rec.attribute1 := NULL;
        g_receipts_rec.attribute2 := NULL;
        g_receipts_rec.attribute3 := NULL;
        g_receipts_rec.attribute4 := NULL;
        g_receipts_rec.attribute5 := NULL;
        g_receipts_rec.attribute6 := NULL;
        g_receipts_rec.attribute7 := NULL;
        g_receipts_rec.attribute8 := NULL;
        g_receipts_rec.attribute9 := NULL;
        g_receipts_rec.attribute10 := NULL;
        g_receipts_rec.attribute11 := NULL;
        g_receipts_rec.attribute12 := NULL;
        g_receipts_rec.attribute13 := NULL;
        g_receipts_rec.attribute14 := NULL;
        g_receipts_rec.attribute15 := NULL;
        g_receipts_rec.org_id := g_org_id;
        g_receipts_rec.version := 1;
        g_receipts_rec.concurrent_request_id := g_request_id;
        g_receipts_rec.accounted_flag := 'N';

        g_receipts_rec.recon_status :=
            xxmm_constants.gc_rct_recon_stat_unreconciled;
        g_receipts_rec.write_off_refund_reason := NULL;
        g_receipts_rec.recon_amount := 0;
        g_receipts_rec.receipt_category :=
            xxmm_constants.gc_receipt_catg_receipt;
        g_receipts_rec.file_group_number := NULL;
        g_receipts_rec.file_group_sequence := NULL;
        g_receipts_rec.reversal_rate := NULL;
        g_receipts_rec.reversal_gain_loss_amt := 0;
        g_receipts_rec.approval_submitted_by := NULL;



        log_message (
            'Inserting record in Xxmm_Receipts table ' || l_program_unit);


        IF NOT xxmm_receipts_h.insert_row (g_receipts_rec,
                                           g_err_code,
                                           g_err_msg,
                                           g_receipt_id)
        THEN
            log_error (g_err_msg, xxmm_constants.msg_type_error);
            xxmm_utilities.put_line_log (g_err_msg);
            raise_application_error (-20010, g_err_msg || ' ' || SQLERRM);
        END IF;



        g_receipts_rec.receipt_id := g_receipt_id;

        IF x_insert_appl
        THEN
            insert_receipt_applications (x_impound_trx_id,
                                         x_receipt_amount,
                                         x_funding_method,
                                         x_imp_trx_currency);
        END IF;

        log_message ('Ending << ' || l_program_unit);
    EXCEPTION
	WHEN INVALID_NUMBER THEN --Added for FP70355
	log_message ('Impound Bank should only contain numbers. Program found some alphabets in impound bank for USRW funding method.');
        WHEN OTHERS
        THEN
            g_err_msg :=
                   'OTHER EXCEPTION, Unable to insert record in XXMM_RECEIPTS table, the error text is :'
                || SQLERRM;
            log_error (g_err_msg, xxmm_constants.msg_type_error);
            xxmm_utilities.put_line_log (g_err_msg);
            raise_application_error (-20011, g_err_msg || ' ' || SQLERRM);
    END insert_receipts;



    FUNCTION validate_parameter
        RETURN BOOLEAN
    IS
        l_valid          BOOLEAN := TRUE;
        l_program_unit   VARCHAR2 (100)
                             := g_package_name || '.VALIDATE_PARAMETER';
        l_msg            VARCHAR2 (2000) DEFAULT NULL;
    BEGIN
        log_message ('Starting >> ' || l_program_unit);


        --
        l_msg :=
               'Start Validating Parameters Server Timezone ..... '
            || TO_CHAR (g_srv_sysdate, 'DD-MON-YYYY HH24:Mi:ss');

        log_message (l_msg);


        --

        l_msg := 'Input Source parameter value is ' || g_input_source;

        log_message (l_msg);



        l_msg := 'Funding Method parameter value is ' || g_funding_method;

        log_message (l_msg);


        IF     g_funding_method IS NOT NULL
           AND NVL (g_funding_method, 'XX') NOT IN
                   (xxmm_constants.gc_usrw_funding_method,
                    xxmm_constants.gc_credit_push_fund_meth,
                    -->> Sharath Yaski | Project Moose | 29-OCT-2019
                    -- Bill Pay changes
                    xxmm_constants.gc_bill_pay_fund_meth,
                    --<< Sharath Yaski | Project Moose | 29-OCT-2019
                    xxmm_constants.gc_debit_pull_fund_meth,
                    xxmm_constants.gc_nsfr_fund_meth,
                    xxmm_constants.gc_uscp_fund_meth)
        THEN
            l_valid := FALSE;
            l_msg :=
                   'Funding Method parameter value "'
                || g_funding_method
                || '" is not valid.';
            log_message (l_msg);

            log_error (l_msg, xxmm_constants.msg_type_error);
        END IF;

        l_msg :=
               'Remit Presentation Thru Date parameter value is '
            || TO_CHAR (g_remit_thru_date, 'DD-MON-YYYY');
        log_message (l_msg);



        IF g_remit_thru_date IS NULL
        THEN
            l_valid := FALSE;
            l_msg := 'Error!! Remittance thru date is mandatory parameter.';
            log_message (l_msg);

            log_error (l_msg, xxmm_constants.msg_type_error);
        ELSIF TRUNC (g_remit_thru_date) < TRUNC (g_clt_sysdate)
        THEN
            l_valid := FALSE;
            l_msg :=
                'Error!! The Remit Presentation Through Date should equal system date or greater in Clien Timezone.';
            log_message (l_msg);

            log_error (l_msg, xxmm_constants.msg_type_error);
        END IF;



        l_msg :=
               'Intended Settlement Bank a/c name parameter value is '
            || g_bank_acc_inten_stlmt;
        log_message (l_msg);



        l_msg :=
               'Impound Transaction Number From parameter value is '
            || g_impound_number_from;
        log_message (l_msg);


        l_msg :=
               'Impound Transaction Number To parameter value is '
            || g_impound_number_to;
        log_message (l_msg);


        IF     g_impound_number_from IS NOT NULL
           AND g_impound_number_to IS NOT NULL
           AND NVL (g_impound_number_from, 0) > NVL (g_impound_number_to, 0)
        THEN
            l_valid := FALSE;
            l_msg :=
                   'Error!! Invalid From and To Impound transaction number range, From number parameter value "'
                || g_impound_number_from
                || '" and To number parameter value is "'
                || g_impound_number_to
                || '".';
            log_message (l_msg);

            log_error (l_msg, xxmm_constants.msg_type_error);
        END IF;


        l_msg := 'Control Number parameter value is ' || g_control;
        log_message (l_msg);



        --
        l_msg :=
               'End Validating Parameters......... '
            || TO_CHAR (g_srv_sysdate, 'DD-MON-YYYY HH24:Mi:ss');
        log_message (l_msg);


        --
        log_message ('Ending << ' || l_program_unit);


        --

        RETURN (l_valid);
    EXCEPTION
        WHEN OTHERS
        THEN
            l_msg := 'OTHER EXCEPTION, the error text is : ' || SQLERRM;
            log_message (l_msg);

            xxmm_utilities.put_line_log (l_msg);

            raise_application_error (-20012, l_msg);
    END validate_parameter;

    FUNCTION get_timezone_id (
        p_timezone_code   IN xxmm_timezone.timezone_code%TYPE)
        RETURN NUMBER
    IS
        l_tmz_id   NUMBER := NULL;
    BEGIN
        SELECT timezone_id
          INTO l_tmz_id
          FROM xxmm_timezone
         WHERE timezone_code = p_timezone_code;

        RETURN (l_tmz_id);
    EXCEPTION
        WHEN OTHERS
        THEN
            g_err_msg :=
                   'OTHER EXCEPTION while converyting timezone code to id, the error text is : '
                || SQLERRM;
            log_message (g_err_msg);
            log_file (g_err_msg);
            xxmm_utilities.put_line_log (g_err_msg);

            raise_application_error (-20032, g_err_msg);
    END;


    PROCEDURE get_fm_attributes (
        x_funding_method   IN xxmm_receipt_batches.funding_method%TYPE)
    IS
        CURSOR c_lookup (
            p_funding_method   IN xxmm_receipt_batches.funding_method%TYPE)
        IS
            SELECT meaning fm_descr,
                   attribute2 short_name,
                   attribute3 consolidate_impounds,
                   attribute4 cons_by_impound_type,
                   --attribute5 cons_negative_amount,
                   attribute6 create_empty_batches,
                   attribute7 sequence_name,
                   attribute8 seq_max_value,
                   attribute9 create_auto_receipts
              FROM xxmm_lookups_v
             WHERE     lookup_type = xxmm_constants.gc_funding_method_lt
                   AND lookup_code = p_funding_method
                   AND enabled_flag = 'Y'
                   AND TRUNC (SYSDATE) BETWEEN TRUNC (start_date_active)
                                           AND TRUNC (
                                                   NVL (end_date_active,
                                                        SYSDATE));

        r_lookup         c_lookup%ROWTYPE;


        l_input_source   xxmm_receipts.input_source%TYPE DEFAULT NULL;
        l_program_unit   VARCHAR2 (100)
                             := g_package_name || '.GET_FM_ATTRIBUTES';
    BEGIN
        log_message ('Starting >> ' || l_program_unit);



        IF c_lookup%ISOPEN
        THEN
            CLOSE c_lookup;
        END IF;

        OPEN c_lookup (x_funding_method                                    --,
                                       --x_input_source
                                       );

        FETCH c_lookup INTO r_lookup;

        CLOSE c_lookup;

        g_fm_descr := r_lookup.fm_descr;
        g_fm_short_name := r_lookup.short_name;

        --log_file    ('fm short name is  '||g_fm_short_name);


        IF NVL (r_lookup.consolidate_impounds, 'N') = 'Y'
        THEN
            g_consolidate_impounds := TRUE;
        ELSE
            g_consolidate_impounds := FALSE;
        END IF;


        IF NVL (r_lookup.cons_by_impound_type, 'N') = 'Y'
        THEN
            g_cons_by_impound_type := TRUE;
        ELSE
            g_cons_by_impound_type := FALSE;
        END IF;


        --if      nvl(r_lookup.cons_negative_amount,'n')   =   'Y'
        --then

        --        g_cons_negative_amount  :=  true;
        --else
        g_cons_negative_amount := FALSE;

        --end if;

        IF NVL (r_lookup.create_empty_batches, 'N') = 'Y'
        THEN
            g_create_empty_batches := TRUE;
        ELSE
            g_create_empty_batches := FALSE;
        END IF;


        IF NVL (r_lookup.create_auto_receipts, 'N') = 'Y'
        THEN
            g_create_auto_receipts := TRUE;
        ELSE
            g_create_auto_receipts := FALSE;
        END IF;


        g_sequence_name := r_lookup.sequence_name;
        g_seq_max_value := r_lookup.seq_max_value;


        log_message ('Ending >> ' || l_program_unit);
    EXCEPTION
        WHEN OTHERS
        THEN
            g_err_msg := 'OTHER EXCEPTION, the error text is : ' || SQLERRM;
            log_message (g_err_msg);

            xxmm_utilities.put_line_log (g_err_msg);

            raise_application_error (-20014, g_err_msg);
    END get_fm_attributes;

    FUNCTION valid_control_number (
        p_control_number   IN xxmm_customer_controls.control_number%TYPE)
        RETURN BOOLEAN
    IS
        CURSOR c_control (x_control_number IN VARCHAR2)
        IS
            SELECT COUNT (*)
              FROM xxmm_customer_controls
             WHERE control_number = x_control_number;

        l_cnt   NUMBER := 0;
    BEGIN
        IF c_control%ISOPEN
        THEN
            CLOSE c_control;
        END IF;

        OPEN c_control (p_control_number);

        FETCH c_control INTO l_cnt;

        CLOSE c_control;

        IF NVL (l_cnt, 0) > 0
        THEN
            RETURN (TRUE);
        ELSE
            RETURN (FALSE);
        END IF;
    END valid_control_number;

    /*
    ************************************************************************
    *            COPYRIGHT (c) 2016 ADP Canada, Financial Systems          *
    ************************************************************************
    *                                                                      *
    * Module Name  : SET_FUNDING_METHOD                                    *
    * Module Type  : PL/SQL Procedure                                      *
    * Parameters   : P_BANK_ACCOUNT_ID                                     *
    * Purpose      : Sets the varilable g_funing method to the appropriate *
    *                funding method depending upon the bank account ID     *
    ************************************************************************
    *                            BIBLIOGRAPHY                              *
    ************************************************************************
    *                                                                      *
    ************************************************************************
    *   Date       |      Author          |  SCR    | Remarks              *
    ************************************************************************
    * 18/07/2016    Arun Bacha             R Q4 PWR EU 15-600              *
    ************************************************************************
    */
    PROCEDURE set_funding_method (
        p_bank_account_id   IN xxmm_bank_accounts.bank_account_id%TYPE)
    IS
        l_funding_method              xxmm_lookups.attribute3%TYPE;
        lc_current_program   CONSTANT VARCHAR2 (50)
            := gc_package_name || 'SET_FUNDING_METHOD' ;
    BEGIN
        log_message (lc_current_program || xxmm_constants.gc_enter_prog, 3);
        log_message ('p_bank_account_id: ' || p_bank_account_id, 3);

        SELECT UPPER (NVL (xl.attribute3, 'CREDIT_PUSH'))
          INTO l_funding_method
          FROM xxmm_bank_accounts xba, xxmm_lookups_v xl
         WHERE     xba.bank_account_id = p_bank_account_id
               AND xl.lookup_code = xba.account_number
               AND xl.lookup_type = xxmm_constants.gc_if_db_bank_accgt_lt;

        log_message ('Bank Account Type : ' || l_funding_method, 3);

        IF l_funding_method = xxmm_constants.gc_cp_bank_account_type
        THEN
            g_funding_method := xxmm_constants.gc_credit_push_fund_meth;
        ELSIF l_funding_method = xxmm_constants.gc_bank_trx_type_nsf
        THEN
            g_funding_method := xxmm_constants.gc_nsfr_fund_meth;
        END IF;

        log_message (lc_current_program || xxmm_constants.gc_exit_prog, 3);
    EXCEPTION
        WHEN OTHERS
        THEN
            log_message (
                   'Error occured while checking the bank account type for bank account ID :'
                || p_bank_account_id,
                1);
            g_err_msg := SUBSTR (SQLERRM, 1, 200);
            log_message (g_err_msg, 1);
            log_message ('Setting the funding method to credit push', 1);
            g_funding_method := xxmm_constants.gc_credit_push_fund_meth;
            log_message (lc_current_program || xxmm_constants.gc_exit_prog,
                         3);
    END set_funding_method;

    /*
    ************************************************************************
    *            COPYRIGHT (c) 2010 ADP Canada, Financial Systems          *
    ************************************************************************
    *                                                                      *
    * Module Name  : GET_ORG_UNIQUE_CONTROL_ID                             *
    * Module Type  : PL/SQL Procedure                                      *
    * Parameters   : P_ORG_ACCOUNT, P_CONTROL_ID                           *
    * Purpose      : Tries to get a unique control with the org passed     *
    *                 in the file                                          *
    ************************************************************************
    *                            BIBLIOGRAPHY                              *
    ************************************************************************
    *                                                                      *
    ************************************************************************
    *   Date       |      Author          |  SCR    | Remarks              *
    ************************************************************************
    * 01/03/2016    Arun Bacha             R Q3 PWR EU 15-600                                                        *
    ************************************************************************
    */

    FUNCTION get_org_unique_control_id (
        p_org_account   IN VARCHAR2,
        p_control_id    IN xxmm_customer_controls.control_id%TYPE DEFAULT NULL)
        RETURN NUMBER
    IS
        l_control_id   NUMBER;
    BEGIN
        log_message ('XXMM -->> get_org_unique_control_id', 1);
        log_message ('P_ORG_ACCOUNT' || p_org_account, 1);

        log_message ('P_CONTROL_ID' || p_control_id, 1);

        SELECT xbau.entity_id
          INTO l_control_id
          FROM xxmm_bank_accounts xba, xxmm_bank_account_uses xbau
         WHERE     (   xba.account_number = p_org_account --<<START  George Felian 28-JUN-2016 PWR EU-15-600 US477483 Start
                    OR DECODE (
                           g_check_sort_code,
                           'Y', REPLACE (
                                    SUBSTR (xba.account_name,
                                            INSTR (xba.account_name, ' ', 1)),
                                    ' ',
                                    ''),
                           '@@@@') = p_org_account) -->><END  George Felian 28-JUN-2016 PWR EU-15-600 US477483
               AND xbau.entity_id = NVL (p_control_id, xbau.entity_id)
               AND xbau.account_usage_type =
                       xxmm_constants.gc_org_acc_usage_type
               AND xbau.entity_type = xxmm_constants.gc_entity_type
               AND xba.bank_account_id = xbau.bank_account_id;

        RETURN l_control_id;
        log_message ('L_CONTROL_ID' || l_control_id, 1);
        log_message ('XXMM <<-- get_org_unique_control_id', 1);
    EXCEPTION
        WHEN TOO_MANY_ROWS
        THEN
            log_message (
                'More than one control has this same orginator account. Hence returning 0',
                1);
                RETURN 0;
--        --->>> Start FP-66895 07-OCT-2019 Muhammad -- to filter Impounds for that particulart Originator Account.
--            --RETURN 0;
--                SELECT xbau.entity_id
--                  INTO l_control_id
--                  FROM xxmm_bank_accounts xba, xxmm_bank_account_uses xbau
--                 WHERE     (   xba.account_number = p_org_account --<<START  George Felian 28-JUN-2016 PWR EU-15-600 US477483 Start
--                            OR DECODE (
--                                   g_check_sort_code,
--                                   'Y', REPLACE (
--                                            SUBSTR (xba.account_name,
--                                                    INSTR (xba.account_name, ' ', 1)),
--                                            ' ',
--                                            ''),
--                                   '@@@@') = p_org_account) -->><END  George Felian 28-JUN-2016 PWR EU-15-600 US477483
--                   AND xbau.entity_id = NVL (p_control_id, xbau.entity_id)
--                   AND xbau.account_usage_type =
--                            xxmm_constants.gc_org_acc_usage_type
--                   AND xbau.entity_type = xxmm_constants.gc_entity_type
--                   AND xba.bank_account_id = xbau.bank_account_id
--                   AND rownum=1;
--
--                   RETURN l_control_id;
--        --->>> End FP-66895 07-OCT-2019 Muhammad -- to filter Impounds for that particulart Originator Account.
        WHEN NO_DATA_FOUND
        THEN
            log_message (
                'No Control has this Originator Account. Hence returning 0',
                1);
            RETURN 0;
        WHEN OTHERS
        THEN
            log_message (
                ' Error occurred  while trying to get the control id. Hence returning 0',
                1);
            --log_message('ERROR IS '||SUBSTR(SQLERRM,1,200),1);
            RETURN 0;
    END get_org_unique_control_id;

    PROCEDURE get_batch_number (
        x_funding_method   IN     xxmm_receipt_batches.funding_method%TYPE,
        x_fm_short_name    IN     VARCHAR2,
        x_batch_date       IN     xxmm_receipt_batches.receipt_batch_date%TYPE,
        x_batch_number        OUT xxmm_receipt_batches.receipt_batch_number%TYPE)
    IS
        CURSOR c_batch (
            p_funding_method   IN xxmm_receipt_batches.funding_method%TYPE,
            p_fm_short_name    IN VARCHAR2,
            p_batch_date       IN xxmm_receipt_batches.receipt_batch_date%TYPE,
            p_batch_prefix     IN VARCHAR2)
        IS                                                              -- PWC
            --
            SELECT receipt_batch_id,
                   status,
                   receipt_batch_number,
                   TO_NUMBER (
                       SUBSTR (
                           LTRIM (RTRIM (receipt_batch_number)),
                             INSTR (LTRIM (RTRIM (receipt_batch_number)),
                                    ' ',
                                    -1)
                           + 1))
                       batch_num
              FROM xxmm_receipt_batches
             WHERE     funding_method = p_funding_method
                   -->> Project G'day | Ranjitha |  11-APR-2016 | compare date with OU TZ date
                   --                AND TRUNC (xxmm_timezones.get_ou_date ( receipt_batch_date,g_org_id)) = TRUNC (p_batch_date)
                   AND receipt_batch_date = p_batch_date
                   --<< Project G'day | Ranjitha | 11-APR-2016| compare date with OU TZ date
                   AND receipt_batch_number LIKE
                           p_batch_prefix || ' ' || p_fm_short_name || '%'
                   --and receipt_batch_number in ( select max (receipt_batch_number)
                   AND receipt_batch_id IN
                           (SELECT MAX (receipt_batch_id)
                              FROM xxmm_receipt_batches
                             WHERE     funding_method = p_funding_method
                                   -->> Project G'day | Ranjitha | 11-APR-2016| compare date with OU TZ date
                                   --                                     AND TRUNC (xxmm_timezones.get_ou_date ( receipt_batch_date,g_org_id)) =
                                   AND receipt_batch_date = --<< Project G'day | Ranjitha | 11-APR-2016| compare date with OU TZ date
                  --                                      TRUNC (p_batch_date)
                                        p_batch_date
                                   AND receipt_batch_number LIKE
                                              p_batch_prefix
                                           || ' '
                                           || p_fm_short_name
                                           || '%')                          --
                                                  ;



        r_batch          c_batch%ROWTYPE;



        l_batch_number   xxmm_receipt_batches.receipt_batch_number%TYPE
                             DEFAULT NULL;
        l_text           VARCHAR2 (30) DEFAULT NULL;
        l_num            NUMBER DEFAULT 0;
        l_program_unit   VARCHAR2 (100)
                             := g_package_name || '.GET_BATCH_NUMBER';
        l_batch_prefix   VARCHAR2 (7);                                  -- PWC
    BEGIN
        log_message ('Starting >> ' || l_program_unit);


        log_message ('x_funding_method = ' || x_funding_method);
        log_message ('x_fm_short_name = ' || x_fm_short_name);
        log_message ('x_batch_date = ' || x_batch_date);

        -- PWC Jul 6
        IF x_funding_method = xxmm_constants.gc_adjustment_fund_meth
        THEN
            l_batch_prefix := g_batch_prefix_cm;
        -->> Karen Jiang |PWR A-10-1009
        ELSIF g_intraday_flag = 'Y'
        THEN
            l_batch_prefix := g_batch_prefix_int;
        --<< Karen Jiang |PWR A-10-1009
        ELSE
            l_batch_prefix := g_batch_prefix_rct;
        END IF;


        log_message ('l_batch_prefix = ' || l_batch_prefix);

        IF c_batch%ISOPEN
        THEN
            CLOSE c_batch;
        END IF;

        OPEN c_batch (x_funding_method,
                      x_fm_short_name,
                      x_batch_date, --xxmm_timezones.get_ou_date(x_batch_date),  don't need because we already converting receipt_batch_date to client date.
                      l_batch_prefix);                                  -- PWC

        FETCH c_batch INTO r_batch;

        CLOSE c_batch;

        l_text := r_batch.batch_num;

        log_file ('l_text  = ' || l_text);


        BEGIN
            IF x_funding_method <> xxmm_constants.gc_adjustment_fund_meth
            THEN
                l_num := NVL (TO_NUMBER (l_text), 0) + 1;
            ELSE
                l_num := NVL (TO_NUMBER (l_text), 0);

                IF NVL (l_num, 0) = 0
                THEN
                    l_num := 1;
                ELSE
                    IF r_batch.status <>
                           xxmm_constants.gc_rec_batch_status_created
                    THEN
                        l_num := NVL (l_num, 0) + 1;
                    END IF;
                END IF;
            END IF;
        --   xxmm_utilities.put_line_log ( 'new batch number is l_num '||to_char(l_num) );


        EXCEPTION
            WHEN OTHERS
            THEN
                g_err_msg :=
                       'OTHER EXCEPTION, while getting the next batch number. the error text is : '
                    || SQLERRM;
                log_message (g_err_msg);

                xxmm_utilities.put_line_log (g_err_msg);

                raise_application_error (-20015, g_err_msg);
        END;


        g_batch_number :=
               l_batch_prefix                             --g_batch_prefix PWC
            || ' '
            || x_fm_short_name
            || ' '
            || TO_CHAR (x_batch_date, 'DD-MON-YYYY')
            || ' '
            || l_num;
        log_file ('g_batch_number  = ' || g_batch_number);


        BEGIN
            SELECT 'Y'
              INTO l_text
              FROM xxmm_receipt_batches
             WHERE receipt_batch_number = g_batch_number;


            IF NVL (l_text, 'N') = 'Y'
            THEN
                g_batch_number :=
                         x_fm_short_name
                      || ' '
                      || TRUNC (x_batch_date)
                      || ' '
                      || l_num
                    + 1;
            END IF;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                NULL;
            WHEN OTHERS
            THEN
                NULL;
        END;

        --xxmm_utilities.put_line_log ( 'batch no. is '||g_batch_number );


        x_batch_number := g_batch_number;

        log_message ('g_batch_number  = ' || g_batch_number);

        log_message ('Ending >> ' || l_program_unit);
    EXCEPTION
        WHEN OTHERS
        THEN
            g_err_msg := 'OTHER EXCEPTION, the error text is : ' || SQLERRM;
            log_message (g_err_msg);

            xxmm_utilities.put_line_log (g_err_msg);

            raise_application_error (-20016, g_err_msg);
    END get_batch_number;



    FUNCTION get_spread_tier_rate (
        x_control_id            IN     xxmm_customer_controls.control_id%TYPE,
        x_control_number        IN     xxmm_customer_controls.control_number%TYPE,
        x_cts_header_id         IN     xxmm_cts_impound_trx.cts_header_id%TYPE,
        x_impound_trx_id        IN     xxmm_cts_impound_trx.impound_trx_id%TYPE,
        x_impound_trx_number    IN     xxmm_cts_impound_trx.impound_trx_number%TYPE,
        x_impound_currency      IN     xxmm_cts_impound_trx.impound_trx_currency%TYPE,
        x_receipt_currency      IN     xxmm_cts_impound_trx.receipt_currency%TYPE,
        x_input_source          IN     xxmm_customer_controls.input_source%TYPE,
        x_bank_acc_id_funding      OUT NUMBER,
        x_spread_tier              OUT VARCHAR2,
        x_spread_rate              OUT VARCHAR2)
        RETURN BOOLEAN
    IS
        CURSOR c_tier (
            p_control_id       IN NUMBER,
            p_impound_trx_id   IN NUMBER)
        IS
            SELECT a.spread_tier,
                   a.bank_account_id,
                   b.impound_trx_currency,
                   b.receipt_currency,
                   b.impound_trx_number,
                   b.IMPOUND_TRX_AMOUNT,
                   (  b.impound_trx_amount
                    - NVL (b.applied_amount, 0)
                    + NVL (b.adjustment_amount, 0)
                    - NVL (b.write_off_amount, 0))
                       impound_balance
              FROM xxmm_control_bank_accounts_v a,
                   xxmm_cts_impound_trx b,
                   xxmm_bank_accounts c,
                   xxmm_bank_branches d
             WHERE     b.impound_trx_id = p_impound_trx_id
                   AND a.entity_type = xxmm_constants.gc_entity_type   --'CTL'
                   AND a.control_id = p_control_id
                   AND a.account_usage_type = b.impound_trx_type
                   AND a.currency = b.receipt_currency
                   AND a.record_type = xxmm_constants.record_type_active --'ACTIVE'
                   AND a.bank_account_id = c.bank_account_id
                   AND c.account_number = b.impound_account
                   AND d.bank_branch_id = c.bank_branch_id
                   AND d.bank_number = b.impound_bank
                   AND d.bank_branch_number = b.impound_branch;

        r_tier           c_tier%ROWTYPE;

        CURSOR c_rate (
            p_spread_tier    IN VARCHAR2,
            p_input_source   IN VARCHAR2)
        IS
            SELECT attribute1 spread_rate
              FROM xxmm_lookups_v
             WHERE     lookup_type = xxmm_constants.gc_spread_tier_lt --'XXMM_USRW_SPREAD_TIERS'
                   AND lookup_code = p_spread_tier
                   AND source_value = p_input_source
                   AND TRUNC (SYSDATE) BETWEEN TRUNC (
                                                   NVL (start_date_active,
                                                        SYSDATE))
                                           AND TRUNC (
                                                   NVL (end_date_active,
                                                        SYSDATE));

        r_rate           c_rate%ROWTYPE;

        l_input_source   VARCHAR2 (30) DEFAULT NULL;
        l_rate_char      VARCHAR2 (40) DEFAULT NULL;
        l_valid          BOOLEAN DEFAULT TRUE;
        l_conc_program   VARCHAR2 (100) DEFAULT NULL;

        l_program_unit   VARCHAR2 (100)
                             := g_package_name || '.GET_SPREAD_TIER_RATE';
    BEGIN
        log_message ('Starting >> ' || l_program_unit);


--
-- Start Naeem RDS Change, modify the below code using new function
--
/*

        BEGIN

            SELECT user_concurrent_program_name
              INTO l_conc_program
              FROM fnd_concurrent_programs_tl
             WHERE concurrent_program_id = g_conc_program_id;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                l_conc_program := NULL;
        END;
*/
        l_conc_program  :=  g_conc_program_id;
--
--  End  Naeem RDS Change,
--

        l_valid := TRUE;

        IF c_tier%ISOPEN
        THEN
            CLOSE c_tier;
        END IF;

        XXMM_UTILITIES.PUT_LINE_LOG(
                           'control id is ' || TO_CHAR (x_control_id));
        XXMM_UTILITIES.PUT_LINE_LOG( 'impound trx id is ' || TO_CHAR (x_impound_trx_id));

        OPEN c_tier (x_control_id, x_impound_trx_id);



        FETCH c_tier INTO r_tier;

        CLOSE c_tier;


        -->>PWR IMM 17-36 USRW Spread Tier, AUG-2019
        --x_spread_tier := r_tier.spread_tier;

        BEGIN
            SELECT lookup_code
              INTO x_spread_tier
              FROM xxmm_lookups_v
             WHERE     lookup_type = xxmm_constants.gc_spread_tier_lt
                   AND ROUND (r_tier.impound_balance, 2) BETWEEN attribute2
                                                                AND NVL (
                                                                        attribute3,
                                                                        ROUND (
                                                                            r_tier.impound_balance,
                                                                            2))
                   AND source_value = x_input_source
                   AND TRUNC (SYSDATE) BETWEEN TRUNC (
                                                   NVL (start_date_active,
                                                        SYSDATE))
                                           AND TRUNC (
                                                   NVL (end_date_active,
                                                        SYSDATE));
        EXCEPTION
            WHEN OTHERS
            THEN
                x_spread_tier := NULL;
        END;

        --<<PWR IMM 17-36 USRW Spread Tier, AUG-2019
        x_bank_acc_id_funding := r_tier.bank_account_id;

        IF x_bank_acc_id_funding IS NULL
        THEN
            xxmm_messages.set_name (xxmm_constants.xxmm_appl_short_name,
                                  g_inv_imp_acc_cur);

            xxmm_messages.set_token ('INPUT_SOURCE',
                                   SUBSTR (xxmm_lookup_utilities.get_translated_code (
                                               NULL,
                                               'XXMM_INPUT_SOURCE',
                                               x_input_source,
                                               'Y'),
                                             INSTR (xxmm_lookup_utilities.get_translated_code (
                                                        NULL,
                                                        'XXMM_INPUT_SOURCE',
                                                        x_input_source,
                                                        'Y'),
                                                    ' ',
                                                    1)
                                           + 1,
                                             INSTR (xxmm_lookup_utilities.get_translated_code (
                                                        NULL,
                                                        'XXMM_INPUT_SOURCE',
                                                        x_input_source,
                                                        'Y'),
                                                    ' ',
                                                    -1)
                                           - (  INSTR (xxmm_lookup_utilities.get_translated_code (
                                                           NULL,
                                                           'XXMM_INPUT_SOURCE',
                                                           x_input_source,
                                                           'Y'),
                                                       ' ',
                                                       1)
                                              + 1)));

            xxmm_messages.set_token ('CONTROL', x_control_id);
            xxmm_messages.set_token ('TRX_CUR', x_impound_currency);
            xxmm_messages.set_token ('REC_CUR', x_receipt_currency);
            xxmm_messages.set_token ('TRX_NUM', x_impound_trx_number);
            g_inv_imp_acc_cur_msg := xxmm_messages.get;
            log_error (g_inv_imp_acc_cur_msg,
                       xxmm_constants.msg_type_warning);
            log_file (g_inv_imp_acc_cur_msg);

            l_valid := FALSE;

            insert_hold_warn (x_cts_header_id,
                              xxmm_constants.gc_hold_entity_type_imp,
                              x_impound_trx_id,
                              g_inv_imp_acc_cur_hold,
                              g_inv_imp_acc_cur_msg,
                              xxmm_constants.gc_hold_type,
                              g_hold_catg_rec);
        END IF;

        log_message ('the spread tier is ' || x_spread_tier);
        XXMM_UTILITIES.PUT_LINE_LOG( 'the spread tier is ' || x_spread_tier);

        IF c_rate%ISOPEN
        THEN
            CLOSE c_rate;
        END IF;

        OPEN c_rate (x_spread_tier, x_input_source);

        FETCH c_rate INTO r_rate;

        CLOSE c_rate;

        l_rate_char := r_rate.spread_rate;

        IF (x_spread_tier IS NULL OR l_rate_char IS NULL)
        THEN
            xxmm_messages.set_name (xxmm_constants.xxmm_appl_short_name,
                                  g_inv_spread_tier);


            xxmm_messages.set_token ('INPUT_SOURCE',
                                   SUBSTR (xxmm_lookup_utilities.get_translated_code (
                                               NULL,
                                               'XXMM_INPUT_SOURCE',
                                               x_input_source,
                                               'Y'),
                                             INSTR (xxmm_lookup_utilities.get_translated_code (
                                                        NULL,
                                                        'XXMM_INPUT_SOURCE',
                                                        x_input_source,
                                                        'Y'),
                                                    ' ',
                                                    1)
                                           + 1,
                                             INSTR (xxmm_lookup_utilities.get_translated_code (
                                                        NULL,
                                                        'XXMM_INPUT_SOURCE',
                                                        x_input_source,
                                                        'Y'),
                                                    ' ',
                                                    -1)
                                           - (  INSTR (xxmm_lookup_utilities.get_translated_code (
                                                           NULL,
                                                           'XXMM_INPUT_SOURCE',
                                                           x_input_source,
                                                           'Y'),
                                                       ' ',
                                                       1)
                                              + 1)));

            --Start Functional Test Issue # 1909

            xxmm_messages.set_token ('CONC_PROGRAM', l_conc_program);
            xxmm_messages.set_token ('BATCH_NUMBER', g_batch_number);
            xxmm_messages.set_token ('CONTROL', x_control_number);
            --        xxmm_messages.set_token   ('CONTROL', x_control_id);

            --End  Functional Test Issue # 1909

            xxmm_messages.set_token ('TIER', x_spread_tier);
            xxmm_messages.set_token ('TRX_NUM', x_impound_trx_number);
            g_inv_spread_tier_msg := xxmm_messages.get;

            --log_message (g_inv_spread_tier_msg);
            log_error (g_inv_spread_tier_msg,
                       xxmm_constants.msg_type_warning);
            log_file (g_inv_spread_tier_msg);


            l_valid := FALSE;

            insert_hold_warn (x_cts_header_id,
                              xxmm_constants.gc_hold_entity_type_imp,
                              x_impound_trx_id,
                              g_inv_spread_tier_hold,
                              g_inv_spread_tier_msg,
                              xxmm_constants.gc_hold_type,
                              g_hold_catg_rec);
        END IF;

        log_message ('Spread Rate is ' || l_rate_char);
        XXMM_UTILITIES.PUT_LINE_LOG( 'Spread Rate is ' || l_rate_char);

        x_spread_rate := TO_NUMBER (l_rate_char);


        log_message ('Ending >> ' || l_program_unit);


        RETURN (l_valid);
    EXCEPTION
        WHEN OTHERS
        THEN
            g_err_msg := 'OTHER EXCEPTION, the error text is : ' || SQLERRM;
            log_message (g_err_msg);

            xxmm_utilities.put_line_log (g_err_msg);

            raise_application_error (-20018, g_err_msg);
    END get_spread_tier_rate;


    PROCEDURE get_bank_id (
        x_bank              IN     xxmm_bank_branches.bank_number%TYPE,
        x_branch            IN     xxmm_bank_branches.bank_branch_number%TYPE,
        x_account           IN     xxmm_bank_accounts.account_number%TYPE,
        x_bank_account_id      OUT xxmm_bank_accounts.bank_account_id%TYPE)
    IS
        CURSOR c_bank_id (
            p_bank      IN xxmm_bank_branches.bank_number%TYPE,
            p_branch    IN xxmm_bank_branches.bank_branch_number%TYPE,
            p_account   IN xxmm_bank_accounts.account_number%TYPE)
        IS
            SELECT xba.bank_account_id bank_account_id
              FROM xxmm_bank_accounts xba, xxmm_bank_branches xbb
             WHERE     xba.bank_branch_id = xbb.bank_branch_id
                   AND xbb.bank_number = p_bank
                   AND xbb.bank_branch_number = p_branch
                   AND xba.account_number = p_account;

        r_bank_id        c_bank_id%ROWTYPE;

        l_program_unit   VARCHAR2 (100) := g_package_name || '.GET_BANK_ID';
    BEGIN
        log_message ('Starting >> ' || l_program_unit);


        IF c_bank_id%ISOPEN
        THEN
            CLOSE c_bank_id;
        END IF;

        XXMM_UTILITIES.put_line_log('the bank is '||x_bank);
        XXMM_UTILITIES.put_line_log('the branch is '||x_branch);
        XXMM_UTILITIES.put_line_log('the account is '||x_account);

        OPEN c_bank_id (x_bank, x_branch, x_account);

        --fnd_file.put_line(fnd_file.log, '1111');

        FETCH c_bank_id INTO r_bank_id;

        CLOSE c_bank_id;

        --fnd_file.put_line(fnd_file.log, '2222');

        x_bank_account_id := r_bank_id.bank_account_id;

        XXMM_UTILITIES.put_line_log('the bank account id is '||to_char(x_bank_account_id));


        log_message ('Ending >> ' || l_program_unit);
    EXCEPTION
        WHEN OTHERS
        THEN
            g_err_msg :=
                   'OTHER EXCEPTION while getting the funding bank account, the error text is : '
                || SQLERRM;
            log_message (g_err_msg);

            xxmm_utilities.put_line_log (g_err_msg);

            raise_application_error (-20020, g_err_msg);
    END get_bank_id;



    PROCEDURE get_bank (
        x_account_name      IN     xxmm_bank_accounts.account_name%TYPE,
        x_bank_account_id      OUT NUMBER)
    IS
        CURSOR c_bank (
            p_account_name   IN xxmm_bank_accounts.account_name%TYPE)
        IS
            SELECT xba.bank_account_id bank_account_id
              FROM xxmm_bank_accounts xba, xxmm_bank_branches xbb
             WHERE     xba.bank_branch_id = xbb.bank_branch_id
                   AND xba.account_name = p_account_name;

        r_bank           c_bank%ROWTYPE;

        l_program_unit   VARCHAR2 (100) := g_package_name || '.GET_BANK';
    BEGIN
        log_message ('Starting >> ' || l_program_unit);


        IF c_bank%ISOPEN
        THEN
            CLOSE c_bank;
        END IF;

        --fnd_file.put_line(fnd_file.log, 'the bank is '||x_bank);
        --fnd_file.put_line(fnd_file.log, 'the branch is '||x_branch);
        --fnd_file.put_line(fnd_file.log, 'the account is '||x_account);

        OPEN c_bank (                         --x_bank, x_branch,    x_account
                     x_account_name);

        --fnd_file.put_line(fnd_file.log, '1111');

        FETCH c_bank INTO r_bank;

        CLOSE c_bank;

        --fnd_file.put_line(fnd_file.log, '2222');

        x_bank_account_id := r_bank.bank_account_id;

        XXMM_UTILITIES.put_line_log('the bank account id is '||to_char(x_bank_account_id));


        log_message ('Ending >> ' || l_program_unit);
    EXCEPTION
        WHEN OTHERS
        THEN
            g_err_msg := 'OTHER EXCEPTION, the error text is : ' || SQLERRM;
            log_message (g_err_msg);

            xxmm_utilities.put_line_log (g_err_msg);

            raise_application_error (-20020, g_err_msg);
    END get_bank;

    --
    -- get max count and amount by funding method
    --

    PROCEDURE get_max_count_amount (x_funding_method   IN     VARCHAR2,
                                    x_bank             IN     VARCHAR2,
                                    x_bank_acct_name   IN     VARCHAR2,
                                    x_cnt                 OUT NUMBER,
                                    x_amount              OUT NUMBER)
    IS
        CURSOR c_param (
            p_funding_method   IN VARCHAR2,
            p_bank             IN VARCHAR2,
            p_bank_acct_name   IN VARCHAR2)
        IS
            SELECT lc.lookup_code,
                   lc.attribute6,
                   lc.attribute7,
                   lc.attribute9
              FROM xxmm_lookups lc, xxmm_lookup_types lt
             WHERE     lc.lookup_type_id = lt.lookup_type_id
                   AND lt.lookup_type = xxmm_constants.gc_remit_file_lt --'xxmm_remit_file_param'
                   AND lc.source_value = p_bank               --p_input_source
                   AND lc.enabled_flag = 'Y'
                   AND lc.attribute1 = p_funding_method
                   AND lc.attribute9 = p_bank_acct_name;

        r_param          c_param%ROWTYPE;

        l_program_unit   VARCHAR2 (100)
                             := g_package_name || '.GET_MAX_COUNT_AMOUNT';

        l_char           VARCHAR2 (150) DEFAULT NULL;
    BEGIN
        log_message ('Starting >> ' || l_program_unit);


        log_message ('x_funding_method is >> ' || x_funding_method);
        log_message ('x_bank is >> ' || x_bank);

        IF c_param%ISOPEN
        THEN
            CLOSE c_param;
        END IF;

        OPEN c_param (                                       --x_input_source,
                      x_funding_method, x_bank, x_bank_acct_name);

        FETCH c_param INTO r_param;

        CLOSE c_param;

        BEGIN
            l_char := r_param.attribute6;
            x_cnt := TO_NUMBER (LTRIM (RTRIM (l_char)));

            l_char := r_param.attribute7;
            x_amount := TO_NUMBER (LTRIM (RTRIM (l_char)));
        EXCEPTION
            WHEN OTHERS
            THEN
                g_err_msg :=
                       'Other exception when converting max values in number, the error text is :'
                    || SQLERRM;
                log_message (g_err_msg);
                log_file (g_err_msg);

                x_cnt := 9999;
                x_amount := 9999999.99;
        END;

        log_message ('Max Count is >> ' || TO_CHAR (x_cnt));
        log_message ('Max Amount is >> ' || TO_CHAR (x_amount));


        log_message ('Ending >> ' || l_program_unit);
    EXCEPTION
        WHEN OTHERS
        THEN
            g_err_msg := 'OTHER EXCEPTION, the error text is : ' || SQLERRM;
            log_message (g_err_msg);
            log_file (g_err_msg);
            x_cnt := 9999;
            x_amount := 9999999.99;
    END get_max_count_amount;

    PROCEDURE calc_duedate_chk_holiday (
        x_funding_method   IN     xxmm_receipt_batches.funding_method%TYPE,
        x_date             IN     xxmm_receipt_batches.remittance_due_date%TYPE,
        x_days             IN     NUMBER,
        x_code1            IN     VARCHAR2,
        x_code2            IN     VARCHAR2,
        x_input_source     IN     xxmm_cts_headers.input_source%TYPE,
        x_due_date            OUT DATE)
    IS
        l_cnt            NUMBER := 0;
        l_date           DATE := NULL;
        l_check          BOOLEAN DEFAULT TRUE;
        l_text           xxmm_lookups.lookup_code%TYPE DEFAULT NULL;
        l_txt            VARCHAR2 (100) DEFAULT NULL;
        l_program_unit   VARCHAR2 (100)
                             := g_package_name || '.CALC_DUEDATE_CHK_HOLIDAY';

        l_holiday        VARCHAR2 (100) := NULL;
    BEGIN
        log_message ('Starting >> ' || l_program_unit);


        l_date := x_date;
        l_cnt := x_days;

        log_message ('L_date is ' || l_date, 3);
        log_message ('l_cnt is ' || l_cnt, 3);

        log_message ('Before Outer Loop...', 3);

       <<outer_loop>>
        LOOP
            log_message ('In Outer Loop...', 3);

            IF NVL (l_cnt, 0) = 0
            THEN
                log_message ('Exiting Outer Loop, l_cnt is zero...');
                EXIT outer_loop;
            END IF;

            l_date := l_date - 1;
            l_cnt := NVL (l_cnt, 0) - 1;
            l_check := FALSE;
            log_message ('l_check Setting to FALSE');
            --if      c_adhoc%isopen
            --then
            --        close   c_adhoc;
            --end if;

            log_message (
                   'Checking l_date '
                || TO_CHAR (l_date, 'DD-MON-YYYY')
                || ' is a holiday or not');
            log_message ('Before Inner Loop...', 3);


           <<inner_loop>>
            LOOP
                log_message ('In Inner Loop...');
                log_message (
                       'Checking date '
                    || TO_CHAR (l_date, 'DD-MON-YYYY')
                    || ', region 1 is '
                    || x_code1
                    || ' and region 2 is '
                    || x_code2);

                --OPEN    C_ADHOC (  L_DATE, X_INPUT_SOURCE );
                --FETCH    C_ADHOC        INTO    L_TEXT ;
                /*
                if  (
                     --c_adhoc%found
                 --or
                    (
                     x_funding_method     in (   xxmm_constants.gc_usrw_funding_method, xxmm_constants.gc_uscp_fund_meth ) and
                     xxmm_utilities .holiday_calculator ( trunc(l_date), 'US' ) is not null )
                 or (x_funding_method not in (   xxmm_constants.gc_usrw_funding_method, xxmm_constants.gc_uscp_fund_meth ) and
                     xxmm_utilities.holiday_calculator ( trunc(l_date), x_code1, x_code2 ) is not null )
                    )
                */

                l_holiday := NULL;

                IF x_funding_method IN
                       (xxmm_constants.gc_usrw_funding_method,
                        xxmm_constants.gc_uscp_fund_meth)
                THEN
                    l_holiday :=
                        xxmm_utilities.holiday_calculator (
                            TRUNC (l_date),
                            'US');
                ELSE
                    l_holiday :=
                        xxmm_utilities.holiday_calculator (
                            TRUNC (l_date),
                            x_code1,
                            x_code2);
                END IF;

                log_file (
                       'the return value for L_Holiday for date '
                    || TO_CHAR (l_date, 'DD-MON-YYYY')
                    || ' is "'
                    || l_holiday
                    || '".');

                IF l_holiday IS NOT NULL
                THEN
                    --xxmm_utilities.put_line_log (' ');
                    --xxmm_utilities.put_line_log (
                    --       'Oops! Calculated Remit presentation date '
                    --    || TO_CHAR (l_date, 'DD-MON-YYYY')
                    --    || ' is a Holiday, recalculating the date.');
                    --xxmm_utilities.put_line_log (' ');
                    --
                    -- Start Naeem 26-JUL-2013,FP 61885
                    --
                    log_file (
                           'Oops! Calculated Remit presentation date '
                        || TO_CHAR (l_date, 'DD-MON-YYYY')
                        || ' is a Holiday, recalculating the date.');
                    l_date := l_date - 1;

                    --l_cnt   :=  nvl(l_cnt,0) + 1;

                    log_file (
                        'l_date is ' || TO_CHAR (l_date, 'DD-MON-YYYY'));
                    log_file ('l_cnt is ' || l_cnt);
                    --
                    --  End  Naeem26-JUL-2013, FP 61885
                    --


                    l_check := TRUE;
                    log_file ('l_check is TRUE');
                ELSE
                    log_file ('It is NOT a Holiday!!');
                    l_check := FALSE;
                    log_file ('l_check is FALSE');
                END IF;

                --CLOSE   C_ADHOC;


                IF NOT l_check
                THEN
                    log_file ('l_check is FALSE');
                    log_file (
                           'Exiting Inner loop, l_cnt is '
                        || l_cnt
                        || ' and l_date is '
                        || TO_CHAR (l_date, 'DD-MON-YYYY'));

                    EXIT inner_loop;
                ELSE
                    log_file ('l_check is TRUE');
                    log_file ('Performing Inner loop again....');
                    l_check := FALSE;
                    log_file ('l_check changed to FALSE');
                END IF;
            END LOOP inner_loop;

            log_message ('Performing Outer loop again....', 3);
        END LOOP outer_loop;

        log_message ('L_date is ' || l_date, 3);

        x_due_date := l_date;

        log_message ('Ending << ' || l_program_unit, 3);
    END calc_duedate_chk_holiday;



    --
    -- Get remittance Due Date based on Funding Method Sub-Type
    --

    FUNCTION get_remittance_due_date_eu (
        p_funding_method        IN xxmm_receipt_batches.funding_method%TYPE,
        p_impound_due_date      IN xxmm_receipt_batches.remittance_due_date%TYPE,
        p_remit_thru_date       IN xxmm_receipt_batches.remittance_due_date%TYPE,
        p_bank_number           IN xxmm_bank_branches.bank_number%TYPE,
        p_branch_number         IN xxmm_bank_branches.bank_branch_number%TYPE,
        p_input_source          IN xxmm_cts_headers.input_source%TYPE,
        p_intended_stlmt_bank   IN xxmm_cts_impound_trx.adp_banking_partner%TYPE,
        p_fm_sub_type           IN xxmm_cts_impound_trx.funding_method_sub_type%TYPE,
        p_country_code          IN VARCHAR2, -->>Rel3.2 QC 96 | Mamtha Babu | 29-Oct_2013
        p_impound_account       IN xxmm_cts_impound_trx.impound_account%TYPE,
        --<<Rel3.2 QC 96 | Mamtha Babu | 29-Oct_2013
        -->>PWR EU-13-352 - Debit Pull Selection Date | Ranjitha | 17-Jun-2013
        p_control_id            IN xxmm_customer_controls.control_id%TYPE DEFAULT NULL --<<PWR EU-13-352 - Debit Pull Selection Date | Ranjitha | 17-Jun-2013
                                                                                      )
        RETURN DATE
    IS
        l_days                   NUMBER DEFAULT 0;
        l_lead_days              NUMBER DEFAULT 0;
        l_date                   DATE DEFAULT NULL;
        l_due_date               DATE DEFAULT NULL;
        l_date_time              DATE DEFAULT NULL;

        l_am_pm                  xxmm_lookups.lookup_code%TYPE DEFAULT NULL;
        l_from_time              VARCHAR2 (30) DEFAULT NULL;
        l_to_time                VARCHAR2 (30) DEFAULT NULL;
        l_on_time_dom            VARCHAR2 (01) DEFAULT NULL;
        l_on_time_sepa           VARCHAR2 (01) DEFAULT NULL;
        -->>  PWR EU-13-352 - Debit Pull Selection Date | Ranjitha | 17-Jun-2013 | Fetch  On Time SEPACORE
        l_on_time_sepa_core      xxmm_lookups.attribute7%TYPE DEFAULT NULL;
        l_mandate_sequence       xxmm_bank_mandates.mandate_sequence%TYPE
                                     := NULL;
        lc_attribute4   CONSTANT VARCHAR2 (12) := 'ATTRIBUTE4';
        lc_attribute5   CONSTANT VARCHAR2 (12) := 'ATTRIBUTE5';
        --<<  PWR EU-13-352 - Debit Pull Selection Date | Ranjitha | 17-Jun-2013 | Fetch  On Time SEPACORE
        l_check                  BOOLEAN DEFAULT TRUE;

        l_serv_days              NUMBER DEFAULT 1;
        l_buffer_days            NUMBER DEFAULT 0;
        l_off_us_days            NUMBER DEFAULT 0;
        l_on_us_days             NUMBER DEFAULT 0;
        l_srv_code               xxmm_if_fi_files.srv_code%TYPE DEFAULT NULL;
        l_on_us                  BOOLEAN DEFAULT TRUE;
        l_cnt                    NUMBER DEFAULT 0;
        l_next_day_on_us         VARCHAR2 (30) DEFAULT NULL;
        l_next_day_off_us        VARCHAR2 (30) DEFAULT NULL;
        l_default_flag           VARCHAR2 (01) DEFAULT NULL;
        l_program_unit           VARCHAR2 (100)
            := g_package_name || '.GET_REMITTANCE_DUE_DATE_EU';
        l_text                   xxmm_lookups.lookup_code%TYPE DEFAULT NULL;
        l_txt                    VARCHAR2 (100) DEFAULT NULL;
        -->>Rel3.2 QC 96 | Mamtha Babu | 29-Oct_2013
        l_bank_account_id        xxmm_bank_accounts.bank_account_id%TYPE
                                     DEFAULT NULL;

        --<<Rel3.2 QC 96 | Mamtha Babu | 29-Oct_2013

        --L_CNT               NUMBER                                  DEFAULT 0;

        CURSOR c_cutoff (
            x_date                  IN DATE,
            x_intended_stlmt_bank   IN xxmm_cts_impound_trx.adp_banking_partner%TYPE)
        IS
            SELECT lc.lookup_code,
                   lc.attribute1,
                   lc.attribute2,
                   lc.attribute5,
                   lc.attribute6,
                   -->>  PWR EU-13-352 - Debit Pull Selection Date | Ranjitha | 17-Jun-2013 | Fetch  On Time SEPACORE
                   lc.attribute7
              --<<  PWR EU-13-352 - Debit Pull Selection Date | Ranjitha | 17-Jun-2013 | Fetch  On Time SEPACORE
              FROM xxmm_lookups_v lc
             WHERE     lc.attribute_category = lc.lookup_type
                   AND lc.lookup_type =
                           xxmm_constants.gc_remit_process_time_lt
                   AND x_date BETWEEN TO_DATE (
                                          (   TO_CHAR (x_date, 'DD-MON-YYYY')
                                           || ' '
                                           || lc.attribute1),
                                          'DD-MON-YYYY HH24:MI:SS')
                                  AND TO_DATE (
                                          (   TO_CHAR (x_date, 'DD-MON-YYYY')
                                           || ' '
                                           || lc.attribute2),
                                          'DD-MON-YYYY HH24:MI:SS')
                   AND lc.source_value = x_intended_stlmt_bank;

        r_cutoff                 c_cutoff%ROWTYPE;
    /*
    Cursor C_ADHOC (
                    X_DATE               IN  DATE ,
                    X_INPUT_SOURCE       IN  XXMM_CTS_HEADERS.INPUT_SOURCE%TYPE
                    ) IS
            SELECT  LOOKUP_CODE
            FROM    XXMM_LOOKUPS_V      LC
            WHERE   LC.LOOKUP_TYPE      =   xxmm_constants.gc_adhoc_holidays_lt
            AND     LOOKUP_CODE         IN ( TO_CHAR(X_DATE,'DD-MON-RRRR'), TO_CHAR(X_DATE,'DD-MON-YY') )
            AND     NVL(LC.SOURCE_VALUE,'X')     =   NVL(X_INPUT_SOURCE,NVL(LC.SOURCE_VALUE,'X'));
    */

    BEGIN
        -->>Noordzee Changes | Mamtha Babu
        log_message (l_program_unit || g_enter_prog);
        log_message ('In the ' || p_country_code || ' routine');

        --log_file('In the France routine.');
        --<<Noordzee Changes | Mamtha Babu
        -->>  PWR EU-13-352 - Debit Pull Selection Date | Ranjitha | 17-Jun-2013 |
        --  L_days for FR and NL depends on FRST and RCUR.
        -- These are sen in attribute4 and attribute5 respectively
        -- Need to populate this field based on bank mandate_sequence for  control
        BEGIN
            l_mandate_sequence := NULL;

            --Fetching the bank account id
            -->>Rel3.2 QC 96 | Mamtha Babu | 29-Oct_2013
            l_bank_account_id := NULL;
            l_bank_account_id :=
                xxmm_bank_utilities.get_bank_account_id (p_bank_number,
                                                         p_branch_number,
                                                         p_impound_account);

            --<<Rel3.2 QC 96 | Mamtha Babu | 29-Oct_2013

            SELECT xbm.mandate_sequence
              INTO l_mandate_sequence
              FROM xxmm_bank_mandates xbm, xxmm_bank_account_uses xbau
             WHERE     xbm.bank_mandate_id = xbau.bank_mandate_id
                   AND xbau.account_usage_type =
                           xxmm_constants.gc_imp_acc_usage_type       -- 'IMP'
                   AND xbau.entity_type = xxmm_constants.gc_entity_type -- 'CTL'
                   -->>Rel3.2 QC 96 | Mamtha Babu | 29-Oct_2013
                   --A control could contain more than 1 impound account and hence adding the below condition to fetch the mandate sequence of the corresponding impound's account
                   AND xbau.bank_account_id =
                           NVL (l_bank_account_id, xbau.bank_account_id)
                   --<<Rel3.2 QC 96 | Mamtha Babu | 29-Oct_2013
                   AND xbau.entity_id = p_control_id;

            log_file (
                'Mandates Sequence  for a control is :' || l_mandate_sequence);
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                log_file ('No Mandates present for a control');
                l_mandate_sequence := NULL;
            WHEN TOO_MANY_ROWS
            THEN
                log_file ('Multiple Mandates present for a control');
                l_mandate_sequence := NULL;
        END;

        IF l_mandate_sequence = 'FRST'
        THEN
            l_days :=
                xxmm_lookup_utilities.get_code_attribute (
                    p_source_value         => p_intended_stlmt_bank,
                    p_type                 => xxmm_constants.gc_dp_selection_date_lt,
                    p_code                 => p_fm_sub_type,
                    p_attribute_category   => xxmm_constants.gc_dp_selection_date_lt,
                    p_attribute            => lc_attribute4);
        -->>Rel3.2 QC 96 | Mamtha Babu | 29-Oct_2013
        --Added the RCUR part
        ELSIF l_mandate_sequence = 'RCUR'
        THEN
            --<<Rel3.2 QC 96 | Mamtha Babu | 29-Oct_2013
            l_days :=
                xxmm_lookup_utilities.get_code_attribute (
                    p_source_value         => p_intended_stlmt_bank,
                    p_type                 => xxmm_constants.gc_dp_selection_date_lt,
                    p_code                 => p_fm_sub_type,
                    p_attribute_category   => xxmm_constants.gc_dp_selection_date_lt,
                    p_attribute            => lc_attribute5);
        END IF;

        /*  l_days      :=      xxmm_lookup_utilities.get_code_attribute (
                                        p_source_value         =>  p_intended_stlmt_bank,
                                        p_type                 =>  xxmm_constants.gc_dp_selection_date_lt,
                                        p_code                 =>  p_fm_sub_type,
                                        p_attribute_category   =>  xxmm_constants.gc_dp_selection_date_lt,
                                        p_attribute            =>  'ATTRIBUTE1');*/

        log_file ('L_days are ' || TO_CHAR (l_days));
        --<<  PWR EU-13-352 - Debit Pull Selection Date | Ranjitha | 17-Jun-2013 | Fetch  On Time SEPACORE


        l_lead_days :=
            xxmm_lookup_utilities.get_code_attribute (
                p_source_value         => p_intended_stlmt_bank,
                p_type                 => xxmm_constants.gc_dp_selection_date_lt,
                p_code                 => p_fm_sub_type,
                p_attribute_category   => xxmm_constants.gc_dp_selection_date_lt,
                p_attribute            => 'ATTRIBUTE3');

        log_file ('L_LEAD_days are ' || TO_CHAR (l_lead_days));
        log_file (
               'L_Impound_due_date is '
            || TO_CHAR (p_impound_due_date, 'DD-MON-YYYY'));


        l_due_date := TRUNC (p_impound_due_date);
        l_date := l_due_date;

        l_days := NVL (l_days, 0) + NVL (l_lead_days, 0);
        l_check := TRUE;

        --log_file('l_due_date is '||to_char(l_due_date,'DD-MON-YYYY'));
        --log_file('g_clt_sysdate is '||to_char(g_clt_sysdate,'DD-MON-YYYY'));

        IF TRUNC (l_due_date) <= TRUNC (g_clt_sysdate)
        THEN
            l_due_date := TRUNC (g_clt_sysdate);
        ELSE
            calc_duedate_chk_holiday (p_funding_method,
                                      l_date,
                                      l_days,
                                      g_clt_region, --'US', -- should be changed to eu after holiday calculator routine fix
                                      p_country_code,
                                      p_input_source,
                                      l_due_date);
        END IF;



        log_file ('L_DUE_DATE is ' || TO_CHAR (l_due_date, 'DD-MON-YYYY'));


        IF c_cutoff%ISOPEN
        THEN
            CLOSE c_cutoff;
        END IF;

        --OPEN    C_CUTOFF (  TO_DATE(TO_CHAR(SYSDATE,'DD-MON-YYYY')||'12:01:00','DD-MON-YYYY HH24:MI:SS'), P_INPUT_SOURCE );

        --l_date_time := to_date(trunc(sysdate)
        --                     ||' 08:10:00','DD-MON-YYYY HH24:MI:SS');

        l_date_time :=
            xxmm_utilities.convert_date_tz (SYSDATE,
                                            g_srv_tmz_code,
                                            g_clt_tmz_code,
                                            'Y');

        --log_file('Current Date Time is '||to_char(l_date_time,'DD-MON-YYYY HH24:MI:SS'));



        OPEN c_cutoff (l_date_time, p_intended_stlmt_bank);

        FETCH c_cutoff
            INTO l_am_pm,
                 l_from_time,
                 l_to_time,
                 l_on_time_dom,
                 l_on_time_sepa,
                 l_on_time_sepa_core;

        CLOSE c_cutoff;


        --L_LATE_SEPA := 'N';
        --L_ON_TIME_SEPA  :=  'Y';


        log_file (
               'Date and Time l_date_time is : '
            || TO_CHAR (l_date_time, 'DD-MON-YYYY HH24:Mi:ss'));
        log_file ('Cut-Off Code is : ' || l_am_pm);
        log_file ('Cut-Off ON-Time DOM flag is : ' || l_on_time_dom);
        --log_file('cut-off late core flag  is : '||l_late_core);
        log_file ('Cut-Off ON-Time SEPA flag is : ' || l_on_time_sepa);
        log_file (
            'Cut-Off ON-Time SEPA CORE flag is : ' || l_on_time_sepa_core);

        --log_file('cut-off late sepa flag  is : '||l_late_sepa);

        -->>FT6790 | Mamtha Babu | 06-Sep-2012
        --Post IMpound ACH changes (6403), the funding method subtype was changed from SEPA to SPEAB2B
        --Hence modifying the below code to be in sync with it
        IF p_fm_sub_type = 'SEPAB2B' --'SEPA'  This is post Impound ACH changes (ref to FT6403)
        THEN
            IF NVL (l_on_time_sepa, 'N') = 'Y'
            THEN
                IF TRUNC (l_due_date) > TRUNC (p_remit_thru_date)
                THEN
                    --dbms_output.put_line('aaa SEPA, On Time Y but due date '||to_char(l_due_date,'DD-MON-YYYY')
                    --            ||'is > p_remit_thru_date, should be skipped ');

                    l_check := FALSE;
                ELSE
                    DBMS_OUTPUT.put_line ('xxx SEPAB2B, should be Selected.');
                END IF;
            ELSIF NVL (l_on_time_sepa, 'N') = 'N'
            THEN
                IF TRUNC (l_due_date) >= TRUNC (p_remit_thru_date)
                THEN
                    --dbms_output.put_line('eee SEPA, On Time N, L_Due_date '||to_char(l_due_date,'DD-MON-YYYY')
                    --            ||'is >=  p_remit_thru_date, should be skipped.');


                    l_check := FALSE;
                ELSE
                    DBMS_OUTPUT.put_line ('zzz SEPAB2B, should be Selected.');
                END IF;
            END IF;
        -->>  PWR EU-13-352 - Debit Pull Selection Date | Ranjitha | 17-Jun-2013 |
        -- Logic to incorporate SEPA CORE
        /*ELSIF p_fm_sub_type = xxmm_constants.gc_mandate_sepacore
        THEN
          IF  nvl(l_on_time_sepa_core,'N') IN (  'Y','N')
            THEN
            IF      TRUNC(l_due_date)        >   TRUNC(p_remit_thru_date) or  TRUNC(l_due_date)    >=  TRUNC(p_remit_thru_date)
            THEN
                    l_check     :=  false;
            ELSE
                   log_file('ON-Time SEPA CORE Should be selected');
            END IF;
          END IF;*/
        -->> QC 73 | Ranjitha | Fetching future dated
        -->>  PWR EU-13-352 - Debit Pull Selection Date | Ranjitha | 17-Jun-2013 |
        -- Logic to incorporate SEPA CORE
        ELSIF p_fm_sub_type = xxmm_constants.gc_mandate_sepacore
        THEN
            IF    (    NVL (l_on_time_sepa_core, 'N') = 'Y'
                   AND TRUNC (l_due_date) > TRUNC (p_remit_thru_date))
               OR (    NVL (l_on_time_sepa_core, 'N') = 'N'
                   AND TRUNC (l_due_date) >= TRUNC (p_remit_thru_date))
            THEN
                l_check := FALSE;
            ELSE
                log_file ('ON-Time SEPA CORE Should be selected');
            END IF;
        --<<  PWR EU-13-352 - Debit Pull Selection Date | Ranjitha | 17-Jun-2013 |
        --<<  PWR EU-13-352 - Debit Pull Selection Date | Ranjitha | 17-Jun-2013 |
        ELSIF p_fm_sub_type = 'CORE ADPA' --'DOM'   This is post Impound ACH changes (ref to FT6403)
        THEN
            IF NVL (l_on_time_dom, 'N') = 'Y'
            THEN
                IF TRUNC (l_due_date) > TRUNC (p_remit_thru_date)
                THEN
                    --dbms_output.put_line('aaa DOM, On Time Y but due date '||to_char(l_due_date,'DD-MON-YYYY')
                    --            ||'is > p_remit_thru_date, should be skipped ');

                    l_check := FALSE;
                ELSE
                    DBMS_OUTPUT.put_line (
                        'XXX CORE ADPA, should be Selected.');
                END IF;
            ELSIF NVL (l_on_time_dom, 'N') = 'N'
            THEN
                IF TRUNC (l_due_date) >= TRUNC (p_remit_thru_date)
                THEN
                    DBMS_OUTPUT.put_line (
                           'EEE CORE ADPA, On Time N, L_Due_date '
                        || TO_CHAR (l_due_date, 'DD-MON-YYYY')
                        || 'is >=  p_remit_thru_date, should be skipped.');

                    l_check := FALSE;
                ELSE
                    DBMS_OUTPUT.put_line (
                        'ZZZ CORE ADPA, should be Selected.');
                END IF;
            END IF;
        -->>Noordzee Changes | Mamtha Babu
        --for NL, the local clearing is EQUENS
        ELSIF p_fm_sub_type = 'EQUENS' --'DOM'   This is post Impound ACH changes (ref to FT6403)
        THEN
            IF NVL (l_on_time_dom, 'N') = 'Y'
            THEN
                IF TRUNC (l_due_date) > TRUNC (p_remit_thru_date)
                THEN
                    --dbms_output.put_line('aaa DOM, On Time Y but due date '||to_char(l_due_date,'DD-MON-YYYY')
                    --            ||'is > p_remit_thru_date, should be skipped ');

                    l_check := FALSE;
                ELSE
                    DBMS_OUTPUT.put_line ('XXX EQUENS, should be Selected.');
                END IF;
            ELSIF NVL (l_on_time_dom, 'N') = 'N'
            THEN
                IF TRUNC (l_due_date) >= TRUNC (p_remit_thru_date)
                THEN
                    DBMS_OUTPUT.put_line (
                           'EEE EQUENS, On Time N, L_Due_date '
                        || TO_CHAR (l_due_date, 'DD-MON-YYYY')
                        || 'is >=  p_remit_thru_date, should be skipped.');

                    l_check := FALSE;
                ELSE
                    DBMS_OUTPUT.put_line ('ZZZ EQUENS, should be Selected.');
                END IF;
            END IF;
        --<<Noordzee Changes | Mamtha Babu
        --<<FT6790 | Mamtha Babu | 06-Sep-2012
        END IF;

        IF TRUNC (l_due_date) < TRUNC (g_clt_sysdate)
        THEN
            --xxmm_utilities.put_line_log (' ');
            --xxmm_utilities.put_line_log (
            log_file(
                   'Oops! Calculated Remit presentation date '
                || TO_CHAR (l_due_date, 'DD-MON-YYYY')
                || ' is a past date, changing it to system date');
            --xxmm_utilities.put_line_log (' ');
            l_due_date := TRUNC (g_clt_sysdate);
        END IF;


        IF NOT l_check
        THEN
            l_due_date := p_remit_thru_date + 10;
        END IF;


        --
        -- checking for weekends and holidays
        --

        l_check := TRUE;


        IF TRUNC (l_due_date) > TRUNC (g_clt_sysdate)
        THEN
            l_check := FALSE;

            LOOP
                --if      c_adhoc%isopen
                --then
                --        close   c_adhoc;
                --end if;



                --open    c_adhoc (  l_due_date,
                --                   p_intended_stlmt_bank );
                --fetch    c_adhoc        into    l_text ;

                IF (                                           --c_adhoc%found
                       --or
                        (    p_funding_method IN
                                 (xxmm_constants.gc_usrw_funding_method,
                                  xxmm_constants.gc_uscp_fund_meth)
                         AND xxmm_utilities.holiday_calculator (
                                 TRUNC (l_due_date),
                                 'US')
                                 IS NOT NULL)
                    OR (    p_funding_method NOT IN
                                (xxmm_constants.gc_usrw_funding_method,
                                 xxmm_constants.gc_uscp_fund_meth)
                        AND --xxmm_utilities.holiday_calculator ( trunc(l_due_date),  'eu', p_country_code  ) is not null )
                           xxmm_utilities.holiday_calculator (
                                TRUNC (l_due_date),
                                g_clt_region,
                                p_country_code)
                                IS NOT NULL))
                THEN
                    --xxmm_utilities.put_line_log (' ');
                    --xxmm_utilities.put_line_log (
                    log_file(
                           'Oops! Calculated Remit presentation date '
                        || TO_CHAR (l_due_date, 'DD-MON-YYYY')
                        || ' is a Holiday, recalculating the date.');
                    --xxmm_utilities.put_line_log (' ');
                    l_due_date := l_due_date - 1;
                    l_check := TRUE;
                END IF;


                --CLOSE   C_ADHOC;


                IF NOT l_check
                THEN
                    EXIT;
                ELSE
                    l_check := FALSE;
                END IF;
            END LOOP;
        --xxmm_utilities.put_line_log(' ');
        --xxmm_utilities.put_line_log('the remit presentation date is : '||l_due_date);
        --xxmm_utilities.put_line_log(' ');



        END IF;



        --xxmm_utilities.put_line_log (' ');
        --xxmm_utilities.put_line_log (
        log_file(
            'The Remit Presentation Date is : ' || l_due_date);
        --dbms_output.put_line('the remit presentation date is : '||l_due_date);
        --xxmm_utilities.put_line_log (' ');

        RETURN (l_due_date);
    END get_remittance_due_date_eu;



    --
    -- get remittance due date based on servicibility code for canada
    --

    FUNCTION get_remittance_due_date_ca (
        p_funding_method        IN xxmm_receipt_batches.funding_method%TYPE,
        p_impound_due_date      IN xxmm_receipt_batches.remittance_due_date%TYPE,
        p_remit_thru_date       IN xxmm_receipt_batches.remittance_due_date%TYPE,
        p_bank_number           IN xxmm_bank_branches.bank_number%TYPE,
        p_branch_number         IN xxmm_bank_branches.bank_branch_number%TYPE,
        p_input_source          IN xxmm_cts_headers.input_source%TYPE,
        p_intended_stlmt_bank   IN xxmm_cts_impound_trx.adp_banking_partner%TYPE,
        p_fm_sub_type           IN xxmm_cts_impound_trx.funding_method_sub_type%TYPE,
        p_country_code          IN VARCHAR2)
        RETURN DATE
    IS
        l_days              NUMBER DEFAULT 0;
        l_date              DATE DEFAULT NULL;
        l_date_time         DATE DEFAULT NULL;
        l_due_date          DATE DEFAULT NULL;
        l_serv_days         NUMBER DEFAULT 1;
        l_buffer_days       NUMBER DEFAULT 0;
        l_off_us_days       NUMBER DEFAULT 0;
        l_on_us_days        NUMBER DEFAULT 0;
        l_lead_days         NUMBER DEFAULT 0;
        l_srv_code          xxmm_if_fi_files.srv_code%TYPE DEFAULT NULL;
        l_on_us             BOOLEAN DEFAULT TRUE;
        l_check             BOOLEAN DEFAULT TRUE;
        l_cnt               NUMBER DEFAULT 0;
        l_am_pm             xxmm_lookups.lookup_code%TYPE DEFAULT NULL;
        l_from_time         VARCHAR2 (30) DEFAULT NULL;
        l_to_time           VARCHAR2 (30) DEFAULT NULL;
        l_next_day_on_us    VARCHAR2 (30) DEFAULT NULL;
        l_next_day_off_us   VARCHAR2 (30) DEFAULT NULL;
        l_default_flag      VARCHAR2 (01) DEFAULT NULL;
        l_program_unit      VARCHAR2 (100)
            := g_package_name || '.GET_REMITTANCE_DUE_DATE_CA';
        l_text              xxmm_lookups.lookup_code%TYPE DEFAULT NULL;
        l_txt               VARCHAR2 (100) DEFAULT NULL;

        --l_cnt               number                                  default 0;
        CURSOR c_fi_partner (
            x_funding_method   IN xxmm_receipt_batches.funding_method%TYPE,
            x_bank_number      IN xxmm_bank_branches.bank_number%TYPE,
            x_input_source     IN xxmm_cts_headers.input_source%TYPE)
        IS
            SELECT COUNT (*)
              FROM xxmm_lookups_v lc
             WHERE     lc.lookup_type = xxmm_constants.gc_settlement_bank_lt
                   AND lc.attribute1 = x_bank_number
                   AND lc.attribute2 = x_funding_method
                   AND lc.source_value = x_input_source;


        CURSOR c_srv_code (
            x_bank_number     IN xxmm_bank_branches.bank_number%TYPE,
            x_branch_number   IN xxmm_bank_branches.bank_branch_number%TYPE)
        IS
            SELECT srv_code
              FROM xxmm_fi_files
             WHERE     bank_number = x_bank_number
                   AND branch_num = x_branch_number;

        --    r_srv_code     c_srv_code%rowtype;


        CURSOR c_on_off_us (
            x_srv_code              IN xxmm_if_fi_files.srv_code%TYPE,
            --x_input_source      in  xxmm_cts_headers.input_source%type,
            x_intended_stlmt_bank   IN xxmm_cts_impound_trx.adp_banking_partner%TYPE,
            x_default_flag          IN VARCHAR2)
        IS
            SELECT lc.attribute1, lc.attribute2, lc.attribute3
              FROM xxmm_lookups_v lc
             WHERE     lc.lookup_type =
                           xxmm_constants.gc_dp_selection_date_lt
                   AND lc.lookup_code =
                           DECODE (x_default_flag,
                                   'Y', lc.lookup_code,
                                   x_srv_code)
                   AND lc.default_flag =
                           NVL (x_default_flag, lc.default_flag)
                   AND lc.source_value = x_intended_stlmt_bank --x_input_source
                                                              ;

        r_on_off_us         c_on_off_us%ROWTYPE;

        CURSOR c_cutoff (
            x_date                  IN DATE,
            x_intended_stlmt_bank   IN xxmm_cts_impound_trx.adp_banking_partner%TYPE)
        IS
            SELECT lc.lookup_code,
                   lc.attribute1,
                   lc.attribute2,
                   lc.attribute3,
                   lc.attribute4
              FROM xxmm_lookups_v lc
             WHERE     lc.attribute_category = lc.lookup_type
                   AND lc.lookup_type =
                           xxmm_constants.gc_remit_process_time_lt
                   AND x_date BETWEEN TO_DATE (
                                          (   TO_CHAR (x_date, 'DD-MON-YYYY')
                                           || ' '
                                           || lc.attribute1),
                                          'DD-MON-YYYY HH24:MI:SS')
                                  AND TO_DATE (
                                          (   TO_CHAR (x_date, 'DD-MON-YYYY')
                                           || ' '
                                           || lc.attribute2),
                                          'DD-MON-YYYY HH24:MI:SS')
                   AND lc.source_value = x_intended_stlmt_bank --x_input_source
                                                              ;

        r_cutoff            c_cutoff%ROWTYPE;



        CURSOR c_adhoc (
            x_date   IN DATE                                               --,
                            --x_input_source       in  xxmm_cts_headers.input_source%type
                            )
        IS
            SELECT lookup_code
              FROM xxmm_lookups_v lc
             WHERE     lc.lookup_type = xxmm_constants.gc_adhoc_holidays_lt
                   AND lookup_code IN
                           (TO_CHAR (x_date, 'DD-MON-RRRR'),
                            TO_CHAR (x_date, 'DD-MON-YY')) --and     nvl(lc.source_value,'X')     =   nvl(x_input_source,nvl(lc.source_value,'X'))
                                                          ;
    BEGIN
        log_file (
               'Function GET_REMITTANCE_DUE_DATE_CA Started at : '
            || TO_CHAR (SYSDATE, 'DD-MON-YYYY HH24:MI:SS'));


        IF p_funding_method <> xxmm_constants.gc_debit_pull_fund_meth
        THEN
            IF TRUNC (p_impound_due_date) <
                   TRUNC (NVL (g_clt_sysdate, SYSDATE))
            THEN
                l_due_date := TRUNC (NVL (g_clt_sysdate, SYSDATE));
            ELSE
                l_due_date := TRUNC (p_impound_due_date);
            END IF;
        ELSE
            --
            -- get the on-us or off-us based on financial partners
            --

            IF c_fi_partner%ISOPEN
            THEN
                CLOSE c_fi_partner;
            END IF;

            OPEN c_fi_partner (p_funding_method,
                               p_bank_number,
                               p_input_source);

            FETCH c_fi_partner INTO l_cnt;

            CLOSE c_fi_partner;

            IF NVL (l_cnt, 0) > 0
            THEN
                l_on_us := TRUE;

                log_file ('financial partner, on-us');
            ELSE
                l_on_us := FALSE;

                log_file ('not a financial partner, off-us');
            END IF;


            --
            -- get the serviciability code from fif file based on funding bank, if not found use the default code
            --

            IF c_srv_code%ISOPEN
            THEN
                CLOSE c_srv_code;
            END IF;

            OPEN c_srv_code (LPAD (p_bank_number, 4, '0'), p_branch_number);

            FETCH c_srv_code INTO l_srv_code;

            CLOSE c_srv_code;

            IF l_srv_code IS NULL
            THEN
                g_err_msg :=
                       'Serviceability code not found in FIF table for bank '
                    || LPAD (p_bank_number, 4, '0')
                    || ' and branch '
                    || p_branch_number
                    || ', using default Serviceability code.';

                log_message (g_err_msg);
                log_file (g_err_msg);

                l_default_flag := 'Y';
                log_file (
                    'Serviceability code not found, will use default code.');
            ELSE
                l_default_flag := NULL;
                log_file ('Serviceability code is : ' || l_srv_code);
            END IF;

            --
            -- get the on-us, off-us and lead days from the lookup based on serviciability code.
            --



            IF c_on_off_us%ISOPEN
            THEN
                CLOSE c_on_off_us;
            END IF;

            OPEN c_on_off_us (l_srv_code,                    --p_input_source,
                              p_intended_stlmt_bank,
                              l_default_flag);

            FETCH c_on_off_us INTO l_on_us_days, l_off_us_days, l_lead_days;

            CLOSE c_on_off_us;

            IF l_on_us_days IS NULL
            THEN
                g_err_msg :=
                       'Servicibility code '
                    || l_srv_code
                    || ' not setup in lookup type '
                    || xxmm_constants.gc_dp_selection_date_lt
                    || ', cannot calculate remit presentation date.';

                log_message (g_err_msg);
                log_file (g_err_msg);
                raise_application_error (-20042, g_err_msg);
            END IF;


            log_file (' ');
            log_file ('ON-US  days : ' || TO_CHAR (l_on_us_days));
            log_file (' ');
            log_file ('OFF-US days : ' || TO_CHAR (l_off_us_days));
            log_file (' ');
            log_file ('Lead   days : ' || TO_CHAR (l_lead_days));

            IF g_srv_tmz_code IS NULL
            THEN
                g_srv_tmz_code := xxmm_timezones.get_server_timezone_code;
            END IF;

            IF g_srv_tmz_id IS NULL
            THEN
                g_srv_tmz_id := get_timezone_id (g_srv_tmz_code);
            END IF;


            log_file ('g_srv_tmz_id : ' || TO_CHAR (g_srv_tmz_id));
            log_file ('g_srv_tmz_Code : ' || TO_CHAR (g_srv_tmz_code));

            log_file ('g_clt_tmz_id : ' || TO_CHAR (g_clt_tmz_id));
            log_file ('g_clt_tmz_Code : ' || TO_CHAR (g_clt_tmz_code));

            l_date_time :=
                xxmm_utilities.convert_date_tz (SYSDATE,
                                                g_srv_tmz_code,
                                                g_clt_tmz_code,
                                                'Y');

            log_file (
                   'l_date_time : '
                || TO_CHAR (l_date_time, 'DD-MON-YYY HH24:MI:SS'));


            IF c_cutoff%ISOPEN
            THEN
                CLOSE c_cutoff;
            END IF;

            --open    c_cutoff (  to_date(to_char(sysdate,'dd-mon-yyyy')||'12:01:00','dd-mon-yyyy hh24:mi:ss'), p_input_source );

            OPEN c_cutoff (l_date_time,                             --sysdate,
                                        --p_input_source
                                        p_intended_stlmt_bank);

            FETCH c_cutoff
                INTO l_am_pm,
                     l_from_time,
                     l_to_time,
                     l_next_day_off_us,
                     l_next_day_on_us;

            CLOSE c_cutoff;


            log_file (' ');
            log_file (
                   'Date and Time l_date_time is : '
                || TO_CHAR (l_date_time, 'DD-MON-YYYY HH24:Mi:ss'));
            log_file (' ');
            log_file ('Cut-Off Code is : ' || l_am_pm);
            log_file (' ');
            log_file (
                   'Cut-Off Include On Time OFF-US flag is : '
                || l_next_day_off_us);
            log_file (' ');
            log_file (
                   'Cut-Off Include On Time ON-US flag  is : '
                || l_next_day_on_us);

            log_file (
                   'Bank Number '
                || p_bank_number
                || ' Branch Number '
                || p_branch_number
                || ' and impound_due_date is '
                || TO_CHAR (p_impound_due_date, 'DD-MON-YYYY'));


            IF l_on_us
            THEN
                --l_due_date  :=  trunc(p_impound_due_date)   -   nvl(l_on_us_days,0)
                --                                             -   nvl(l_lead_days,0);

                l_date := TRUNC (p_impound_due_date);
                l_days := NVL (l_on_us_days, 0) + NVL (l_lead_days, 0);

                --dbms_output.put_line('l_days aaa is '||to_char(l_days));

                IF     TRUNC (l_date) - NVL (l_days, 0) > TRUNC (l_date_time) --trunc(sysdate)
                   AND NVL (l_days, 0) > 0
                THEN
                    calc_duedate_chk_holiday (p_funding_method,
                                              l_date,
                                              l_days,
                                              --
                                              -- START 27-DEC-2012 Naeem  FP Issue 60974
                                              --
                                              --null,
                                              'Federal',
                                              --
                                              --  END  27-DEC-2012 Naeem  FP Issue 60974
                                              --
                                              NULL,
                                              p_input_source,
                                              l_due_date);
                ELSE
                    l_due_date :=
                        TRUNC (p_impound_due_date) - NVL (l_days, 0);
                END IF;


                IF TRUNC (l_due_date) >= TRUNC (l_date_time)  --trunc(sysdate)
                THEN
                    IF NVL (l_next_day_on_us, 'N') = 'Y'
                    THEN
                        log_file (' ');
                        log_file (
                            'Include On Time ON-US Impound Trans, Selected');
                    --dbms_output.put_line('include on time on-us impound trans, selected');
                    ELSE
                        log_file (' ');
                        log_file (
                            'Include On Time ON-US Impound Trans, Ignored for next run');
                        --dbms_output.put_line('include on time on-us impound trans, ignored for next run');

                        l_due_date := p_remit_thru_date + 10;
                    END IF;
                END IF;
            --xxmm_utilities.put_line_log(' ');
            --xxmm_utilities.put_line_log('on-us calculation, remit presentation date is : '||l_due_date);

            ELSE
                --l_due_date  :=  trunc(p_impound_due_date)   -   nvl(l_off_us_days,0)
                --                                            -   nvl(l_lead_days,0);

                l_date := TRUNC (p_impound_due_date);
                l_days := NVL (l_off_us_days, 0) + NVL (l_lead_days, 0);

                --dbms_output.put_line('l_days bbb is '||to_char(l_days));

                IF     TRUNC (l_date) - NVL (l_days, 0) > TRUNC (l_date_time) --trunc(sysdate)
                   AND NVL (l_days, 0) > 0
                THEN
                    log_file ('calculate duedate and check holiday');

                    calc_duedate_chk_holiday (p_funding_method,
                                              l_date,
                                              l_days,
                                              --
                                              -- START 27-DEC-2012 Naeem  FP Issue 60974
                                              --
                                              --null,
                                              'Federal',
                                              --
                                              --  END  27-DEC-2012 Naeem  FP Issue 60974
                                              --
                                              NULL,
                                              p_input_source,
                                              l_due_date);
                ELSE
                    l_due_date :=
                        TRUNC (p_impound_due_date) - NVL (l_days, 0);
                END IF;


                IF TRUNC (l_due_date) >= TRUNC (l_date_time)  --trunc(sysdate)
                THEN
                    IF NVL (l_next_day_off_us, 'N') = 'Y'
                    THEN
                        log_file (' ');
                        log_file (
                            'Include On Time OFF-US Impound Trans, Selected');
                    --dbms_output.put_line('include on time off-us impound trans, selected');
                    ELSE
                        log_file (' ');
                        log_file (
                            'Include On Time OFF-US Impound Trans, Ignored for next run');
                        --dbms_output.put_line('include on time off-us impound trans, ignored for next run');
                        l_due_date := p_remit_thru_date + 10;
                    END IF;
                END IF;
            --xxmm_utilities.put_line_log(' ');
            --xxmm_utilities.put_line_log('off-us calculation, remit presentation date is : '||l_due_date);


            END IF;


            IF TRUNC (l_due_date) < TRUNC (l_date_time)       --trunc(sysdate)
            THEN
                log_file (' ');
                log_file (
                       'Oops! Calculated Remit presentation date '
                    || TO_CHAR (l_due_date, 'DD-MON-YYYY')
                    || ' is a past date, changing it to system date');
                log_file (' ');
                l_due_date := TRUNC (NVL (g_clt_sysdate, SYSDATE));
            END IF;
        END IF;

        --
        -- checking for weekends and holidays
        --

        log_file ('l_due_date is ' || l_due_date);
        log_file ('l_date_time is ' || l_date_time);

        IF TRUNC (l_due_date) > TRUNC (l_date_time)           --trunc(sysdate)
        THEN
            log_file (
                'l_due_date > L-date_time, checking for adhoc holidays...');

            l_check := FALSE;

            LOOP
                IF c_adhoc%ISOPEN
                THEN
                    CLOSE c_adhoc;
                END IF;



                OPEN c_adhoc (l_due_date                                   --,
                                        --p_input_source
                                        --p_intended_stlmt_bank
                                        );

                FETCH c_adhoc INTO l_text;

                log_file ('l_text is ' || l_text);

                IF (   c_adhoc%FOUND
                    OR (    p_funding_method IN
                                (xxmm_constants.gc_usrw_funding_method,
                                 xxmm_constants.gc_uscp_fund_meth)
                        AND xxmm_utilities.holiday_calculator (
                                TRUNC (l_due_date),
                                'US')
                                IS NOT NULL)
                    OR (    p_funding_method NOT IN
                                (xxmm_constants.gc_usrw_funding_method,
                                 xxmm_constants.gc_uscp_fund_meth)
                        AND --xxmm_utilities.holiday_calculator ( trunc(l_due_date), null, null ) is not null )
                           xxmm_utilities.holiday_calculator (
                                TRUNC (l_due_date),
                                g_clt_region,
                                p_country_code)
                                IS NOT NULL))
                THEN
                    log_file (' ');
                    log_file (
                           'Oops! Calculated Remit presentation date '
                        || TO_CHAR (l_due_date, 'DD-MON-YYYY')
                        || ' is a Holiday, recalculating the date.');
                    log_file (' ');
                    l_due_date := l_due_date - 1;
                    l_check := TRUE;
                END IF;

                CLOSE c_adhoc;


                IF NOT l_check
                THEN
                    EXIT;
                ELSE
                    l_check := FALSE;
                END IF;
            END LOOP;
        --xxmm_utilities.put_line_log(' ');
        --xxmm_utilities.put_line_log('the remit presentation date is : '||l_due_date);
        --xxmm_utilities.put_line_log(' ');

        END IF;


        log_file (' ');
        log_file ('The Remit Presentation Date is : ' || l_due_date);
        --dbms_output.put_line('the remit presentation date is : '||l_due_date);
        log_file (' ');

        log_file (
               'Function GET_REMITTANCE_DUE_DATE_CA Completed at : '
            || TO_CHAR (SYSDATE, 'DD-MON-YYYY HH24:MI:SS'));

        RETURN (l_due_date);
    END get_remittance_due_date_ca;

    -->>Noordzee Changes | Mamtha Babu
    --added the below function to calculate the remittance due date for UK OU
    FUNCTION get_remittance_due_date_uk (
        p_funding_method        IN xxmm_receipt_batches.funding_method%TYPE,
        p_impound_due_date      IN xxmm_receipt_batches.remittance_due_date%TYPE,
        p_remit_thru_date       IN xxmm_receipt_batches.remittance_due_date%TYPE,
        p_bank_number           IN xxmm_bank_branches.bank_number%TYPE,
        p_branch_number         IN xxmm_bank_branches.bank_branch_number%TYPE,
        p_input_source          IN xxmm_cts_headers.input_source%TYPE,
        p_intended_stlmt_bank   IN xxmm_cts_impound_trx.adp_banking_partner%TYPE,
        p_fm_sub_type           IN xxmm_cts_impound_trx.funding_method_sub_type%TYPE,
        p_country_code          IN VARCHAR2)
        RETURN DATE
    IS
        l_days              NUMBER DEFAULT 0;
        l_lead_days         NUMBER DEFAULT 0;
        l_date              DATE DEFAULT NULL;
        l_due_date          DATE DEFAULT NULL;
        l_date_time         DATE DEFAULT NULL;

        l_am_pm             xxmm_lookups.lookup_code%TYPE DEFAULT NULL;
        l_from_time         VARCHAR2 (30) DEFAULT NULL;
        l_to_time           VARCHAR2 (30) DEFAULT NULL;
        l_on_time_dom       VARCHAR2 (01) DEFAULT NULL;
        l_on_time_sepa      VARCHAR2 (01) DEFAULT NULL;
        l_check             BOOLEAN DEFAULT TRUE;

        l_serv_days         NUMBER DEFAULT 1;
        l_buffer_days       NUMBER DEFAULT 0;
        l_off_us_days       NUMBER DEFAULT 0;
        l_on_us_days        NUMBER DEFAULT 0;
        l_srv_code          xxmm_if_fi_files.srv_code%TYPE DEFAULT NULL;
        l_on_us             BOOLEAN DEFAULT TRUE;
        l_cnt               NUMBER DEFAULT 0;
        l_next_day_on_us    VARCHAR2 (30) DEFAULT NULL;
        l_next_day_off_us   VARCHAR2 (30) DEFAULT NULL;
        l_default_flag      VARCHAR2 (01) DEFAULT NULL;
        l_program_unit      VARCHAR2 (100)
            := g_package_name || '.GET_REMITTANCE_DUE_DATE_UK';
        l_text              xxmm_lookups.lookup_code%TYPE DEFAULT NULL;
        l_txt               VARCHAR2 (100) DEFAULT NULL;
        -->>FT6790 | Mamtha Babu | 06-Sep-2012
        l_fm_sub_type       xxmm_cts_impound_trx.funding_method_sub_type%TYPE
                                DEFAULT NULL;

        --<<FT6790 | Mamtha Babu | 06-Sep-2012


        --L_CNT               NUMBER                                  DEFAULT 0;

        CURSOR c_cutoff (
            x_date                  IN DATE,
            x_intended_stlmt_bank   IN xxmm_cts_impound_trx.adp_banking_partner%TYPE)
        IS
            SELECT lc.lookup_code,
                   lc.attribute1,
                   lc.attribute2,
                   lc.attribute5,
                   lc.attribute6
              FROM xxmm_lookups_v lc
             WHERE     lc.attribute_category = lc.lookup_type
                   AND lc.lookup_type =
                           xxmm_constants.gc_remit_process_time_lt
                   AND x_date BETWEEN TO_DATE (
                                          (   TO_CHAR (x_date, 'DD-MON-YYYY')
                                           || ' '
                                           || lc.attribute1),
                                          'DD-MON-YYYY HH24:MI:SS')
                                  AND TO_DATE (
                                          (   TO_CHAR (x_date, 'DD-MON-YYYY')
                                           || ' '
                                           || lc.attribute2),
                                          'DD-MON-YYYY HH24:MI:SS')
                   AND lc.source_value = x_intended_stlmt_bank;

        r_cutoff            c_cutoff%ROWTYPE;
    BEGIN
        log_message (l_program_unit || g_enter_prog);
        log_file ('In the UK routine.', 3);

        -->>FT6790 | Mamtha Babu | 06-Sep-2012
        --Post IMpound ACH changes (6403), the funding method subtype was changed from SEPA to SPEAB2B
        --Hence modifying the below code to be in sync with it
        --For UK, the funding method sub type would be NULL from the wrap. So we need to default it to DOM in order to fetch the lead days and US# days from XXMM_DR_PULL_SELECTION_DATE  lookup

        IF p_fm_sub_type IS NULL
        THEN
            l_fm_sub_type := 'DOM';
        ELSE
            l_fm_sub_type := p_fm_sub_type;
        END IF;

        --also replacing p_fm_sub_type with l_fm_sub_type in the below code

        l_days :=
            xxmm_lookup_utilities.get_code_attribute (
                p_source_value         => p_intended_stlmt_bank,
                p_type                 => xxmm_constants.gc_dp_selection_date_lt,
                p_code                 => l_fm_sub_type, -- p_fm_sub_type,         --part of FT6790 changes
                p_attribute_category   => xxmm_constants.gc_dp_selection_date_lt,
                p_attribute            => 'ATTRIBUTE1');

        log_file ('L_days are ' || TO_CHAR (l_days), 3);


        l_lead_days :=
            xxmm_lookup_utilities.get_code_attribute (
                p_source_value         => p_intended_stlmt_bank,
                p_type                 => xxmm_constants.gc_dp_selection_date_lt,
                p_code                 => l_fm_sub_type, -- p_fm_sub_type,         --part of FT6790 changes
                p_attribute_category   => xxmm_constants.gc_dp_selection_date_lt,
                p_attribute            => 'ATTRIBUTE3');

        log_file ('The funding method subtype is  ' || l_fm_sub_type);
        --<<FT6790 | Mamtha Babu | 06-Sep-2012
        log_file ('L_LEAD_days are ' || TO_CHAR (l_lead_days));
        log_file (
               'L_Impound_due_date is '
            || TO_CHAR (p_impound_due_date, 'DD-MON-YYYY'),
            3);


        l_due_date := TRUNC (p_impound_due_date);
        l_date := l_due_date;

        l_days := NVL (l_days, 0) + NVL (l_lead_days, 0);
        l_check := TRUE;

        --log_file('l_due_date is '||to_char(l_due_date,'DD-MON-YYYY'));
        --log_file('g_clt_sysdate is '||to_char(g_clt_sysdate,'DD-MON-YYYY'));

        IF TRUNC (l_due_date) <= TRUNC (g_clt_sysdate)
        THEN
            l_due_date := TRUNC (g_clt_sysdate);
        ELSE
            calc_duedate_chk_holiday (p_funding_method,
                                      l_date,
                                      l_days,
                                      g_clt_region, --'US', -- should be changed to eu after holiday calculator routine fix
                                      p_country_code,
                                      p_input_source,
                                      l_due_date);
        END IF;



        log_file ('L_DUE_DATE is ' || TO_CHAR (l_due_date, 'DD-MON-YYYY'));


        IF c_cutoff%ISOPEN
        THEN
            CLOSE c_cutoff;
        END IF;

        --OPEN    C_CUTOFF (  TO_DATE(TO_CHAR(SYSDATE,'DD-MON-YYYY')||'12:01:00','DD-MON-YYYY HH24:MI:SS'), P_INPUT_SOURCE );

        --l_date_time := to_date(trunc(sysdate)
        --                     ||' 08:10:00','DD-MON-YYYY HH24:MI:SS');

        l_date_time :=
            xxmm_utilities.convert_date_tz (SYSDATE,
                                            g_srv_tmz_code,
                                            g_clt_tmz_code,
                                            'Y');

        --log_file('Current Date Time is '||to_char(l_date_time,'DD-MON-YYYY HH24:MI:SS'));



        OPEN c_cutoff (l_date_time, p_intended_stlmt_bank);

        FETCH c_cutoff
            INTO l_am_pm,
                 l_from_time,
                 l_to_time,
                 l_on_time_dom,
                 l_on_time_sepa;

        CLOSE c_cutoff;


        --L_LATE_SEPA := 'N';
        --L_ON_TIME_SEPA  :=  'Y';

        log_file (
               'Date and Time l_date_time is : '
            || TO_CHAR (l_date_time, 'DD-MON-YYYY HH24:Mi:ss'));
        log_file ('Cut-Off Code is : ' || l_am_pm);
        log_file ('Cut-Off ON-Time DOM flag is : ' || l_on_time_dom);
        --log_file('cut-off late core flag  is : '||l_late_core);
        log_file ('Cut-Off ON-Time SEPA flag is : ' || l_on_time_sepa);

        --log_file('cut-off late sepa flag  is : '||l_late_sepa);

        --changes done by Mamtha. SEPA is not applicable in UK , hence commenting out the below logic
        /*if      p_fm_sub_type           =   'SEPA'
        then
            if  nvl(l_on_time_sepa,'N') =   'Y'
            then


                    if      trunc(l_due_date)        >   trunc(p_remit_thru_date)
                    then

                            --dbms_output.put_line('aaa SEPA, On Time Y but due date '||to_char(l_due_date,'DD-MON-YYYY')
                            --            ||'is > p_remit_thru_date, should be skipped ');

                            l_check     :=  false;


                    else
                            dbms_output.put_line('xxx SEPA, should be Selected.');

                    end if;


            elsif   nvl(l_on_time_sepa,'N') =   'N'
            then

                    if     trunc(l_due_date)        >=  trunc(p_remit_thru_date)
                    then

                            --dbms_output.put_line('eee SEPA, On Time N, L_Due_date '||to_char(l_due_date,'DD-MON-YYYY')
                            --            ||'is >=  p_remit_thru_date, should be skipped.');


                            l_check     :=  false;


                    else

                            dbms_output.put_line('zzz SEPA, should be Selected.');


                    end if;

            end if;

       -- elsif   p_fm_sub_type           =   'DOM' */
        -->>FT6790 | Mamtha Babu | 06-Sep-2012
        --replacing p_fm_sub_type with l_fm_sub_type in the below code
        IF l_fm_sub_type = 'DOM'
        THEN
            --<<FT6790 | Mamtha Babu | 06-Sep-2012
            IF NVL (l_on_time_dom, 'N') = 'Y'
            THEN
                IF TRUNC (l_due_date) > TRUNC (p_remit_thru_date)
                THEN
                    --dbms_output.put_line('aaa DOM, On Time Y but due date '||to_char(l_due_date,'DD-MON-YYYY')
                    --            ||'is > p_remit_thru_date, should be skipped ');

                    l_check := FALSE;
                ELSE
                    DBMS_OUTPUT.put_line ('XXX DOM, should be Selected.');
                END IF;
            ELSIF NVL (l_on_time_dom, 'N') = 'N'
            THEN
                IF TRUNC (l_due_date) >= TRUNC (p_remit_thru_date)
                THEN
                    DBMS_OUTPUT.put_line (
                           'EEE DOM, On Time N, L_Due_date '
                        || TO_CHAR (l_due_date, 'DD-MON-YYYY')
                        || 'is >=  p_remit_thru_date, should be skipped.');

                    l_check := FALSE;
                ELSE
                    DBMS_OUTPUT.put_line ('ZZZ DOM, should be Selected.');
                END IF;
            END IF;
        END IF;

        IF TRUNC (l_due_date) < TRUNC (g_clt_sysdate)
        THEN
            --xxmm_utilities.put_line_log (' ');
            --xxmm_utilities.put_line_log (
            log_file(
                   'Oops! Calculated Remit presentation date '
                || TO_CHAR (l_due_date, 'DD-MON-YYYY')
                || ' is a past date, changing it to system date');
            --xxmm_utilities.put_line_log (' ');
            l_due_date := TRUNC (g_clt_sysdate);
        END IF;


        IF NOT l_check
        THEN
            l_due_date := p_remit_thru_date + 10;
        END IF;


        --
        -- checking for weekends and holidays
        --

        l_check := TRUE;


        IF TRUNC (l_due_date) > TRUNC (g_clt_sysdate)
        THEN
            l_check := FALSE;

            LOOP
                IF (                                           --c_adhoc%found
                       --or
                        (    p_funding_method IN
                                 (xxmm_constants.gc_usrw_funding_method,
                                  xxmm_constants.gc_uscp_fund_meth)
                         AND xxmm_utilities.holiday_calculator (
                                 TRUNC (l_due_date),
                                 'US')
                                 IS NOT NULL)
                    OR (    p_funding_method NOT IN
                                (xxmm_constants.gc_usrw_funding_method,
                                 xxmm_constants.gc_uscp_fund_meth)
                        AND --xxmm_utilities.holiday_calculator ( trunc(l_due_date),  'eu', p_country_code  ) is not null )
                           xxmm_utilities.holiday_calculator (
                                TRUNC (l_due_date),
                                g_clt_region,
                                p_country_code)
                                IS NOT NULL))
                THEN
                    --xxmm_utilities.put_line_log (' ');
                    --xxmm_utilities.put_line_log (
                    log_file(
                           'Oops! Calculated Remit presentation date '
                        || TO_CHAR (l_due_date, 'DD-MON-YYYY')
                        || ' is a Holiday, recalculating the date.');
                    --xxmm_utilities.put_line_log (' ');
                    l_due_date := l_due_date - 1;
                    l_check := TRUE;
                END IF;


                --CLOSE   C_ADHOC;


                IF NOT l_check
                THEN
                    EXIT;
                ELSE
                    l_check := FALSE;
                END IF;
            END LOOP;
        END IF;

        --xxmm_utilities.put_line_log (
            log_file(
            'The Remit Presentation Date is : ' || l_due_date);
        --dbms_output.put_line('the remit presentation date is : '||l_due_date);
        --xxmm_utilities.put_line_log (' ');

        log_message (l_program_unit || g_enter_prog);
        RETURN (l_due_date);
    END get_remittance_due_date_uk;

    /*
    function   get_remittance_due_date_nl (
                   p_funding_method     in  xxmm_receipt_batches.funding_method%type,
                   p_impound_due_date   in  xxmm_receipt_batches.remittance_due_date%type,
                   p_remit_thru_date    in  xxmm_receipt_batches.remittance_due_date%type,
                   p_bank_number        in  xxmm_bank_branches.bank_number%type,
                   p_branch_number      in  xxmm_bank_branches.bank_branch_number%type,
                   p_input_source       in  xxmm_cts_headers.input_source%type,
                   p_intended_stlmt_bank in xxmm_cts_impound_trx.adp_banking_partner%type,
                   p_fm_sub_type        in  xxmm_cts_impound_trx.funding_method_sub_type%type,
                   p_country_code       in  varchar2
                                       ) return date is

    l_days              number                                  default 0;
    l_lead_days         number                                  default 0;
    l_date              date                                    default null;
    l_due_date          date                                    default null;
    l_date_time         date                                    default null;

    l_am_pm             xxmm_lookups.lookup_code%type           default null;
    l_from_time         varchar2(30)                            default null;
    l_to_time           varchar2(30)                            default null;
    l_on_time_dom       varchar2(01)                            default null;
    l_on_time_sepa      varchar2(01)                            default null;
    l_check             boolean                                 default true;

    l_serv_days         number                                  default 1;
    l_buffer_days       number                                  default 0;
    l_off_us_days       number                                  default 0;
    l_on_us_days        number                                  default 0;
    l_srv_code          xxmm_if_fi_files.srv_code%type          default null;
    l_on_us             boolean                                 default true;
    l_cnt               number                                  default 0;
    l_next_day_on_us    varchar2(30)                            default null;
    l_next_day_off_us   varchar2(30)                            default null;
    l_default_flag      varchar2(01)                            default null;
    l_program_unit      varchar2(100) := g_package_name||'.GET_REMITTANCE_DUE_DATE_NL';
    l_text              xxmm_lookups.lookup_code%type           default null;
    l_txt               varchar2(100)                           default null;

    --L_CNT               NUMBER                                  DEFAULT 0;

    cursor c_cutoff (
                    x_date               in  date,
                    x_intended_stlmt_bank in xxmm_cts_impound_trx.adp_banking_partner%type) is
            select  lc.lookup_code,
                    lc.attribute1,
                    lc.attribute2,
                    lc.attribute5,
                    lc.attribute6
            FROM    XXMM_LOOKUPS_V      LC
            WHERE   LC.ATTRIBUTE_CATEGORY   =   LC.LOOKUP_TYPE
            AND     LC.LOOKUP_TYPE      =   xxmm_constants.gc_remit_process_time_lt
            AND     X_DATE          BETWEEN TO_DATE((TO_CHAR(X_DATE,'DD-MON-YYYY')||' '||LC.ATTRIBUTE1),'DD-MON-YYYY HH24:MI:SS')
                                        AND TO_DATE((TO_CHAR(X_DATE,'DD-MON-YYYY')||' '||LC.ATTRIBUTE2),'DD-MON-YYYY HH24:MI:SS')
            AND     LC.SOURCE_VALUE     =   X_INTENDED_STLMT_BANK
            ;

        r_cutoff     c_cutoff%rowtype;

    BEGIN

        log_message (l_program_unit || g_enter_prog);
        log_file('In the NL routine.',3);

        l_days      :=      xxmm_lookup_utilities.get_code_attribute (
                                     p_source_value         =>  p_intended_stlmt_bank,
                                     p_type                 =>  xxmm_constants.gc_dp_selection_date_lt,
                                     p_code                 =>  p_fm_sub_type,
                                     p_attribute_category   =>  xxmm_constants.gc_dp_selection_date_lt,
                                     p_attribute            =>  'ATTRIBUTE1');

       log_file('L_days are '||to_char(l_days),3);



        l_lead_days :=      xxmm_lookup_utilities.get_code_attribute (
                                     p_source_value         =>  p_intended_stlmt_bank,
                                     p_type                 =>  xxmm_constants.gc_dp_selection_date_lt,
                                     p_code                 =>  p_fm_sub_type,
                                     p_attribute_category   =>  xxmm_constants.gc_dp_selection_date_lt,
                                     p_attribute            =>  'ATTRIBUTE3');

       log_file('L_LEAD_days are '||to_char(l_lead_days));
       log_file('L_Impound_due_date is '||to_char(p_impound_due_date,'DD-MON-YYYY'),3);


        l_due_date  :=      trunc(p_impound_due_date);
        l_date      :=      l_due_date;

        l_days      :=      nvl(l_days,0) + nvl(l_lead_days,0);
        l_check     :=      true;

        --log_file('l_due_date is '||to_char(l_due_date,'DD-MON-YYYY'));
        --log_file('g_clt_sysdate is '||to_char(g_clt_sysdate,'DD-MON-YYYY'));

        if      trunc(l_due_date)   <=   trunc(g_clt_sysdate)
        then

                l_due_date          :=  trunc(g_clt_sysdate);

        else

                calc_duedate_chk_holiday (
                                          p_funding_method,
                                          l_date,
                                          l_days,
                                          g_clt_region, --'US', -- should be changed to eu after holiday calculator routine fix
                                          p_country_code,
                                          p_input_source,
                                          l_due_date )    ;

        end if;



       log_file('L_DUE_DATE is '||to_char(l_due_date,'DD-MON-YYYY'));


        if      c_cutoff%isopen
        then
                close   c_cutoff;
        end if;

                --OPEN    C_CUTOFF (  TO_DATE(TO_CHAR(SYSDATE,'DD-MON-YYYY')||'12:01:00','DD-MON-YYYY HH24:MI:SS'), P_INPUT_SOURCE );

    --l_date_time := to_date(trunc(sysdate)
    --                     ||' 08:10:00','DD-MON-YYYY HH24:MI:SS');

        l_date_time :=  xxmm_utilities.convert_date_tz ( sysdate, g_srv_tmz_Code , g_clt_tmz_Code, 'Y' );

       --log_file('Current Date Time is '||to_char(l_date_time,'DD-MON-YYYY HH24:MI:SS'));



        open    c_cutoff (  l_date_time, p_intended_stlmt_bank );
        fetch   c_cutoff    into    l_am_pm,
                                    l_from_time,
                                    l_to_time,
                                    l_on_time_dom,
                                    l_on_time_sepa
                                    ;
        close   c_cutoff;


    --L_LATE_SEPA := 'N';
    --L_ON_TIME_SEPA  :=  'Y';


                log_file('Cut-Off Code is : '||l_am_pm);
                log_file('Cut-Off ON-Time DOM flag is : '||l_on_time_dom);
                --log_file('cut-off late core flag  is : '||l_late_core);
                log_file('Cut-Off ON-Time SEPA flag is : '||l_on_time_sepa);
                --log_file('cut-off late sepa flag  is : '||l_late_sepa);


        if      p_fm_sub_type           =   'SEPAB2B'   --'SEPA' -- This change was post Impound ACH changes done in Interface (Ref FT#6403)
        then
            if  nvl(l_on_time_sepa,'N') =   'Y'
            then


                    if      trunc(l_due_date)        >   trunc(p_remit_thru_date)
                    then

                            --dbms_output.put_line('aaa SEPA, On Time Y but due date '||to_char(l_due_date,'DD-MON-YYYY')
                            --            ||'is > p_remit_thru_date, should be skipped ');

                            l_check     :=  false;


                    else
                            dbms_output.put_line('xxx SEPAB2B, should be Selected.');

                    end if;


            elsif   nvl(l_on_time_sepa,'N') =   'N'
            then

                    if     trunc(l_due_date)        >=  trunc(p_remit_thru_date)
                    then

                            --dbms_output.put_line('eee SEPA, On Time N, L_Due_date '||to_char(l_due_date,'DD-MON-YYYY')
                            --            ||'is >=  p_remit_thru_date, should be skipped.');


                            l_check     :=  false;


                    else

                            dbms_output.put_line('zzz SEPAB2B, should be Selected.');


                    end if;

            end if;

        elsif   p_fm_sub_type           =   'EQUENS' --'DOM'   -- This change was post Impound ACH changes done in Interface (Ref FT#6403)
        then

            if     nvl(l_on_time_dom,'N') =   'Y'
            then

                    if      trunc(l_due_date)        >   trunc(p_remit_thru_date)
                    then

                            --dbms_output.put_line('aaa DOM, On Time Y but due date '||to_char(l_due_date,'DD-MON-YYYY')
                            --            ||'is > p_remit_thru_date, should be skipped ');

                            l_check     :=  false;

                    else
                            dbms_output.put_line('XXX EQUENS, should be Selected.');

                    end if;

            elsif     nvl(l_on_time_dom,'N') =   'N'
            then

                if     trunc(l_due_date)        >=  trunc(p_remit_thru_date)
                then

                        dbms_output.put_line('EEE EQUENS, On Time N, L_Due_date '||to_char(l_due_date,'DD-MON-YYYY')
                                        ||'is >=  p_remit_thru_date, should be skipped.');

                        l_check     :=  false;

                else

                        dbms_output.put_line('ZZZ EQUENS, should be Selected.');


                end if;

            end if;

        end if;

        if      trunc(l_due_date)   <   trunc(g_clt_sysdate)
        then
                xxmm_utilities.put_line_log(' ');
                xxmm_utilities.put_line_log('Oops! Calculated Remit presentation date '
                                                   ||to_char(l_due_date,'DD-MON-YYYY')
                                                   ||' is a past date, changing it to system date');
                xxmm_utilities.put_line_log(' ');
                l_due_date          :=  trunc(g_clt_sysdate);
        end if;


        if      not l_check
        then

                l_due_date  :=  p_remit_thru_date   + 10;

        end if;


        --
        -- checking for weekends and holidays
        --

        l_check     :=  true;


        if      trunc(l_due_date)   >   trunc(g_clt_sysdate)
        then

            l_check     :=  false;

            loop

                if  (
                    --c_adhoc%found
                    --or
                    (p_funding_method     in (   xxmm_constants.gc_usrw_funding_method, xxmm_constants.gc_uscp_fund_meth ) and
                        xxmm_utilities .holiday_calculator ( trunc(l_due_date), 'US' ) is not null )
                    or (p_funding_method not in (   xxmm_constants.gc_usrw_funding_method, xxmm_constants.gc_uscp_fund_meth ) and
                        --xxmm_utilities.holiday_calculator ( trunc(l_due_date),  'eu', p_country_code  ) is not null )
                        xxmm_utilities.holiday_calculator ( trunc(l_due_date),  g_clt_region, p_country_code  ) is not null )
                    )
                then

                        xxmm_utilities.put_line_log(' ');
                        xxmm_utilities.put_line_log('Oops! Calculated Remit presentation date '
                                                   ||to_char(l_due_date,'DD-MON-YYYY')
                                                   ||' is a Holiday, recalculating the date.');
                        xxmm_utilities.put_line_log(' ');
                        l_due_date  :=  l_due_date - 1;
                        l_check     :=  true;


                end if;


                --CLOSE   C_ADHOC;


                if  not l_check
                then

                        exit;
                else
                        l_check :=  false;
                end if;

            end loop;

        end if;

        xxmm_utilities.put_line_log('The Remit Presentation Date is : '||l_due_date);
        --dbms_output.put_line('the remit presentation date is : '||l_due_date);
        xxmm_utilities.put_line_log(' ');

        log_message (l_program_unit || g_enter_prog);
        return(l_due_date);



    end get_remittance_due_date_nl;
    */

    FUNCTION get_remittance_due_date_au (
        p_funding_method        IN xxmm_receipt_batches.funding_method%TYPE,
        p_impound_due_date      IN xxmm_receipt_batches.remittance_due_date%TYPE,
        p_remit_thru_date       IN xxmm_receipt_batches.remittance_due_date%TYPE,
        p_bank_number           IN xxmm_bank_branches.bank_number%TYPE,
        p_branch_number         IN xxmm_bank_branches.bank_branch_number%TYPE,
        p_input_source          IN xxmm_cts_headers.input_source%TYPE,
        p_intended_stlmt_bank   IN xxmm_cts_impound_trx.adp_banking_partner%TYPE,
        p_fm_sub_type           IN xxmm_cts_impound_trx.funding_method_sub_type%TYPE,
        p_country_code          IN VARCHAR2)
        RETURN DATE
    IS
        l_days              NUMBER DEFAULT 0;
        l_lead_days         NUMBER DEFAULT 0;
        l_date              DATE DEFAULT NULL;
        l_due_date          DATE DEFAULT NULL;
        l_date_time         DATE DEFAULT NULL;

        l_am_pm             xxmm_lookups.lookup_code%TYPE DEFAULT NULL;
        l_from_time         VARCHAR2 (30) DEFAULT NULL;
        l_to_time           VARCHAR2 (30) DEFAULT NULL;
        l_on_time_dom       VARCHAR2 (01) DEFAULT NULL;
        l_on_time_sepa      VARCHAR2 (01) DEFAULT NULL;
        l_check             BOOLEAN DEFAULT TRUE;

        l_serv_days         NUMBER DEFAULT 1;
        l_buffer_days       NUMBER DEFAULT 0;
        l_off_us_days       NUMBER DEFAULT 0;
        l_on_us_days        NUMBER DEFAULT 0;
        l_srv_code          xxmm_if_fi_files.srv_code%TYPE DEFAULT NULL;
        l_on_us             BOOLEAN DEFAULT TRUE;
        l_cnt               NUMBER DEFAULT 0;
        l_next_day_on_us    VARCHAR2 (30) DEFAULT NULL;
        l_next_day_off_us   VARCHAR2 (30) DEFAULT NULL;
        l_default_flag      VARCHAR2 (01) DEFAULT NULL;
        l_program_unit      VARCHAR2 (100)
            := g_package_name || '.GET_REMITTANCE_DUE_DATE_AU';
        l_text              xxmm_lookups.lookup_code%TYPE DEFAULT NULL;
        l_txt               VARCHAR2 (100) DEFAULT NULL;
        -->>FT6790 | Mamtha Babu | 06-Sep-2012
        l_fm_sub_type       xxmm_cts_impound_trx.funding_method_sub_type%TYPE
                                DEFAULT NULL;

        --<<FT6790 | Mamtha Babu | 06-Sep-2012


        --L_CNT               NUMBER                                  DEFAULT 0;

        CURSOR c_cutoff (
            x_date                  IN DATE,
            x_intended_stlmt_bank   IN xxmm_cts_impound_trx.adp_banking_partner%TYPE)
        IS
            SELECT lc.lookup_code,
                   lc.attribute1,
                   lc.attribute2,
                   lc.attribute5,
                   lc.attribute6
              FROM xxmm_lookups_v lc
             WHERE     lc.attribute_category = lc.lookup_type
                   AND lc.lookup_type =
                           xxmm_constants.gc_remit_process_time_lt
                   AND x_date BETWEEN TO_DATE (
                                          (   TO_CHAR (x_date, 'DD-MON-YYYY')
                                           || ' '
                                           || lc.attribute1),
                                          'DD-MON-YYYY HH24:MI:SS')
                                  AND TO_DATE (
                                          (   TO_CHAR (x_date, 'DD-MON-YYYY')
                                           || ' '
                                           || lc.attribute2),
                                          'DD-MON-YYYY HH24:MI:SS')
                   AND lc.source_value = x_intended_stlmt_bank;

        r_cutoff            c_cutoff%ROWTYPE;
    BEGIN
        log_message (l_program_unit || g_enter_prog);
        log_file ('In the AU routine.', 3);

        -->>FT6790 | Mamtha Babu | 06-Sep-2012
        --Post IMpound ACH changes (6403), the funding method subtype was changed from SEPA to SPEAB2B
        --Hence modifying the below code to be in sync with it
        --For UK, the funding method sub type would be NULL from the wrap. So we need to default it to DOM in order to fetch the lead days and US# days from XXMM_DR_PULL_SELECTION_DATE  lookup

        IF p_fm_sub_type IS NULL
        THEN
            l_fm_sub_type := 'DOM';
        ELSE
            l_fm_sub_type := p_fm_sub_type;
        END IF;

        --also replacing p_fm_sub_type with l_fm_sub_type in the below code

        l_days :=
            xxmm_lookup_utilities.get_code_attribute (
                p_source_value         => p_intended_stlmt_bank,
                p_type                 => xxmm_constants.gc_dp_selection_date_lt,
                p_code                 => l_fm_sub_type, -- p_fm_sub_type,         --part of FT6790 changes
                p_attribute_category   => xxmm_constants.gc_dp_selection_date_lt,
                p_attribute            => 'ATTRIBUTE1');

        log_file ('L_days are ' || TO_CHAR (l_days), 3);


        l_lead_days :=
            xxmm_lookup_utilities.get_code_attribute (
                p_source_value         => p_intended_stlmt_bank,
                p_type                 => xxmm_constants.gc_dp_selection_date_lt,
                p_code                 => l_fm_sub_type, -- p_fm_sub_type,         --part of FT6790 changes
                p_attribute_category   => xxmm_constants.gc_dp_selection_date_lt,
                p_attribute            => 'ATTRIBUTE3');

        log_file ('The funding method subtype is  ' || l_fm_sub_type);
        --<<FT6790 | Mamtha Babu | 06-Sep-2012
        log_file ('L_LEAD_days are ' || TO_CHAR (l_lead_days));
        log_file (
               'L_Impound_due_date is '
            || TO_CHAR (p_impound_due_date, 'DD-MON-YYYY'),
            3);


        l_due_date := TRUNC (p_impound_due_date);
        l_date := l_due_date;

        l_days := NVL (l_days, 0) + NVL (l_lead_days, 0);
        l_check := TRUE;

        --log_file('l_due_date is '||to_char(l_due_date,'DD-MON-YYYY'));
        --log_file('g_clt_sysdate is '||to_char(g_clt_sysdate,'DD-MON-YYYY'));

        IF TRUNC (l_due_date) <= TRUNC (g_clt_sysdate)
        THEN
            l_due_date := TRUNC (g_clt_sysdate);
        ELSE
            calc_duedate_chk_holiday (p_funding_method,
                                      l_date,
                                      l_days,
                                      g_clt_region, --'US', -- should be changed to eu after holiday calculator routine fix
                                      p_country_code,
                                      p_input_source,
                                      l_due_date);
        END IF;



        log_file ('L_DUE_DATE is ' || TO_CHAR (l_due_date, 'DD-MON-YYYY'));


        IF c_cutoff%ISOPEN
        THEN
            CLOSE c_cutoff;
        END IF;

        --OPEN    C_CUTOFF (  TO_DATE(TO_CHAR(SYSDATE,'DD-MON-YYYY')||'12:01:00','DD-MON-YYYY HH24:MI:SS'), P_INPUT_SOURCE );

        --l_date_time := to_date(trunc(sysdate)
        --                     ||' 08:10:00','DD-MON-YYYY HH24:MI:SS');

        l_date_time :=
            xxmm_utilities.convert_date_tz (SYSDATE,
                                            g_srv_tmz_code,
                                            g_clt_tmz_code,
                                            'Y');

        --log_file('Current Date Time is '||to_char(l_date_time,'DD-MON-YYYY HH24:MI:SS'));



        OPEN c_cutoff (l_date_time, p_intended_stlmt_bank);

        FETCH c_cutoff
            INTO l_am_pm,
                 l_from_time,
                 l_to_time,
                 l_on_time_dom,
                 l_on_time_sepa;

        CLOSE c_cutoff;


        --L_LATE_SEPA := 'N';
        --L_ON_TIME_SEPA  :=  'Y';

        log_file (
               'Date and Time l_date_time is : '
            || TO_CHAR (l_date_time, 'DD-MON-YYYY HH24:Mi:ss'));
        log_file ('Cut-Off Code is : ' || l_am_pm);
        log_file ('Cut-Off ON-Time DOM flag is : ' || l_on_time_dom);
        --log_file('cut-off late core flag  is : '||l_late_core);
        log_file ('Cut-Off ON-Time SEPA flag is : ' || l_on_time_sepa);

        --log_file('cut-off late sepa flag  is : '||l_late_sepa);

        --changes done by Mamtha. SEPA is not applicable in UK , hence commenting out the below logic
        /*if      p_fm_sub_type           =   'SEPA'
        then
            if  nvl(l_on_time_sepa,'N') =   'Y'
            then


                    if      trunc(l_due_date)        >   trunc(p_remit_thru_date)
                    then

                            --dbms_output.put_line('aaa SEPA, On Time Y but due date '||to_char(l_due_date,'DD-MON-YYYY')
                            --            ||'is > p_remit_thru_date, should be skipped ');

                            l_check     :=  false;


                    else
                            dbms_output.put_line('xxx SEPA, should be Selected.');

                    end if;


            elsif   nvl(l_on_time_sepa,'N') =   'N'
            then

                    if     trunc(l_due_date)        >=  trunc(p_remit_thru_date)
                    then

                            --dbms_output.put_line('eee SEPA, On Time N, L_Due_date '||to_char(l_due_date,'DD-MON-YYYY')
                            --            ||'is >=  p_remit_thru_date, should be skipped.');


                            l_check     :=  false;


                    else

                            dbms_output.put_line('zzz SEPA, should be Selected.');


                    end if;

            end if;

       -- elsif   p_fm_sub_type           =   'DOM' */
        -->>FT6790 | Mamtha Babu | 06-Sep-2012
        --replacing p_fm_sub_type with l_fm_sub_type in the below code
        IF l_fm_sub_type = 'DOM'
        THEN
            --<<FT6790 | Mamtha Babu | 06-Sep-2012
            IF NVL (l_on_time_dom, 'N') = 'Y'
            THEN
                IF TRUNC (l_due_date) > TRUNC (p_remit_thru_date)
                THEN
                    --dbms_output.put_line('aaa DOM, On Time Y but due date '||to_char(l_due_date,'DD-MON-YYYY')
                    --            ||'is > p_remit_thru_date, should be skipped ');

                    l_check := FALSE;
                ELSE
                    DBMS_OUTPUT.put_line ('XXX DOM, should be Selected.');
                END IF;
            ELSIF NVL (l_on_time_dom, 'N') = 'N'
            THEN
                IF TRUNC (l_due_date) >= TRUNC (p_remit_thru_date)
                THEN
                    DBMS_OUTPUT.put_line (
                           'EEE DOM, On Time N, L_Due_date '
                        || TO_CHAR (l_due_date, 'DD-MON-YYYY')
                        || 'is >=  p_remit_thru_date, should be skipped.');

                    l_check := FALSE;
                ELSE
                    DBMS_OUTPUT.put_line ('ZZZ DOM, should be Selected.');
                END IF;
            END IF;
        END IF;

        IF TRUNC (l_due_date) < TRUNC (g_clt_sysdate)
        THEN
            --xxmm_utilities.put_line_log (' ');
            --xxmm_utilities.put_line_log (
            log_file(
                   'Oops! Calculated Remit presentation date '
                || TO_CHAR (l_due_date, 'DD-MON-YYYY')
                || ' is a past date, changing it to system date');
            --xxmm_utilities.put_line_log (' ');
            l_due_date := TRUNC (g_clt_sysdate);
        END IF;


        IF NOT l_check
        THEN
            l_due_date := p_remit_thru_date + 10;
        END IF;


        --
        -- checking for weekends and holidays
        --

        l_check := TRUE;


        IF TRUNC (l_due_date) > TRUNC (g_clt_sysdate)
        THEN
            l_check := FALSE;

            LOOP
                IF (                                           --c_adhoc%found
                       --or
                        (    p_funding_method IN
                                 (xxmm_constants.gc_usrw_funding_method,
                                  xxmm_constants.gc_uscp_fund_meth)
                         AND xxmm_utilities.holiday_calculator (
                                 TRUNC (l_due_date),
                                 'US')
                                 IS NOT NULL)
                    OR (    p_funding_method NOT IN
                                (xxmm_constants.gc_usrw_funding_method,
                                 xxmm_constants.gc_uscp_fund_meth)
                        AND --xxmm_utilities.holiday_calculator ( trunc(l_due_date),  'eu', p_country_code  ) is not null )
                           xxmm_utilities.holiday_calculator (
                                TRUNC (l_due_date),
                                g_clt_region,
                                p_country_code)
                                IS NOT NULL))
                THEN
                    --xxmm_utilities.put_line_log (' ');
                    --xxmm_utilities.put_line_log (
                    log_file(
                           'Oops! Calculated Remit presentation date '
                        || TO_CHAR (l_due_date, 'DD-MON-YYYY')
                        || ' is a Holiday, recalculating the date.');
                    --xxmm_utilities.put_line_log (' ');
                    l_due_date := l_due_date - 1;
                    l_check := TRUE;
                END IF;


                --CLOSE   C_ADHOC;


                IF NOT l_check
                THEN
                    EXIT;
                ELSE
                    l_check := FALSE;
                END IF;
            END LOOP;
        END IF;

        --xxmm_utilities.put_line_log (
            log_file(
            'The Remit Presentation Date is : ' || l_due_date);
        --dbms_output.put_line('the remit presentation date is : '||l_due_date);
        --xxmm_utilities.put_line_log (' ');

        log_message (l_program_unit || g_enter_prog);
        RETURN (l_due_date);
    END get_remittance_due_date_au;

    --
    -- get remittance due date master
    --

    FUNCTION get_remittance_due_date (
        p_funding_method        IN xxmm_receipt_batches.funding_method%TYPE,
        p_impound_due_date      IN xxmm_receipt_batches.remittance_due_date%TYPE,
        p_remit_thru_date       IN xxmm_receipt_batches.remittance_due_date%TYPE,
        p_bank_number           IN xxmm_bank_branches.bank_number%TYPE,
        p_branch_number         IN xxmm_bank_branches.bank_branch_number%TYPE,
        p_input_source          IN xxmm_cts_headers.input_source%TYPE,
        p_intended_stlmt_bank   IN xxmm_cts_impound_trx.adp_banking_partner%TYPE,
        p_fm_sub_type           IN xxmm_cts_impound_trx.funding_method_sub_type%TYPE,
        -->>Rel3.2 QC 96 | Mamtha Babu | 29-Oct_2013
        p_impound_account       IN xxmm_cts_impound_trx.impound_account%TYPE,
        --<<Rel3.2 QC 96 | Mamtha Babu | 29-Oct_2013
        -->>PWR EU-13-352 - Debit Pull Selection Date | Ranjitha | 17-Jun-2013
        p_control_id            IN xxmm_customer_controls.control_id%TYPE DEFAULT NULL --<<PWR EU-13-352 - Debit Pull Selection Date | Ranjitha | 17-Jun-2013
                                                                                      )
        RETURN DATE
    IS
        l_country_code       xxmm_lookups.lookup_code%TYPE DEFAULT NULL;

        l_due_date           DATE DEFAULT NULL;
        l_impound_due_date   DATE DEFAULT NULL;
        l_remit_thru_date    DATE DEFAULT NULL;
    BEGIN
        --xxmm_utilities.put_line_log(' ');
        --xxmm_utilities.put_line_log('funding method is : '||p_funding_method);
        --xxmm_utilities.put_line_log(' ');
        --xxmm_utilities.put_line_log('impound_due_date is : '||p_impound_due_date);
        --xxmm_utilities.put_line_log(' ');
        --xxmm_utilities.put_line_log('bank number is : '||p_bank_number);
        --xxmm_utilities.put_line_log(' ');
        --xxmm_utilities.put_line_log('branch number is : '||p_branch_number);
        --xxmm_utilities.put_line_log(' ');
        --xxmm_utilities.put_line_log('input source is : '||p_input_source);
        --xxmm_utilities.put_line_log(' ');

        --log_file('IMPOUND TRX NUMBER is : '||r_sel_imp.impound_trx_number);
        --xxmm_utilities.put_line_log(' ');


        IF p_funding_method <> xxmm_constants.gc_debit_pull_fund_meth
        THEN
            IF TRUNC (p_impound_due_date) <
                   TRUNC (NVL (g_clt_sysdate, SYSDATE))
            THEN
                l_due_date := TRUNC (NVL (g_clt_sysdate, SYSDATE));
            ELSE
                l_due_date := TRUNC (p_impound_due_date);
            END IF;

            RETURN (l_due_date);
        ELSE
            log_file ('The input_source is ' || p_input_source);


            l_country_code :=
                xxmm_lookup_utilities.get_code_attribute (
                    p_source_value         => NULL,
                    p_type                 => xxmm_constants.gc_input_source_lt,
                    p_code                 => p_input_source,
                    p_attribute_category   => xxmm_constants.gc_input_source_lt,
                    p_attribute            => 'ATTRIBUTE5');


            log_file ('The country Code is ' || l_country_code);

            --fnd_profile.put ('CLIENT_TIMEZONE_ID', 276);
            --l_country_code := 'FR';

            g_clt_region := NULL;
            g_clt_region :=
                xxmm_lookup_utilities.get_code_attribute (
                    NULL,
                    xxmm_constants.gc_country_lt,
                    l_country_code,
                    xxmm_constants.gc_country_lt,
                    'ATTRIBUTE2');

            log_file ('The country region is ' || g_clt_region);

            IF g_clt_region IS NULL
            THEN
                log_file (
                       'Client Region for country code '
                    || l_country_code
                    || ' is not setup.');
                log_error (
                       'Client Region for country code '
                    || l_country_code
                    || ' is not setup.');
                raise_application_error (
                    -20052,
                       'Client Region for country code '
                    || g_country
                    || ' is not setup.');
            END IF;

            g_clt_tmz_id := NULL;
            g_clt_tmz_id :=
                xxmm_lookup_utilities.get_code_attribute (
                    NULL,
                    xxmm_constants.gc_country_lt,
                    l_country_code,
                    xxmm_constants.gc_country_lt,
                    'ATTRIBUTE3');

            --g_tmz_id := 276;

            IF g_clt_tmz_id IS NULL
            THEN
                log_file (
                       'Client Time zone for country code '
                    || l_country_code
                    || ' is not setup.');
                log_error (
                       'Client Time zone for country code '
                    || l_country_code
                    || ' is not setup.');
                raise_application_error (
                    -20032,
                       'Client Time zone for country code '
                    || g_country
                    || ' is not setup.');
            END IF;

            --fnd_profile.put ('CLIENT_TIMEZONE_ID', g_clt_tmz_id);

        ---
        ---Start Muhammad 30-APR-2020 FP-68313 to minimize fnd_file I/O --Commented out for every Impound
        ---

            --xxmm_utilities.set_client_timezone (g_clt_tmz_id);

            --g_clt_tmz_code := fnd_timezones.get_client_timezone_code;


        ---
        ---End Muhammad 30-APR-2020 FP-68313 to minimize fnd_file I/O  --Commented out for every Impound
        ---


            -->> Project G'day | Ranjitha | 4-APR-3016 | Not requried to set the client timezone here.Intialized it aas  global variable
            -- hence commenting this code
            /*  g_clt_sysdate :=
                 xxmm_utilities.convert_date_tz (g_srv_sysdate,
                                                 g_srv_tmz_Code,
                                                 g_clt_tmz_Code,
                                                 'Y');
             */

            log_file ('Server Time zone id is ' || TO_CHAR (g_srv_tmz_id));
            log_file ('Client Time zone id is ' || TO_CHAR (g_clt_tmz_id));


            log_file (
                   'the system date in client time zone is '
                || TO_CHAR (g_clt_sysdate, 'DD-MON-YYYY HH24:MI:SS'));

            --l_impound_due_date  :=  xxmm_utilities.convert_date_tz ( p_impound_due_date, g_srv_tmz_code , g_clt_tmz_code, 'Y' );
            --l_remit_thru_date   :=  xxmm_utilities.convert_date_tz ( p_remit_thru_date,  g_srv_tmz_code , g_clt_tmz_code, 'Y' );

            l_impound_due_date := NVL (p_impound_due_date, g_clt_sysdate);
            l_remit_thru_date := p_remit_thru_date;


            --log_file  ('Impound Due date with Client Time zone is'||to_char(l_impound_due_date,'DD-MON-RRRR HH24:MI:SS'));
            --log_file  ('Remit Thru Date with Client Time zone is '||to_char(l_remit_thru_date,'DD-MON-RRRR HH24:MI:SS'));

            IF NVL (l_country_code, 'XX') = 'CA'
            THEN
                --log_file('canada routine.');


                RETURN (get_remittance_due_date_ca (p_funding_method,
                                                    l_impound_due_date,
                                                    l_remit_thru_date,
                                                    p_bank_number,
                                                    p_branch_number,
                                                    p_input_source,
                                                    p_intended_stlmt_bank,
                                                    NULL,
                                                    l_country_code));
            -->>Noordzee Changes | Mamtha Babu
            --adding NL to the below
            --elsif   nvl(l_country_code,'XX')    =   'FR'
            ELSIF NVL (l_country_code, 'XX') IN ('FR', 'NL')
            THEN
                --<<Noordzee Changes | Mamtha Babu
                --log_file('france routine.');


                RETURN (get_remittance_due_date_eu (p_funding_method,
                                                    l_impound_due_date,
                                                    l_remit_thru_date,
                                                    p_bank_number,
                                                    p_branch_number,
                                                    p_input_source,
                                                    p_intended_stlmt_bank,
                                                    p_fm_sub_type,
                                                    l_country_code,
                                                    -->>Rel3.2 QC 96 | Mamtha Babu | 29-Oct_2013
                                                    p_impound_account,
                                                    --<<Rel3.2 QC 96 | Mamtha Babu | 29-Oct_2013
                                                    -->>PWR EU-13-352 - Debit Pull Selection Date | Ranjitha | 17-Jun-2013
                                                    p_control_id --<<PWR EU-13-352 - Debit Pull Selection Date | Ranjitha | 17-Jun-2013
                                                                ));
			-->> start Added MY and SG to get remittance due date | Mohit Tomar | 22-NOV-2022
            ELSIF NVL (l_country_code, 'XX') IN ('UK', 'MY', 'SG')
			--<< end Mohit Tomar
            THEN
                --log_file('france routine.');


                RETURN (get_remittance_due_date_uk (p_funding_method,
                                                    l_impound_due_date,
                                                    l_remit_thru_date,
                                                    p_bank_number,
                                                    p_branch_number,
                                                    p_input_source,
                                                    p_intended_stlmt_bank,
                                                    p_fm_sub_type,
                                                    l_country_code));
            /*elsif   nvl(l_country_code,'XX')    =   'NL'
            then

               --log_file('france routine.');


                    return(get_remittance_due_date_nl (
                                                p_funding_method,
                                                l_impound_due_date,
                                                l_remit_thru_date,
                                                p_bank_number,
                                                p_branch_number,
                                                p_input_source,
                                                p_intended_stlmt_bank,
                                                p_fm_sub_type,
                                                l_country_code ) );
                                                */
            ELSIF NVL (l_country_code, 'XX') IN ('AU')
            THEN
                RETURN (get_remittance_due_date_au (p_funding_method,
                                                    l_impound_due_date,
                                                    l_remit_thru_date,
                                                    p_bank_number,
                                                    p_branch_number,
                                                    p_input_source,
                                                    p_intended_stlmt_bank,
                                                    p_fm_sub_type,
                                                    l_country_code));
            ELSE
                RETURN (g_clt_sysdate + 20);
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS
        THEN
            g_err_msg :=
                   'OTHER exception in get_remittance_due_date, error text is ; '
                || SQLERRM;
            xxmm_utilities.put_line_log (g_err_msg);
            raise_application_error (-20030, g_err_msg);
    END get_remittance_due_date;



    PROCEDURE report_header
    IS
    --l_page_cnt      number          default 0;
    l_resp_name     VARCHAR2(240);
    BEGIN
        g_page_cnt := NVL (g_page_cnt, 0) + 1;

        IF NVL (g_page_cnt, 0) > 1
        THEN
            -->>4.3.2 Sprint 3||Ridham||29-NOV-2017||Added Classification
            xxmm_utilities.put_line_output (CHR (10));
            xxmm_utilities.put_line_output (
                   '                                                           '
                || xxmm_utilities.get_classification_mes (
                       xxmm_constants.gc_add_classification_mes)
                || '  '
                || CHR (13));
            --<<4.3.2 Sprint 3||Ridham||29-NOV-2017||Added Classification
            xxmm_utilities.put_line_output (CHR (12));
        END IF;

        get_fm_attributes (g_funding_method                                --,
                                           --nvl(g_input_source, xxmm_constants.gc_input_source_combo_canada)
                                           );


        xxmm_utilities.put_line_output (
               RPAD (LTRIM (RTRIM (g_ou_name)), 44)
            || 'IMM Create Receipt Batches Execution Report       '
            || 'Report Date: '
            -->> Project G'day | Ranjitha | 4-APr-2016 | Date to be displayed along with timezone
            --|| TO_CHAR (g_srv_sysdate, 'DD-MON-YYYY HH24:MI:SS')
            || TO_CHAR (xxmm_timezones.get_date_with_tz)
            --<< Project G'day | Ranjitha | 4-APr-2016 | Date to be displayed along with timezone
            || CHR (13));
        -->> Project Theseus- Quartz Integration | Nethravathi R |02-Mar-2021| Added logic to get the user name instead of responibility name in the report for the qurtz requests>
      IF(xxmm_security_profile.is_qrtz_request )
      THEN

        l_resp_name := xxmm_utilities.get_user_fullname;

        --SELECT xu.first_name ||' ' || xu.last_name
                --INTO l_resp_name
                --FROM xxmm_user xu
                --WHERE lan_id = xxmm_utilities.get_user_name;
        xxmm_utilities.put_line_output (
                'User Name: '
            || RPAD (LTRIM (RTRIM (l_resp_name)), 73, ' ')
            || ' '
            || LPAD('Page:  ',24)
            || TO_CHAR (g_page_cnt)
            || CHR (13));
       ELSE
      --<< Project Theseus- Quartz Integration | <Nethravathi R> |02-Mar-2021
        xxmm_utilities.put_line_output (
               'Responsibility: '
            --|| RPAD (LTRIM (RTRIM (fnd_global.resp_name)), 50, ' ')
            || '                                      '
            || 'Page: '
            || TO_CHAR (g_page_cnt)
            || CHR (13));
       END IF;
        xxmm_utilities.put_line_output (CHR (13));

        xxmm_utilities.put_line_output (
               ' Remit Presentation Through Date: '
            || TO_CHAR (g_remit_thru_date, 'DD-MON-YYYY')
            || CHR (13));

        xxmm_utilities.put_line_output (
            '                         Country: ' || g_country || CHR (13));

        xxmm_utilities.put_line_output (
               '                    Input Source: '
            || g_input_source
            || CHR (13));

        xxmm_utilities.put_line_output (
            '                  Funding Method: ' || g_fm_descr || CHR (13));

        xxmm_utilities.put_line_output (
               'Intended Settlement Bank Account: '
            || g_bank_acc_inten_stlmt
            || CHR (13));

        xxmm_utilities.put_line_output (
            '                  Control Number: ' || g_control || CHR (13));

        xxmm_utilities.put_line_output (
               '             Impound Number From: '
            || g_impound_number_from
            || CHR (13));

        xxmm_utilities.put_line_output (
               '               Impound Number To: '
            || g_impound_number_to
            || CHR (13));
    END report_header;

    ----------------------------------------------------------------------------------
    --
    -- Procedure:    report_header_itd
    --
    --
    --
    -- This procedure report header on output file
    --
    --+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    --
    --  Created By        Date         Description
    --   Karen Jiang     June 2,2014  PWR A-10-1009
    -----------------------------------------------------------------------------------
    PROCEDURE report_header_itd
    IS
        --l_page_cnt      number          default 0;
        l_report_date   CONSTANT VARCHAR2 (150)
                                     := xxmm_timezones.get_date_with_tz ;
        l_report_title VARCHAR2(100);
        l_resp_name     VARCHAR2(100);
    BEGIN
        g_page_cnt := NVL (g_page_cnt, 0) + 1;
        g_ou_name := XXMM_SECURITY_PROFILE.GET_OU_NAME (g_org_id);
        -->> Sharath Yaski | 21-OCT-2019 | Project Moose
        -- Change the Report title for Bill Pay Matching Process
        xxmm_utilities.put_line_log( 'report_header_itd ');
        xxmm_utilities.put_line_log( 'xxmm_utilities.get_conc_program_name '||xxmm_utilities.get_conc_program_name);
        --xxmm_utilities.put_line_log( 'conc_program_id '||fnd_global.conc_program_id);

        xxmm_utilities.put_line_log( 'g_request_id '|| g_request_id);
        --xxmm_utilities.put_line_log( 'conc_request_id '|| fnd_global.conc_request_id);
        xxmm_utilities.put_line_log( 'conc_request_id '|| xxmm_utilities.get_concurrent_request_id);
        --fnd_file.put_line (fnd_file.LOG, 'g_request_id '|| g_request_id);
        xxmm_utilities.put_line_log( 'g_request_id '|| g_request_id);
        IF instr(xxmm_utilities.get_conc_program_name, 'Bill Pay') > 0
        THEN
            l_report_title := 'Bill Pay';
        ELSE
            l_report_title := 'Intraday';
        END IF;
        --<< Sharath Yaski | 21-OCT-2019 | Project Moose

        IF NOT xxmm_lookup_utilities.lookup_code_exist (
                   NULL,
                   xxmm_constants.gc_err_code_lt,
                   g_itd_rct)
        THEN
            IF NVL (g_page_cnt, 0) > 1
            THEN
                -->>4.3.2 Sprint 3||Ridham||29-NOV-2017||Added Classification
                xxmm_utilities.put_line_output (CHR (10));
                xxmm_utilities.put_line_output (
                       '                                                           '
                    || xxmm_utilities.get_classification_mes (
                           xxmm_constants.gc_add_classification_mes)
                    || '  '
                    || CHR (13));
                --<<4.3.2 Sprint 3||Ridham||29-NOV-2017||Added Classification
                xxmm_utilities.put_line_output (CHR (12));
            END IF;
        END IF;

        get_fm_attributes (g_funding_method                                --,
                                           --nvl(g_input_source, xxmm_constants.gc_input_source_combo_canada)
                                           );


        xxmm_utilities.put_line_output (
               RPAD (LTRIM (RTRIM (g_ou_name)), 40, ' ') --'adp canada                                  '
            -->> Sharath Yaski | 21-OCT-2019 | Project Moose
            -- Change the Report title for Bill Pay Matching Process
            --|| 'IMMS Intraday Create Automatic Receipt Batches Execution Report           '
            || 'IMM ' || l_report_title || ' Create Automatic Receipt Batches Execution Report           '
            --<< Sharath Yaski | 21-OCT-2019 | Project Moose
            || 'Report Date: '
            -->> Project G'day | Ranjitha | 4-APr-2016 | Date to be displayed along with timezone
            --|| TO_CHAR (g_srv_sysdate, 'DD-MON-YYYY HH24:MI:SS')
            || l_report_date
            --<< Project G'day | Ranjitha | 4-APr-2016 | Date to be displayed along with timezone
            || CHR (13));

           -->> Project Theseus- Quartz Integration | Nethravathi R |02-Mar-2021| Added logic to get the user name instead of responibility name in the report for the qurtz requests>
      IF(xxmm_security_profile.is_qrtz_request )
      THEN
        l_resp_name := xxmm_utilities.get_user_fullname;
        --SELECT xu.first_name ||' ' || xu.last_name
                --INTO l_resp_name
                --FROM xxmm_user xu
                --WHERE lan_id = xxmm_utilities.get_user_name;

        xxmm_utilities.put_line_output (
                'User Name: '
            || RPAD (LTRIM (RTRIM (l_resp_name)), 73, ' ')
            || ' '
            || LPAD('Page:  ',24)
            || TO_CHAR (g_page_cnt)
            || CHR (13));
       ELSE
      --<< Project Theseus- Quartz Integration | <Nethravathi R> |02-Mar-2021
        xxmm_utilities.put_line_output (
               'Responsibility: '
            --|| RPAD (LTRIM (RTRIM (fnd_global.resp_name)), 50, ' ')
            || '                                                '
            || 'Page: '
            || TO_CHAR (g_page_cnt)
            || CHR (13));
       END IF;
        -->> PWR EU 15-600 || Arun Bacha || R Q3 || March 2016 || Added the condition so that the  receipt batch details are only added in the first page of execution report
        IF g_page_cnt = 1
        THEN
            --<< PWR EU 15-600 || Arun Bacha || R Q3 || March 2016 || Added the condition so that the  receipt batch details are only added in the first page of execution report
            xxmm_utilities.put_line_output (CHR (13));
            xxmm_utilities.put_line_output ('Summary:' || CHR (13));
            xxmm_utilities.put_line_output (CHR (13));

            --123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012
            xxmm_utilities.put_line_output (
                   'Country         Receipt Batch Number         Remit Pres  Funding Method Intended Settlement Bank         Batch Date  Receipt             Total Amount  '
                || CHR (13));
            xxmm_utilities.put_line_output (
                   '                                             Date                                                                    Count                            '
                || CHR (13));
            xxmm_utilities.put_line_output (
                   '--------------- ---------------------------- ----------- -------------- -------------------------------- ----------- ------- ------------------------ '
                || CHR (13));
        -->> PWR EU 15-600 || Arun Bacha || R Q3 || March 2016 || Added the condition so that the ORG exclusion heading is displayed in the second page
        ELSIF     g_page_cnt = 2
              AND xxmm_lookup_utilities.lookup_code_exist (
                      NULL,
                      g_org_acc_exclsn_rpt_lookup,
                      g_org_acc_report_header)
        THEN
            xxmm_utilities.put_line_output (' ' || CHR (13));
            xxmm_utilities.put_line_output (
                'Originator Account Exceptions:' || CHR (13));
        END IF;
    --<< PWR EU 15-600 || Arun Bacha || R Q3 || March 2016 || Added the condition so that the ORG exclusion heading is displayed in the second page
    --<< PWR EU 15-600 || Arun Bacha || R Q3 || March 2016 || Added the condition so that the  receipt batch details are only added in the first page of execution report
    END report_header_itd;



    PROCEDURE report_header_add
    IS
    --l_page_cnt      number          default 0;

    BEGIN
        xxmm_utilities.put_line_output (CHR (13));

        xxmm_utilities.put_line_output ('Summary: ' || CHR (13));

        xxmm_utilities.put_line_output (CHR (13));

        --123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012
        --    xxmm_utilities.put_line_output('batch number        funding method       remit pres date intended settlement bank       batch date  receipt     total amount  batch '
        --                                 ||chr(13));
        --    xxmm_utilities.put_line_output('                                                                                                    count                     created'
        --                                 ||chr(13));
        --    XXMM_UTILITIES.PUT_LINE_OUTPUT('------------------- -------------------- --------------- ------------------------------ ----------- ------- ----------------- -------'
        --                                 ||CHR(13));


        --123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012
        xxmm_utilities.put_line_output (
               'Country         Receipt Batch Number    Remit Pres  Intended Settlement Bank         Batch Date  Receipt             Total Amount Batch  '
            || CHR (13));
        xxmm_utilities.put_line_output (
               '                                        Date                                                     Count                            Created'
            || CHR (13));
        xxmm_utilities.put_line_output (
               '----------      ----------------------- ----------- -------------------------------- ----------- ------- ------------------------ -------'
            || CHR (13));
    END report_header_add;

    ----------------------------------------------------------------------------------
    --
    -- Procedure:    report_footer_itd
    --
    --
    --
    --  -- This procedure report footer on output file
    --
    --+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    --
    --  Created By        Date         Description
    --   Karen Jiang     June 2,2014  PWR A-10-1009
    -----------------------------------------------------------------------------------
    PROCEDURE report_footer_itd
    IS
    BEGIN
        xxmm_utilities.put_line_output (
            '                                            ' || CHR (13));

        xxmm_utilities.put_line_output (
               '                                                      **** End Of Report****'
            || CHR (13));
        -->>4.3.2 Sprint 3||Ridham||29-NOV-2017||Added Classification
        xxmm_utilities.put_line_output (
               CHR (10)
            || '                                                           '
            || xxmm_utilities.get_classification_mes (
                   xxmm_constants.gc_add_classification_mes)
            || '  '
            || CHR (13));
    --<<4.3.2 Sprint 3||Ridham||29-NOV-2017||Added Classification
    END report_footer_itd;

    PROCEDURE report_batch_detail (
        p_batch_number          IN VARCHAR2,
        p_funding_method        IN VARCHAR2,
        p_premit_date           IN DATE,
        p_int_stlmt_bank        IN VARCHAR2,
        p_batch_date            IN DATE,
        p_flag                  IN VARCHAR2,
        p_country               IN VARCHAR2,
        p_inten_stlmt_account   IN VARCHAR2 DEFAULT NULL             --fp66978
                                                        )
    IS
        l_rec_cnt           NUMBER DEFAULT NULL;
        l_amt               NUMBER DEFAULT NULL;
        l_imp_amt           NUMBER DEFAULT NULL;
        l_country_meaning   VARCHAR2 (150) DEFAULT NULL;
    BEGIN
        BEGIN
            SELECT COUNT (1),
                   SUM (NVL (receipt_amount, 0)),
                   SUM (NVL (applied_amount, 0))
              INTO l_rec_cnt, l_amt, l_imp_amt
              FROM xxmm_receipts
             WHERE receipt_batch_id =
                       (SELECT receipt_batch_id
                          FROM xxmm_receipt_batches
                         WHERE receipt_batch_number = p_batch_number);
        EXCEPTION
            WHEN OTHERS
            THEN
                --FP66978
                BEGIN
                    SELECT COUNT (1),
                           SUM (NVL (receipt_amount, 0)),
                           SUM (NVL (applied_amount, 0))
                      INTO l_rec_cnt, l_amt, l_imp_amt
                      FROM xxmm_receipts
                     WHERE receipt_batch_id =
                               (SELECT receipt_batch_id
                                  FROM xxmm_receipt_batches r
                                 WHERE     receipt_batch_number =
                                               p_batch_number
                                       AND EXISTS
                                               (SELECT NULL
                                                  FROM xxmm_bank_accounts
                                                 WHERE     bank_account_id =
                                                               r.bank_acc_id_intended_stlmt
                                                       AND account_number =
                                                               p_inten_stlmt_account));
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        l_amt := 0;
                END;
        --FP66978
        --l_amt   := 0;
        END;

        g_line_cnt := NVL (g_line_cnt, 0) + 1;

        IF NVL (g_line_cnt, 0) > 30
        THEN
            report_header;
            report_header_add;
            g_line_cnt := 1;
        END IF;


        l_country_meaning :=
            xxmm_lookup_utilities.get_translated_code (
                NULL,
                xxmm_constants.gc_country_lt,
                p_country,
                'Y');

        xxmm_utilities.put_line_output (
               RPAD (SUBSTR (NVL (l_country_meaning, p_country), 1, 15),
                     15,
                     ' ')
            || ' '
            || RPAD (p_batch_number, 23, ' ')
            || ' '
            || RPAD (TO_CHAR (p_premit_date, 'DD-MON-YYYY'), 11, ' ')
            || ' '
            || RPAD (p_int_stlmt_bank, 32, ' ')
            || ' '
            || TO_CHAR (xxmm_timezones.get_ou_date (p_batch_date),
                        'DD-MON-YYYY')
            || ' '
            || LPAD (TO_CHAR (NVL (l_rec_cnt, 0)), 7, ' ')
            || ' '
            || LPAD (TO_CHAR (NVL (l_imp_amt, 0), '9999,999,999,999,990.00'),
                     24,
                     ' ')
            || ' '
            || p_flag
            || CHR (13));

        g_summary_cnt := NVL (g_summary_cnt, 0) + 1;                 --FT#6579
    END report_batch_detail;

    ----------------------------------------------------------------------------------
    --
    -- Procedure:     report_batch_detail_itd
    --
    --
    --
    -- This procedure report detail on the output file
    --
    --+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    --
    --  Created By        Date         Description
    --   Karen Jiang     June 2,2014  PWR A-10-1009
    -----------------------------------------------------------------------------------
    PROCEDURE report_batch_detail_itd (p_receipt_batch_id IN VARCHAR2)
    IS
        l_rec_cnt                NUMBER DEFAULT NULL;
        l_amt                    NUMBER DEFAULT NULL;
        l_imp_amt                NUMBER DEFAULT NULL;
        l_country_meaning        VARCHAR2 (150) DEFAULT NULL;
        l_receipt_batch_number   xxmm_receipt_batches.receipt_batch_number%TYPE;
        l_fm_descr               xxmm_lookups.meaning%TYPE DEFAULT NULL;
        l_receipt_batch_date     xxmm_receipt_batches.receipt_batch_date%TYPE;
        l_country                xxmm_receipt_batches.country%TYPE;
        l_bank_account           VARCHAR2 (200);
        -->>Project G'day | Ranjitha | 11-APR-2016 | Fetch Remit Presentation Date
        l_remit_date             xxmm_receipt_batches.remittance_due_date%TYPE;
    --<<Project G'day | Ranjitha | 11-APR-2016 | Fetch Remit Presentation Date
    BEGIN
        SELECT xrb.receipt_batch_number,
               -->> Project G'day | Ranjitha | 11-APR-2016 | Fetch receipt date based on the client timezone
               xxmm_timezones.get_ou_date (xrb.receipt_batch_date, g_org_id),
               --<< Project G'day | Ranjitha | 11-APR-2016 | Fetch receipt date based on the client timezone
               xrb.country,
               xlv.meaning,
                  TRIM (xbb.bank_number)
               || ' '
               || TRIM (xbb.bank_branch_number)
               || ' '
               || TRIM (xba.account_number),
               -->>Project G'day | Ranjitha | 11-APR-2016 | Fetch Remit Presentation Date
               TO_CHAR (xrb.remittance_due_date, 'DD-MON-RRRR')
          --<<Project G'day | Ranjitha | 11-APR-2016 | Fetch Remit Presentation Date
          INTO l_receipt_batch_number,
               l_receipt_batch_date,
               l_country,
               l_fm_descr,
               l_bank_account,
               l_remit_date
          FROM xxmm_receipt_batches xrb,
               xxmm_lookups_v xlv,
               xxmm_bank_accounts xba,
               xxmm_bank_branches xbb
         WHERE     xrb.receipt_batch_id = p_receipt_batch_id
               AND lookup_type = xxmm_constants.gc_funding_method_lt
               AND lookup_code = xrb.funding_method
               AND enabled_flag = 'Y'
               AND TRUNC (SYSDATE) BETWEEN TRUNC (start_date_active)
                                       AND TRUNC (
                                               NVL (end_date_active, SYSDATE))
               AND xba.bank_account_id = xrb.bank_acc_id_intended_stlmt
               AND xbb.bank_branch_id = xba.bank_branch_id;

        log_file (
               'XXMM=> starting report_batch_detail_itd with batch_id: '
            || p_receipt_batch_id
            || 'for report IMMS Intraday Create Automatic Receipt Batches');

        SELECT COUNT (1), SUM (NVL (receipt_amount, 0))
          INTO l_rec_cnt, l_amt
          FROM xxmm_receipts
         WHERE receipt_batch_id = p_receipt_batch_id;


        l_country_meaning :=
            xxmm_lookup_utilities.get_translated_code (
                NULL,
                xxmm_constants.gc_country_lt,
                l_country,
                'Y');

        xxmm_utilities.put_line_output (
               RPAD (SUBSTR (NVL (l_country_meaning, l_country), 1, 15),
                     15,
                     ' ')
            || ' '
            || RPAD (l_receipt_batch_number, 28, ' ')
            || ' '
            -->>Project G'day | Ranjitha | 11-APR-2016 | Fetch Remit Presentation Date instead of sysdate
            --|| RPAD (TO_CHAR (SYSDATE, 'DD-MON-YYYY'), 11, ' ')
            || RPAD (TO_CHAR (l_remit_date, 'DD-MON-RRRR'), 11, ' ')
            --<<Project G'day | Ranjitha | 11-APR-2016 | Fetch Remit Presentation Date instead of sysdate
            || ' '
            || RPAD (l_fm_descr, 14, ' ')
            || ' '
            || RPAD (l_bank_account, 32, ' ')
            || ' '
            || TO_CHAR (l_receipt_batch_date, 'DD-MON-YYYY')
            || ' '
            || LPAD (TO_CHAR (NVL (l_rec_cnt, 0)), 7, ' ')
            || ' '
            || LPAD (TO_CHAR (NVL (l_amt, 0), '9999,999,999,999,990.00'),
                     24,
                     ' ')
            || CHR (13));
    EXCEPTION
        WHEN OTHERS
        THEN
            NULL;
    END report_batch_detail_itd;

    /*
        ************************************************************************
        *            COPYRIGHT (c) 2010 ADP Canada, Financial Systems          *
        ************************************************************************
        *                                                                      *
        * Module Name  : report_itd_org_exclusions                                        *
        * Module Type  : PL/SQL Procedure                                      *
        * Purpose      : Procedure to print all the ORG exclusions in the report  *
        ************************************************************************
        *                            BIBLIOGRAPHY                              *
        ************************************************************************
        *                                                                      *
        ************************************************************************
        *   Date       |      Author          |  SCR    | Remarks              *
        ************************************************************************
        * 01/03/2016    Arun Bacha             R Q3 PWR EU 15-600                                                        *
        ************************************************************************
        */

    PROCEDURE report_itd_org_exclusions
    IS
        l_line_number     NUMBER := 1;
        l_lines_in_page   NUMBER := 59;
        l_empty_lines     NUMBER := 58;

        CURSOR itd_report_org (p_category IN VARCHAR2)
        IS
            SELECT *
              FROM xxmm_itd_report_gtt
             WHERE org_category = p_category;
    BEGIN
        -->> Loop and print empty lines to take the cursor to the next page
        IF g_itd_rpt_trx_cnt > 0
        THEN
            l_empty_lines :=
                  l_empty_lines
                - g_batch_count     -->> FP65679 | Sharath Yaski | 21-JUL-2017
                -- Automatic Intraday Credit Push Receipt Created for Incorrect Control
                -- Subtracting the Consolidated Impound Lines printed from XXMM_CREATE_INTRADAY_RECEIPTS package
                - xxmm_create_intraday_receipts.g_consolidated_line_count;
            --<< FP65679 | Sharath Yaski | 21-JUL-2017
            -->>4.3.2 Sprint 6||Ridham||3-Jan-2018||Added Classification
            xxmm_utilities.put_line_output (' ' || CHR (10));
            xxmm_utilities.put_line_output (
                   '                                                           '
                || xxmm_utilities.get_classification_mes (
                       xxmm_constants.gc_add_classification_mes)
                || '  '
                || CHR (13));

            --<<4.3.2 Sprint 6||Ridham||3-Jan--20178|Added Classification
            FOR i IN 1 .. l_empty_lines
            LOOP
                xxmm_utilities.put_line_output (' ' || CHR (13));
            END LOOP;

            -->> Loop and print empty lines to take the cursor to the next page
            FOR r_exclusion_category IN (SELECT DISTINCT org_category
                                           FROM xxmm_itd_report_gtt)
            LOOP
                -->> If the lines remaining in the page are more than 7 the print the below code, else loop over till it reaches next page
                IF     (MOD (l_line_number, l_lines_in_page) <
                            (l_lines_in_page - 7))
                   AND l_line_number <> 1
                THEN
                    xxmm_utilities.put_line_output (' ' || CHR (13));
                    xxmm_utilities.put_line_output (
                           xxmm_lookup_utilities.get_translated_code (
                               NULL,
                               g_org_acc_exclsn_rpt_lookup,
                               r_exclusion_category.org_category)
                        || CHR (13));
                    xxmm_utilities.put_line_output (' ' || CHR (13));
                    xxmm_utilities.put_line_output (
                           xxmm_lookup_utilities.get_translated_code (
                               NULL,
                               g_org_acc_exclsn_rpt_lookup,
                               g_org_acc_report_header)
                        || CHR (13));
                    xxmm_utilities.put_line_output (
                           xxmm_lookup_utilities.get_translated_code (
                               NULL,
                               g_org_acc_exclsn_rpt_lookup,
                               g_org_acc_report_header_line2)
                        || CHR (13));
                    l_line_number := l_line_number + 5;
                -->> If the lines remaining in the page are more than 7 the print the below code, else loop over till it reaches next page
                ELSIF MOD (l_line_number, l_lines_in_page) >
                          (l_lines_in_page - 7)
                THEN
                    -->>4.3.2 Sprint 6||Ridham||3-Jan-2018||Added Classification
                    xxmm_utilities.put_line_output (' ' || CHR (10));
                    xxmm_utilities.put_line_output (
                           '                                                           '
                        || xxmm_utilities.get_classification_mes (
                               xxmm_constants.gc_add_classification_mes)
                        || '  '
                        || CHR (13));

                    --<<4.3.2 Sprint 6||Ridham||3-Jan--20178|Added Classification
                    FOR r IN 0 ..
                             (  l_lines_in_page
                              - MOD (l_line_number, l_lines_in_page))
                    LOOP
                        xxmm_utilities.put_line_output (' ' || CHR (13));
                        l_line_number := l_line_number + 1;
                    END LOOP;
                END IF;

                --Loop to get all the transactions of a particular category
                FOR r_itd_report
                    IN itd_report_org (r_exclusion_category.org_category)
                LOOP
                    -- If it is a new page display the headers
                    IF MOD (l_line_number, l_lines_in_page) = 1
                    THEN
                        report_header_itd;

                        IF g_page_cnt = 2
                        THEN
                            l_line_number := l_line_number + 2;
                        END IF;

                        xxmm_utilities.put_line_output (' ' || CHR (13));

                    -->> START 26-MAY-2020  George Felian       IMM 20-253 UK Intraday Receipt Logic
                    -- Add extra heading
                    --xxmm_utilities.put_line_output (' ' || CHR (13));
                     xxmm_utilities.put_line_output(
                             xxmm_lookup_utilities.get_code_attribute('NULL',
                                g_org_acc_exclsn_rpt_lookup,
                               r_exclusion_category.org_category,
                               g_org_acc_exclsn_rpt_lookup,
                                'ATTRIBUTE1')
                          ||  CHR (13));
                        --<< END  26-MAY-2020  George Felian       IMM 20-253 UK Intraday Receipt Logic
                        xxmm_utilities.put_line_output (
                               xxmm_lookup_utilities.get_translated_code (
                                   NULL,
                                   g_org_acc_exclsn_rpt_lookup,
                                   r_exclusion_category.org_category)
                            || CHR (13));
                        xxmm_utilities.put_line_output (' ' || CHR (13));
                        xxmm_utilities.put_line_output (
                               xxmm_lookup_utilities.get_translated_code (
                                   NULL,
                                   g_org_acc_exclsn_rpt_lookup,
                                   g_org_acc_report_header)
                            || CHR (13));
                        xxmm_utilities.put_line_output (
                               xxmm_lookup_utilities.get_translated_code (
                                   NULL,
                                   g_org_acc_exclsn_rpt_lookup,
                                   g_org_acc_report_header_line2)
                            || CHR (13));
                    END IF;

                    l_line_number := l_line_number + 1;
                    xxmm_utilities.put_line_output (
                           RPAD (NVL (r_itd_report.bank_org_account, ' '),
                                 31,
                                 ' ')
                        || RPAD (NVL (r_itd_report.control_number, ' '),
                                 16,
                                 ' ')
                        || ' '
                        || RPAD (NVL (r_itd_report.control_name, ' '),
                                 42,
                                 ' ')
                        || ' '
                        || RPAD (NVL (r_itd_report.control_org_account, ' '),
                                 31,
                                 ' ')
                        || CHR (13));
                END LOOP;
            END LOOP;
        END IF;

        IF g_no_bank_org_trn_cnt > 0
        THEN
            -- If there are less than 2 lines in the page then loop over to reach the next page and print the header again
            IF MOD (l_line_number, l_lines_in_page) > (l_lines_in_page - 2)
            THEN
                FOR i IN MOD (l_line_number, l_lines_in_page) ..
                         l_lines_in_page
                LOOP
                    xxmm_utilities.put_line_output (' ' || CHR (13));
                END LOOP;

                report_header_itd;
            END IF;

            xxmm_utilities.put_line_output (' ' || CHR (13));
            xxmm_utilities.put_line_output (
                   'Transaction Count - Null/Missing Originator Account: '
                || g_no_bank_org_trn_cnt
                || CHR (13));
        END IF;
    EXCEPTION
        WHEN OTHERS
        THEN
            NULL;
    END report_itd_org_exclusions;


    ----------------------------------------------------------------------------------
    --
    -- Procedure:     ITD_REPORT
    --
    --
    --
    -- This procedure generate ITD phase execution report
    --
    --+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    --
    --  Created By        Date         Description
    --   Karen Jiang     June 2,2014  PWR A-10-1009
    -----------------------------------------------------------------------------------
    PROCEDURE itd_report (p_inbound_file_id NUMBER)
    IS
        CURSOR c_itd_receipt_batch
        IS
              SELECT DISTINCT receipt_batch_id
                FROM xxmm_itd_cp_receipt_stag
               WHERE inbound_file_id = p_inbound_file_id
            ORDER BY receipt_batch_id;
    BEGIN
        report_header_itd;

        FOR r_itd_receipt_batch IN c_itd_receipt_batch
        LOOP
            g_batch_count := g_batch_count + 1;
            report_batch_detail_itd (r_itd_receipt_batch.receipt_batch_id);
        END LOOP;

        -->> PWR EU 15-600 || Arun Bacha || R Q3 || March 2016 || Added the condition to call the exclusions report program for FR and NL
        IF xxmm_lookup_utilities.lookup_code_exist (
               NULL,
               xxmm_constants.gc_err_code_lt,
               g_itd_rct)
        THEN
            -->>4.3.2 Sprint 6||Ridham||3-Jan-2018||Added Classification
            xxmm_utilities.put_line_output (CHR (10));
            xxmm_utilities.put_line_output (
                   '                                                           '
                || xxmm_utilities.get_classification_mes (
                       xxmm_constants.gc_add_classification_mes)
                || '  '
                || CHR (13));
            --<<4.3.2 Sprint 6||Ridham||3-Jan--20178|Added Classification
            report_itd_org_exclusions;
        END IF;

        --<< PWR EU 15-600 || Arun Bacha || R Q3 || March 2016 || Added the condition to call the exclusions report program for FR and NL
        report_footer_itd;
    END itd_report;


    PROCEDURE report_batch_excp_header (p_country   IN VARCHAR2,
                                        p_bank      IN VARCHAR2)
    IS
    BEGIN
        IF NVL (g_line_cnt, 0) > 25
        THEN
            report_header;
            g_line_cnt := 1;
        END IF;


        xxmm_utilities.put_line_output (CHR (13));

        xxmm_utilities.put_line_output (
               'Country: '
            || RPAD (p_country, 27, ' ')
            || 'Intended Settlement Bank: '
            || RPAD (p_bank, 30, ' ')
            || CHR (13));

        xxmm_utilities.put_line_output (CHR (13));
        --123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012

        xxmm_utilities.put_line_output (
               'Hold/Warning Reasons                Notes                                                                                                                                   '
            || CHR (13));
        xxmm_utilities.put_line_output (
               '----------------------------------- ----------------------------------------------------------------------------------------------------------------------------------------'
            || CHR (13));

        g_line_cnt := NVL (g_line_cnt, 0) + 5;
    END report_batch_excp_header;


    PROCEDURE report_batch_exceptions
    IS
        l_cnt            NUMBER DEFAULT NULL;
        l_lst_country    VARCHAR2 (150) DEFAULT NULL;
        l_lst_batch      VARCHAR2 (150) DEFAULT NULL;
        l_first          BOOLEAN DEFAULT TRUE;
        l_program_unit   VARCHAR2 (100)
                             := g_package_name || '.REPORT_BATCH_EXCEPTIONS';


        CURSOR c_exc_msg (
            p_request_id   IN NUMBER)
        IS
              SELECT xl1.meaning country,
                     DECODE (INSTR (xch.notes, '~'),
                             '0', NULL,
                             SUBSTR (xch.notes, 1, INSTR (xch.notes, '~') - 1))
                         inten_stlmt_bank,
                     xlv.lookup_code,
                     xlv.meaning hold_meaning,
                     DECODE (INSTR (xch.notes, '~'),
                             '0', xch.notes,
                             SUBSTR (xch.notes, INSTR (xch.notes, '~') + 1))
                         hold_notes
                FROM xxmm_cts_holds xch,
                     xxmm_lookups_v xlv,
                     xxmm_cts_headers xcc,
                     xxmm_lookups_v xl1
               WHERE     xch.concurrent_request_id = p_request_id
                     AND xch.release_code IS NULL
                     AND xcc.cts_header_id = xch.cts_header_id
                     AND xch.category = g_hold_catg_rec
                     AND xlv.lookup_code = xch.hold_code
                     AND xlv.lookup_type = xxmm_constants.gc_hold_rel_warn_lt
                     AND xl1.lookup_type = xxmm_constants.gc_country_lt --'xxmm_country'
                     AND xl1.lookup_code = xcc.country
            ORDER BY country,
                     inten_stlmt_bank,
                     hold_meaning,
                     hold_notes;

        r_exc_msg        c_exc_msg%ROWTYPE;
    BEGIN
        log_message ('Starting >> ' || l_program_unit);
        log_file ('Starting >> ' || l_program_unit);

        l_cnt := 0;

        report_header;

        xxmm_utilities.put_line_output (CHR (13));

        xxmm_utilities.put_line_output ('Exceptions: ' || CHR (13));

        xxmm_utilities.put_line_output (CHR (13));

        g_line_cnt := NVL (g_line_cnt, 0) + 3;


        FOR r_exc_msg IN c_exc_msg (g_request_id)
        LOOP
            l_cnt := NVL (l_cnt, 0) + 1;


            IF l_first
            THEN
                report_batch_excp_header (r_exc_msg.country,
                                          r_exc_msg.inten_stlmt_bank);
                l_lst_country := r_exc_msg.country;
                l_lst_batch := r_exc_msg.inten_stlmt_bank;
                l_first := FALSE;
            END IF;


            IF    l_lst_country <> r_exc_msg.country
               OR l_lst_batch <> r_exc_msg.inten_stlmt_bank
            THEN
                report_batch_excp_header (r_exc_msg.country,
                                          r_exc_msg.inten_stlmt_bank);
                l_lst_country := r_exc_msg.country;
                l_lst_batch := r_exc_msg.inten_stlmt_bank;
            ELSE
                g_line_cnt := NVL (g_line_cnt, 0) + 1;

                IF NVL (g_line_cnt, 0) > 30
                THEN
                    report_header;
                    report_batch_excp_header (r_exc_msg.country,
                                              r_exc_msg.inten_stlmt_bank);
                    g_line_cnt := 1;
                END IF;


                xxmm_utilities.put_line_output (
                       SUBSTR (RPAD (r_exc_msg.hold_meaning, 35, ' '), 1, 35)
                    || ' '
                    || r_exc_msg.hold_notes
                    || CHR (13));
            END IF;
        END LOOP;


        IF (g_summary_cnt = 0)
        THEN
            xxmm_utilities.put_line_output (CHR (13));
            xxmm_utilities.put_line_output (
                   '                                                      **** No Data Found ****'
                || CHR (13));
            -- xxmm_utilities.put_line_output (CHR (13));
            -->>4.3.2 Sprint 3||Ridham||29-NOV-2017||Added Classification
            xxmm_utilities.put_line_output (
                   CHR (10)
                || '                                                           '
                || xxmm_utilities.get_classification_mes (
                       xxmm_constants.gc_add_classification_mes)
                || '  '
                || CHR (13));
        --<<4.3.2 Sprint 3||Ridham||29-NOV-2017||Added Classification
        ELSE
            IF NVL (g_line_cnt, 0) > 0
            THEN
                xxmm_utilities.put_line_output (CHR (13));
                xxmm_utilities.put_line_output (
                       '                                                      **** End Of Report ****'
                    || CHR (13));
                -->>4.3.2 Sprint 3||Ridham||29-NOV-2017||Added Classification
                xxmm_utilities.put_line_output (
                       CHR (10)
                    || '                                                           '
                    || xxmm_utilities.get_classification_mes (
                           xxmm_constants.gc_add_classification_mes)
                    || '  '
                    || CHR (13));
            --<<4.3.2 Sprint 3||Ridham||29-NOV-2017||Added Classification
            END IF;
        END IF;

        /*    else

                    xxmm_utilities.put_line_output( chr(13));
                    xxmm_utilities.put_line_output('                                                      **** No Data Found ****'||chr(13));
                    xxmm_utilities.put_line_output( chr(13));


            end if; */

        log_message ('Ending >> ' || l_program_unit);
        log_file ('Ending >> ' || l_program_unit);
    END report_batch_exceptions;

    ----------------------------------------------------------------------------------
    --
    -- proecdure:     main
    --
    -- inputs:
    --
    --
    --
    --+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    --
    --  modified by        date         description
    --
    -----------------------------------------------------------------------------------
    PROCEDURE main (
        p_country                IN     xxmm_cts_headers.country%TYPE DEFAULT NULL,
        p_input_source           IN     xxmm_cts_headers.input_source%TYPE DEFAULT NULL,
        p_funding_method         IN     xxmm_cts_impound_trx.funding_method%TYPE DEFAULT NULL,
        p_bank_acc_inten_stlmt   IN     xxmm_bank_accounts.account_name%TYPE DEFAULT NULL,
        p_remit_thru_date        IN     xxmm_receipt_batches.remittance_due_date%TYPE DEFAULT NULL,
        p_control                IN     xxmm_customer_controls.control_number%TYPE DEFAULT NULL,
        p_impound_number_from    IN     xxmm_cts_impound_trx.impound_trx_number%TYPE DEFAULT NULL,
        p_impound_number_to      IN     xxmm_cts_impound_trx.impound_trx_number%TYPE DEFAULT NULL,
        p_batch_id               IN     xxmm_receipt_batches.receipt_batch_id%TYPE DEFAULT NULL,
        p_cnt                       OUT NUMBER,
        p_text                      OUT VARCHAR2)
    IS
        --
        l_request_id                   NUMBER;
        l_message                      VARCHAR2 (2000) DEFAULT NULL;
        l_first_rec                    BOOLEAN DEFAULT TRUE;
        l_last_country                 xxmm_cts_headers.country%TYPE DEFAULT NULL;
        l_last_input_source            xxmm_cts_headers.input_source%TYPE DEFAULT NULL;
        l_last_control_number          xxmm_customer_controls.control_number%TYPE
                                           DEFAULT NULL;
        l_last_funding_method          xxmm_cts_impound_trx.funding_method%TYPE
                                           DEFAULT NULL;
        l_last_intended_stlmt_bank     VARCHAR2 (150) DEFAULT NULL;
        l_last_remit_due_date          DATE DEFAULT NULL;
        l_last_impound_currency        xxmm_cts_impound_trx.receipt_currency%TYPE
            DEFAULT NULL;
        l_last_inten_stlmt_bank        xxmm_bank_branches.bank_number%TYPE
                                           DEFAULT NULL;
        l_last_inten_stlmt_branch      xxmm_bank_branches.bank_branch_number%TYPE
            DEFAULT NULL;
        l_last_inten_stlmt_account     xxmm_bank_accounts.account_number%TYPE
                                           DEFAULT NULL;
        l_last_inten_stlmt_name        xxmm_bank_accounts.account_name%TYPE
                                           DEFAULT NULL;
        l_last_impound_type            xxmm_lookups.lookup_code%TYPE
                                           DEFAULT NULL;
        --      l_last_inten_bank_account_id     xxmm_bank_accounts.bank_account_id%TYPE
        --                                        DEFAULT NULL;

        -->>Project G'Day (Australia) Sprint 5||Muhammad Imran Qureshi ||20-APR-2016

        l_last_imp_due_date            xxmm_cts_impound_trx.impound_due_date%TYPE
            DEFAULT NULL;
        l_last_imp_bank                xxmm_cts_impound_trx.impound_bank%TYPE
                                           DEFAULT NULL;
        l_last_imp_branch              xxmm_cts_impound_trx.impound_branch%TYPE
                                           DEFAULT NULL;
        l_last_imp_account             xxmm_cts_impound_trx.impound_account%TYPE
            DEFAULT NULL;

        --<<Project G'Day (Australia) Sprint 5||Muhammad Imran Qureshi ||20-APR-2016


        l_cnt                          NUMBER DEFAULT 0;
        l_imp_amount                   NUMBER DEFAULT 0;
        l_msg                          VARCHAR2 (2000) DEFAULT NULL;
        l_program_unit                 VARCHAR2 (100)
                                           := g_package_name || '.MAIN';
        l_receipt_cnt                  NUMBER DEFAULT 0;
        l_impound_bank                 VARCHAR2 (30) DEFAULT NULL;

        l_remittance_due_date          xxmm_receipt_batches.remittance_due_date%TYPE
            DEFAULT NULL;
        l_receipt_currency             xxmm_receipt_batches.receipt_currency%TYPE
            DEFAULT NULL;
        l_impound_currency             xxmm_receipt_batches.impound_currency%TYPE
            DEFAULT NULL;
        l_exchange_rate                xxmm_receipt_batches.adp_exch_rate%TYPE
                                           DEFAULT NULL;
        l_bank_acc_id_intended_stlmt   xxmm_receipt_batches.bank_acc_id_intended_stlmt%TYPE
            DEFAULT NULL;
        l_country                      xxmm_receipt_batches.country%TYPE
                                           DEFAULT NULL;

        l_bank_acc_id_final_stlmt      xxmm_receipt_batches.bank_acc_id_final_stlmt%TYPE
            DEFAULT NULL;


        l_spread_tier                  VARCHAR2 (30) DEFAULT NULL;
        l_spread_rate                  NUMBER DEFAULT NULL;
        l_index                        NUMBER DEFAULT 0;

        l_add_receipts                 BOOLEAN DEFAULT FALSE;
        l_insert_receipt               BOOLEAN DEFAULT FALSE;
        l_create_receipt               BOOLEAN DEFAULT FALSE;

        l_inv_impound                  BOOLEAN DEFAULT TRUE;
        l_skip_trans                   BOOLEAN DEFAULT FALSE;
        l_create_cons_receipt          BOOLEAN DEFAULT FALSE;
        l_upd_last_receipt             BOOLEAN DEFAULT FALSE;
        l_app_amount                   NUMBER DEFAULT 0;
        l_rem_amount                   NUMBER DEFAULT 0;
        l_tot_amount                   NUMBER DEFAULT 0;
        l_skip_impound                 BOOLEAN; --09-Mar-2023 Variable declaration for FP70355
    BEGIN
        g_cnt := 0;

        log_message ('Starting >> ' || l_program_unit);
        log_file ('Starting >> ' || l_program_unit);

        -->> Project G'day | ranjitha | 4-APR-2106| Declaring it as constant global variable.Hence not requried here
         g_org_id := xxmm_utilities.get_org_id;
        --<< Project G'day | ranjitha | 4-APR-2106| Declaring it as constant global variable.Hence not requried here
        log_message ('Organization Id is  ' || g_org_id);
        log_file ('Organization Id is  ' || g_org_id);

        g_country := p_country;
        g_input_source := p_input_source;
        g_funding_method := p_funding_method;
        g_bank_acc_inten_stlmt := p_bank_acc_inten_stlmt;
        g_remit_thru_date := p_remit_thru_date;
        g_control := p_control;
        g_impound_number_from := p_impound_number_from;
        g_impound_number_to := p_impound_number_to;

        IF p_batch_id IS NOT NULL
        THEN
            -- log_file ('aaaaaaaa');

            l_add_receipts := TRUE;
            g_batch_id := p_batch_id;

            IF NOT get_batch_details (p_batch_id,
                                      l_remittance_due_date,
                                      l_receipt_currency,
                                      l_impound_currency,
                                      l_exchange_rate,
                                      l_bank_acc_id_intended_stlmt,
                                      l_country,
                                      g_funding_method                      --
                                                      ,
                                      l_bank_acc_id_final_stlmt             --
                                                               )
            THEN
                -- log_file ('bbbbbbbb');


                l_msg :=
                       'ERROR!!, Could not find batch to add receipts for the receipt_batch_id '
                    || TO_CHAR (p_batch_id);
                log_error (l_msg, xxmm_constants.msg_type_error);
                log_file (l_msg);
                p_cnt := 0;
                p_text := l_msg;
                raise_application_error (-20021, l_msg);
            ELSE
                --
                -- get funding method attributes.
                --

                get_fm_attributes (g_funding_method);
            END IF;
        -- log_file ('cccccccc');

        ELSE
            l_add_receipts := FALSE;
        -- log_file ('dddddddd');



        END IF;

        -->>UAT7075 | Mamtha Babu | 20-NOV-2012
        --g_clt_sysdate is used in function validate_parameter and so it needs to be set to sysdate before the validations
        -->> Project G'day | ranjitha | 4-APR-2106| Declaring it as constant global variable.Hence not requried here
        -- g_clt_sysdate := SYSDATE; --xxmm_utilities.convert_date_tz ( sysdate, g_srv_tmz_Code , g_clt_tmz_Code, 'Y' );
        --<< Project G'day | ranjitha | 4-APR-2106| Declaring it as constant global variable.Hence not requried here
        --<<UAT7075 | Mamtha Babu | 20-NOV-2012


        IF NOT validate_parameter
        THEN
            log_file ('Entered parameters are not valid.');
            log_error ('Entered parameters are not valid.',
                       xxmm_constants.msg_type_error);
            raise_application_error (-20022,
                                     'Entered parameters are not valid.');
        END IF;

        g_srv_sysdate := SYSDATE;
        -->>UAT7075 | Mamtha Babu | 20-NOV-2012
        --g_clt_sysdate is used in function validate_parameter and so it needs to be set to sysdate before the validations. Commenting it here and adding it above
        --g_clt_sysdate           :=  sysdate; --xxmm_utilities.convert_date_tz ( sysdate, g_srv_tmz_Code , g_clt_tmz_Code, 'Y' );
        --<<UAT7075 | Mamtha Babu | 20-NOV-2012

        --log_file('the system date in Client Time zone is '||To_Char(g_clt_sysdate, 'DD-MON-YYYY HH24:MI:SS'));

        ---
        ---Start Muhammad 30-APR-2020 FP-68313 to minimize fnd_file I/O
        ---

            xxmm_utilities.set_client_timezone (g_clt_tmz_id);

            g_clt_tmz_code := xxmm_timezones.get_client_timezone_code;

        log_file ('the Client Time zone is ' || TO_CHAR (g_clt_tmz_code));

        ---
        ---End Muhammad 30-APR-2020 FP-68313 to minimize fnd_file I/O
        ---

        report_header;
        report_header_add;
        --
        -- get max receipt count and amount for debit pull and usrw funding method
        --


        g_batch_impound_amount := 0;
        g_batch_imp_trx_amount := 0;
        g_receipt_cnt := 0;
        l_receipt_cnt := 0;
        l_index := 0;


        IF g_sel_imp%ISOPEN
        THEN
            CLOSE g_sel_imp;
        END IF;

        IF g_sel_imp1%ISOPEN
        THEN
            CLOSE g_sel_imp1;
        END IF;


        log_file ('BEFORE Cursor Openeing');


        IF g_funding_method = xxmm_constants.gc_credit_push_fund_meth
        THEN
            log_file ('Openeing Credit Push Cursor');

            OPEN g_sel_imp1 (g_country,
                             g_input_source,
                             g_funding_method,
                             g_bank_acc_inten_stlmt,
                             g_remit_thru_date,
                             g_control,
                             g_impound_number_from,
                             g_impound_number_to);
        -->> Sharath Yaski | 29-OCT-2019 | Project Moose
        -- Bill Pay changes
        ELSIF g_funding_method = xxmm_constants.gc_bill_pay_fund_meth
        THEN
            log_file ('Openeing Credit Push Cursor');

            OPEN g_sel_imp1 (g_country,
                             g_input_source,
                             g_funding_method,
                             g_bank_acc_inten_stlmt,
                             g_remit_thru_date,
                             g_control,
                             g_impound_number_from,
                             g_impound_number_to);
        --<< Sharath Yaski | 29-OCT-2019 | Project Moose
        ELSE
            log_file ('Openeing Debit Pull Cursor');

            OPEN g_sel_imp (g_country,
                            g_input_source,
                            g_funding_method,
                            g_bank_acc_inten_stlmt,
                            g_remit_thru_date,
                            g_control,
                            g_impound_number_from,
                            g_impound_number_to);
        END IF;


        log_file ('AFTER Cursor Open');

        --fnd_file.put_line(fnd_file.log, '1111');



        --log_file ('before impound loop...........');
        /*
        for     r_sel_imp   in  g_sel_imp (     g_country,
                                                g_input_source,
                                                g_funding_method,
                                                g_bank_acc_inten_stlmt,
                                                g_remit_thru_date,
                                                g_control,
                                                g_impound_number_from,
                                                g_impound_number_to
                                              )
        */

        LOOP
            log_file ('IN THE LOOP');

            -->> Sharath Yaski | 29-OCT-2019 | Project Moose
            -- Bill Pay changes
            --IF g_funding_method = xxmm_constants.gc_credit_push_fund_meth
            IF g_funding_method IN (xxmm_constants.gc_credit_push_fund_meth, xxmm_constants.gc_bill_pay_fund_meth)
            --<< Sharath Yaski | 29-OCT-2019 | Project Moose
            THEN
                log_file ('FETCH Credit Push Cursor Record');

                FETCH g_sel_imp1 INTO r_sel_imp;

                EXIT WHEN g_sel_imp1%NOTFOUND;
            ELSE
                log_file ('FETCH Debit Pull Cursor Record');

                FETCH g_sel_imp INTO r_sel_imp;

                EXIT WHEN g_sel_imp%NOTFOUND;

                IF (r_sel_imp.funding_method=xxmm_constants.gc_usrw_funding_method) --09-Mar-2023 start of IF statement for Validation on Bank number to contain only numeric values -- FP70355
                 THEN
                  log_file('Validating the impound bank to only contain numbers.'||r_sel_imp.impound_trx_number);
                      IF  VALIDATE_BANK_NUMBER(r_sel_imp.impound_trx_id)
                      THEN
                      xxmm_messages.set_name (xxmm_constants.xxmm_appl_short_name,
                                  g_invalid_impound_bank);
                xxmm_messages.set_token ('IMPOUND_TRX_NUMBER', r_sel_imp.IMPOUND_TRX_NUMBER);
                xxmm_messages.set_token ('IMPOUND_BANK',
                                       r_sel_imp.impound_bank);

 g_invalid_impound_bank_msg := xxmm_messages.get;
 log_file(g_invalid_impound_bank_msg);
  insert_hold_warn (r_sel_imp.cts_header_id,
                                  xxmm_constants.gc_hold_entity_type_imp,
                                  r_sel_imp.impound_trx_id,
                                  g_invalid_impound_bank,
                                  g_invalid_impound_bank_msg,
                                  xxmm_constants.gc_hold_type,
                                  g_hold_catg_rec);
                    log_file('Applying Hold anMoving to next impound number skipping impound trx id : '||r_sel_imp.impound_trx_id);

                        CONTINUE;
                     END IF;
                END IF;  --09-Mar-2023 End of if statement for Validation on Bank number to contain only numeric values -- FP70355

            END IF;


            log_file ('AFTER Cursor FETCH');



            g_cnt := NVL (g_cnt, 0) + 1;
            l_inv_impound := TRUE;

            --log_file ('loop count is '||to_char(g_cnt));

            --    if  nvl(g_cnt,0) > 25
            --    then
            --        exit;
            --    end if;

            xxmm_utilities.populate_who_insert (g_creation_date,
                                                g_created_by,
                                                g_last_update_date,
                                                g_last_updated_by,
                                                g_last_update_login);


            l_cnt := NVL (l_cnt, 0) + 1;
            log_file (
                   'record number '
                || TO_CHAR (l_cnt)
                || ', the impound trx. number is '
                || r_sel_imp.impound_trx_number
                || ' and intended_settlement_bank_name is '
                || r_sel_imp.inten_stlmt_account_name
                || ' and bank is '
                || r_sel_imp.inten_stlmt_bank);

            --log_file    ('record number '
            --    ||to_char(l_cnt)
            --    ||', the impound trx. number is '
            --    ||r_sel_imp.impound_trx_number );

            g_country := r_sel_imp.country;

            g_bank_number := r_sel_imp.inten_stlmt_bank;
            g_branch_number := r_sel_imp.inten_stlmt_branch;
            g_account_number := r_sel_imp.inten_stlmt_account;
            g_account_name := r_sel_imp.inten_stlmt_account_name;
            g_bank_acc_id_intended_stlmt :=
                r_sel_imp.inten_stlmt_bank_account_id;
            g_spread_tier := NULL;
            g_spread_rate := NULL;

            ---
            ---Start Muhammad PL-61920 20-NOV-2013
            ---

            -->>Project G'Day (Australia) Sprint 5||Muhammad Imran Qureshi ||20-APR-2016

            --             g_imp_account_name := r_sel_imp.impound_account_name;
            --             g_imp_bank := r_sel_imp.impound_bank;
            --             g_imp_branch := r_sel_imp.impound_branch;
            --             g_imp_account := r_sel_imp.impound_account;

            IF NOT g_consolidate_impounds
            THEN
                g_imp_account_name := r_sel_imp.impound_account_name;
                g_imp_bank := r_sel_imp.impound_bank;
                g_imp_branch := r_sel_imp.impound_branch;
                g_imp_account := r_sel_imp.impound_account;
                --
                -- Naeem Start 10-JAN-2017, FP issue 65412
                --

                g_imp_swift_bic := r_sel_imp.impound_swift_bic;

                --
                -- Naeem  End  10-JAN-2017, FP issue 65412
                --
                --Project G'Day Start Muhammad 27-APR-2016
                g_control_account_name := r_sel_imp.impound_account_name;
                g_control_bank := r_sel_imp.impound_bank;
                g_control_branch := r_sel_imp.impound_branch;
                g_control_account := r_sel_imp.impound_account;
                g_control_swift_bic := r_sel_imp.impound_swift_bic;
            --Project G'Day End Muhammad 27-APR-2016


            END IF;

            --<<Project G'Day (Australia) Sprint 5||Muhammad Imran Qureshi ||20-APR-2016

            ---
            ---End Muhammad PL-61920 20-NOV-2013
            ---


            IF r_sel_imp.funding_method IN
                   (xxmm_constants.gc_usrw_funding_method,
                    xxmm_constants.gc_debit_pull_fund_meth)
            THEN
                --log_file ('eeeeeeee');

                get_max_count_amount (               --r_sel_imp.input_source,
                                      r_sel_imp.funding_method,
                                      r_sel_imp.adp_banking_partner,
                                      r_sel_imp.inten_stlmt_account_name, --inten_stlmt_bank,
                                      g_max_receipt_count,
                                      g_max_receipt_amount);
            END IF;


            IF r_sel_imp.funding_method IN
                   (xxmm_constants.gc_credit_push_fund_meth,
                    -->> Sharath Yaski | 29-OCT-2019 | Project Moose
                    xxmm_constants.gc_bill_pay_fund_meth
                    --<< Sharath Yaski | 29-OCT-2019 | Project Moose
                   )
            THEN
                --log_file ('fff');
                g_bank_acc_id_funding := NULL;
                g_control_account_name := NULL;
                g_control_bank := NULL;
                g_control_branch := NULL;
                g_control_account := NULL;
                g_control_swift_bic := NULL;
            ELSE
                --log_file ('ggg');
                g_control_account_name := r_sel_imp.impound_account_name;
                g_control_bank := r_sel_imp.impound_bank;
                g_control_branch := r_sel_imp.impound_branch;
                g_control_account := r_sel_imp.impound_account;
                g_control_swift_bic := r_sel_imp.impound_swift_bic;
                --g_bank_acc_id_funding   :=  null;

                get_bank_id (r_sel_imp.impound_bank,
                             r_sel_imp.impound_branch,
                             r_sel_imp.impound_account,
                             g_bank_acc_id_funding);
            END IF;

            XXMM_UTILITIES.put_line_log('the intended stlmt bank account id is '||to_char(g_bank_acc_id_intended_stlmt));

            --log_file ('hhh');

            IF r_sel_imp.funding_method =
                   xxmm_constants.gc_debit_pull_fund_meth
            THEN
                --log_file ('iii');

                XXMM_UTILITIES.put_line_log('the impound bank  is '||r_sel_imp.impound_bank);
                XXMM_UTILITIES.put_line_log('the impound branch  is '||r_sel_imp.impound_branch);
                XXMM_UTILITIES.put_line_log('the impound account is '||r_sel_imp.impound_account);


                g_bank_acc_id_final_stlmt := NULL;

                g_receipt_bank_acc_id := g_bank_acc_id_intended_stlmt;
            ELSIF r_sel_imp.funding_method IN
                      (xxmm_constants.gc_credit_push_fund_meth,
                       -->> Sharath Yaski | 29-OCT-2019 | Project Moose
                       xxmm_constants.gc_bill_pay_fund_meth,
                       --<< Sharath Yaski | 29-OCT-2019 | Project Moose
                       xxmm_constants.gc_uscp_fund_meth,
                       xxmm_constants.gc_nsfr_fund_meth)
            THEN
                --log_file ('jjj');

                --fnd_file.put_line(fnd_file.log, 'the impound bank  is '||r_sel_imp.impound_bank);
                --fnd_file.put_line(fnd_file.log, 'the impound branch  is '||r_sel_imp.impound_branch);
                --fnd_file.put_line(fnd_file.log, 'the impound account is '||r_sel_imp.impound_account);

                XXMM_UTILITIES.put_line_log('the concentration bank a/c name is '||r_sel_imp.conc_bank_acct_name);

                get_bank (                           --r_sel_imp.input_source,
                          --r_sel_imp.imp_trx_cur,
                          --r_sel_imp.impound_bank,
                          --r_sel_imp.impound_branch,
                          --r_sel_imp.impound_account,
                          r_sel_imp.conc_bank_acct_name,
                          g_bank_acc_id_final_stlmt);

                g_receipt_bank_acc_id := g_bank_acc_id_final_stlmt;
            --g_bank_acc_id_funding   :=  null;

            XXMM_UTILITIES.put_line_log('the final stlmt bank account id is '||to_char(g_bank_acc_id_final_stlmt));

            ELSIF r_sel_imp.funding_method =
                      xxmm_constants.gc_usrw_funding_method
            THEN
                --log_file ('iii');

                g_bank_acc_id_final_stlmt := NULL;

                g_receipt_bank_acc_id := g_bank_acc_id_intended_stlmt;

                IF NOT get_spread_tier_rate (r_sel_imp.control_id,
                                             r_sel_imp.control_number,
                                             r_sel_imp.cts_header_id,
                                             r_sel_imp.impound_trx_id,
                                             r_sel_imp.impound_trx_number,
                                             r_sel_imp.imp_trx_cur,
                                             r_sel_imp.receipt_currency,
                                             r_sel_imp.input_source,
                                             g_bank_acc_id_funding,
                                             g_spread_tier,
                                             g_spread_rate)
                THEN
                    l_inv_impound := FALSE;
                END IF;
            END IF;



            --if      not g_cons_negative_amount
            --and     nvl(r_sel_imp.imp_trx_amt,0) < 0
            --
            -- checking impound ransactions with negative impound amount and place a hold on impound transaction
            --

            IF NVL (r_sel_imp.imp_trx_amt, 0) < 0
            THEN
                log_file (
                       'Impound Trx number '
                    || r_sel_imp.impound_trx_number
                    || ' balance is negative '
                    || TO_CHAR (r_sel_imp.imp_trx_amt)
                    || ' , Holding the impound transaction.');
                --log_file ('kkk');

                l_inv_impound := FALSE;

                --g_inv_imp_acc_cur       := 'xxmm_inv_imp_acc_cur_msg';
                xxmm_messages.set_name (xxmm_constants.xxmm_appl_short_name,
                                      g_neg_receipt_amt);
                xxmm_messages.set_token ('CONTROL', r_sel_imp.control_number);
                xxmm_messages.set_token ('TRX_NUM',
                                       r_sel_imp.impound_trx_number);
                xxmm_messages.set_token ('AMT',
                                       TO_CHAR (r_sel_imp.imp_trx_amt));
                g_neg_receipt_amt_msg := xxmm_messages.get;
                --log_message (g_inv_spread_tier_msg);
                log_error (g_neg_receipt_amt_msg,
                           xxmm_constants.msg_type_warning);
                log_file (g_neg_receipt_amt_msg);


                insert_hold_warn (r_sel_imp.cts_header_id,
                                  xxmm_constants.gc_hold_entity_type_imp,
                                  r_sel_imp.impound_trx_id,
                                  g_neg_receipt_amt_hold,
                                  g_neg_receipt_amt_msg,
                                  xxmm_constants.gc_hold_type,
                                  g_hold_catg_rec);
            END IF;

            --
            -- while addining receipts from the from, check for receipt count exceeding maximum
            --

            IF l_add_receipts
            THEN
                g_bank_acc_id_intended_stlmt :=
                    r_sel_imp.inten_stlmt_bank_account_id;

                --
                g_bank_acc_id_final_stlmt := l_bank_acc_id_final_stlmt;

                --

                IF r_sel_imp.funding_method IN
                       (xxmm_constants.gc_debit_pull_fund_meth,
                        xxmm_constants.gc_usrw_funding_method)
                THEN
                    IF     NVL (l_receipt_cnt, 0) >=
                               NVL (g_max_receipt_count, 0)
                       AND NVL (g_max_receipt_count, 0) > 0
                    THEN
                        l_inv_impound := FALSE;
                    END IF;
                END IF;
            END IF;

            --
            IF r_sel_imp.funding_method IN
                   (xxmm_constants.gc_credit_push_fund_meth,
                    -->> Sharath Yaski | 29-OCT-2019 | Project Moose
                    xxmm_constants.gc_bill_pay_fund_meth,
                    --<< Sharath Yaski | 29-OCT-2019 | Project Moose
                    xxmm_constants.gc_uscp_fund_meth,
                    xxmm_constants.gc_nsfr_fund_meth)
            THEN
                g_receipt_bank_acc_id := g_bank_acc_id_final_stlmt;
            ELSE
                g_receipt_bank_acc_id := g_bank_acc_id_intended_stlmt;
            END IF;

            --


            IF l_inv_impound
            THEN
                --log_file ('ffffffff');

                IF l_first_rec
                THEN
                    --log_file ('gggggggg');


                    --               l_last_control_number := r_sel_imp.control_number;
                    --               l_last_impound_type := r_sel_imp.impound_trx_type;

                    --                log_file ('l_last_control_number :'||l_last_control_number);
                    --                log_file ('l_last_impound_type :'||l_last_impound_type);

                    --
                    -- get funding method attributes.
                    --

                    get_fm_attributes (r_sel_imp.funding_method            --,
                                                               --r_sel_imp.input_source
                                                               );


                    IF NOT l_add_receipts
                    THEN
                        --                  log_file ('hhhhhhhh');


                        l_last_country := r_sel_imp.country;
                        l_last_funding_method := r_sel_imp.funding_method;
                        l_last_remit_due_date := r_sel_imp.remit_due_date;
                        l_last_inten_stlmt_bank := g_bank_number;
                        l_last_inten_stlmt_branch := g_branch_number;
                        l_last_inten_stlmt_account := g_account_number;
                        l_last_inten_stlmt_name := g_account_name;

                        --
                        -- -->>Project G'Day (Australia) Sprint 3||Muhammad Imran Qureshi ||20-APR-2016
                        --
                        l_last_control_number := r_sel_imp.control_number;
                        l_last_impound_type := r_sel_imp.impound_trx_type;


                        l_last_imp_due_date := r_sel_imp.impound_due_date;
                        l_last_imp_bank := r_sel_imp.impound_bank;
                        l_last_imp_branch := r_sel_imp.impound_branch;
                        l_last_imp_account := r_sel_imp.impound_account;

                        g_imp_account_name := r_sel_imp.impound_account_name;
                        g_imp_bank := r_sel_imp.impound_bank;
                        g_imp_branch := r_sel_imp.impound_branch;
                        g_imp_account := r_sel_imp.impound_account;

                        --
                        -- Naeem Start 10-JAN-2017, FP issue 65412
                        --

                        g_imp_swift_bic := r_sel_imp.impound_swift_bic;

                        --
                        -- Naeem  End  10-JAN-2017, FP issue 65412
                        --


                        --Project G'Day Start Muhammad 27-APR-2016
                        g_control_account_name :=
                            r_sel_imp.impound_account_name;
                        g_control_bank := r_sel_imp.impound_bank;
                        g_control_branch := r_sel_imp.impound_branch;
                        g_control_account := r_sel_imp.impound_account;
                        g_control_swift_bic := r_sel_imp.impound_swift_bic;
                        --Project G'Day End Muhammad 27-APR-2016

                        --l_last_inten_bank_account_id := r_sel_imp.inten_stlmt_bank_account_id;
                        --l_last_remit_due_date := r_sel_imp.remit_due_date;

                        --
                        -- -->>Project G'Day (Australia) Sprint 3||Muhammad Imran Qureshi ||20-APR-2016
                        --

                        g_batch_date := g_srv_sysdate; --19-APR-2016 --g_srv_sysdate; --g_clt_sysdate; --g_batch_date



                        insert_receipt_batch (r_sel_imp.funding_method,
                                              l_last_remit_due_date, --p_remit_thru_date, --r_sel_imp.remit_due_date,
                                              r_sel_imp.receipt_currency,
                                              r_sel_imp.imp_trx_cur,
                                              NULL,
                                              g_bank_acc_id_intended_stlmt,
                                              g_bank_acc_id_final_stlmt,
                                              g_country,
                                              'N',
                                              l_receipt_cnt);
                    --
                    -- -->>Project G'Day (Australia) Sprint 3||Muhammad Imran Qureshi ||20-APR-2016
                    --

                    ELSE
                        l_last_country := r_sel_imp.country;
                        l_last_funding_method := r_sel_imp.funding_method;
                        l_last_remit_due_date := r_sel_imp.remit_due_date;
                        l_last_inten_stlmt_bank := g_bank_number;
                        l_last_inten_stlmt_branch := g_branch_number;
                        l_last_inten_stlmt_account := g_account_number;
                        l_last_inten_stlmt_name := g_account_name;

                        l_last_control_number := r_sel_imp.control_number;
                        l_last_impound_type := r_sel_imp.impound_trx_type;


                        l_last_imp_due_date := r_sel_imp.impound_due_date;
                        l_last_imp_bank := r_sel_imp.impound_bank;
                        l_last_imp_branch := r_sel_imp.impound_branch;
                        l_last_imp_account := r_sel_imp.impound_account;

                        g_imp_account_name := r_sel_imp.impound_account_name;
                        g_imp_bank := r_sel_imp.impound_bank;
                        g_imp_branch := r_sel_imp.impound_branch;
                        g_imp_account := r_sel_imp.impound_account;

                        --
                        -- Naeem Start 10-JAN-2017, FP issue 65412
                        --

                        g_imp_swift_bic := r_sel_imp.impound_swift_bic;

                        --
                        -- Naeem  End  10-JAN-2017, FP issue 65412
                        --


                        --Project G'Day Start Muhammad 27-APR-2016
                        g_control_account_name :=
                            r_sel_imp.impound_account_name;
                        g_control_bank := r_sel_imp.impound_bank;
                        g_control_branch := r_sel_imp.impound_branch;
                        g_control_account := r_sel_imp.impound_account;
                        g_control_swift_bic := r_sel_imp.impound_swift_bic;
                    --Project G'Day End Muhammad 27-APR-2016



                    END IF;

                    l_first_rec := FALSE;
                END IF;


                --log_file('l_last_country '||l_last_country||' r_sel_imp.country '||r_sel_imp.country);
                --log_file('l_last_funding_method '||l_last_funding_method||' r_sel_imp.funding_method '||r_sel_imp.funding_method);
                --log_file('l_last_inten_stlmt_bank '||l_last_inten_stlmt_bank||' g_bank_number '||g_bank_number);
                --log_file('l_last_inten_stlmt_branch '||l_last_inten_stlmt_branch||' g_branch_number '||g_branch_number);
                --log_file('l_last_inten_stlmt_account '||l_last_inten_stlmt_account||' g_account_number '||g_account_number);
                --log_file('l_last_control_number '||l_last_control_number||' r_sel_imp.control_number '||r_sel_imp.control_number);
                --log_file('l_last_impound_type : '||l_last_impound_type|| ' r_sel_imp.impound_trx_type '||r_sel_imp.impound_trx_type);
                --log_file('r_sel_imp.imp_trx_amt is : '||r_sel_imp.imp_trx_amt);

                --            log_file ('iiiiiiii');

                IF NOT l_add_receipts
                THEN
                    --               log_file ('jjjjjjjj');

                    IF (   (   l_last_country <> r_sel_imp.country
                            OR l_last_funding_method <>
                                   r_sel_imp.funding_method
                            OR l_last_inten_stlmt_bank <> g_bank_number
                            OR l_last_inten_stlmt_branch <> g_branch_number
                            OR l_last_inten_stlmt_account <> g_account_number
                            --
                            -->>Project G'Day (Australia) Sprint 3||Muhammad Imran Qureshi ||20-APR-2016
                            --
                            --    OR l_last_control_number   <> r_sel_imp.Control_number
                            --    OR l_last_Impound_type     <> r_sel_imp.impound_type
                            --
                            -->>Project G'Day (Australia) Sprint 3||Muhammad Imran Qureshi ||20-APR-2016
                            --

                            OR TRUNC (l_last_remit_due_date) <>
                                   TRUNC (r_sel_imp.remit_due_date))
                        OR (    r_sel_imp.funding_method =
                                    xxmm_constants.gc_debit_pull_fund_meth
                            AND NVL (l_receipt_cnt, 0) >=
                                    NVL (g_max_receipt_count, 0)
                            AND NVL (g_max_receipt_count, 0) > 0)
                        OR (    r_sel_imp.funding_method =
                                    xxmm_constants.gc_usrw_funding_method
                            AND NVL (l_receipt_cnt, 0) >=
                                    NVL (g_max_receipt_count, 0)
                            AND NVL (g_max_receipt_count, 0) > 0))
                    THEN
                        --                  log_file ('kkkkkkkk');

                        --update_receipt_batch;
                        --

                        report_batch_detail (
                            g_batch_number,
                            g_fm_descr,
                            TRUNC (l_last_remit_due_date), --trunc(l_last_remit_due_date),
                               l_last_inten_stlmt_bank
                            || ' '
                            || l_last_inten_stlmt_branch
                            || ' '
                            || l_last_inten_stlmt_account,
                            g_batch_date,
                            g_new_flag,
                            l_last_country,
                            l_last_inten_stlmt_account               --FP66978
                                                      );


                        g_batch_date := g_srv_sysdate; --19-APR-2016 --g_srv_sysdate; --g_clt_sysdate; g_batch_date

                        l_last_country := r_sel_imp.country;
                        l_last_funding_method := r_sel_imp.funding_method;
                        l_last_intended_stlmt_bank :=
                            r_sel_imp.intended_stlmt_bank;
                        l_last_remit_due_date := r_sel_imp.remit_due_date;
                        l_last_impound_currency := r_sel_imp.receipt_currency;
                        l_last_inten_stlmt_bank := g_bank_number;
                        l_last_inten_stlmt_branch := g_branch_number;
                        l_last_inten_stlmt_account := g_account_number;
                        l_last_inten_stlmt_name := g_account_name;

                        -->>Project G'Day (Australia) Sprint 5||Muhammad Imran Qureshi ||20-APR-2016

                        l_last_control_number := r_sel_imp.control_number;
                        l_last_impound_type := r_sel_imp.impound_trx_type;
                        l_last_imp_due_date := r_sel_imp.impound_due_date;
                        l_last_imp_bank := r_sel_imp.impound_bank;
                        l_last_imp_branch := r_sel_imp.impound_branch;
                        l_last_imp_account := r_sel_imp.impound_account;

                        g_imp_account_name := r_sel_imp.impound_account_name;
                        g_imp_bank := r_sel_imp.impound_bank;
                        g_imp_branch := r_sel_imp.impound_branch;
                        g_imp_account := r_sel_imp.impound_account;
                        --
                        -- Naeem Start 10-JAN-2017, FP issue 65412
                        --

                        g_imp_swift_bic := r_sel_imp.impound_swift_bic;

                        --
                        -- Naeem  End  10-JAN-2017, FP issue 65412
                        --


                        --Project G'Day Start Muhammad 27-APR-2016
                        g_control_account_name :=
                            r_sel_imp.impound_account_name;
                        g_control_bank := r_sel_imp.impound_bank;
                        g_control_branch := r_sel_imp.impound_branch;
                        g_control_account := r_sel_imp.impound_account;
                        g_control_swift_bic := r_sel_imp.impound_swift_bic;
                        --Project G'Day End Muhammad 27-APR-2016

                        -->>Project G'Day (Australia) Sprint 5||Muhammad Imran Qureshi ||20-APR-2016

                        l_receipt_cnt := 0;


                        --
                        -- get funding method attributes.
                        --

                        get_fm_attributes (r_sel_imp.funding_method);

                        insert_receipt_batch (r_sel_imp.funding_method,
                                              l_last_remit_due_date, --p_remit_thru_date, --r_sel_imp.remit_due_date,
                                              r_sel_imp.receipt_currency,
                                              r_sel_imp.imp_trx_cur,
                                              NULL,
                                              g_bank_acc_id_intended_stlmt,
                                              g_bank_acc_id_final_stlmt,
                                              g_country,
                                              'N',
                                              l_receipt_cnt);
                    END IF;
                --               log_file ('jkjkjkjk');

                END IF;


                --            log_file ('llllllll, r_sel_imp.imp_trx_amt is : '||r_sel_imp.imp_trx_amt);


                g_batch_imp_trx_amount :=
                      NVL (g_batch_imp_trx_amount, 0)
                    + NVL (r_sel_imp.imp_trx_amt, 0);

                --
                -- change made for consolidation
                --
                --l_imp_amount        :=  nvl(r_sel_imp.imp_trx_amt,0);

                IF r_sel_imp.receipt_currency = r_sel_imp.imp_trx_cur
                THEN
                    --l_imp_amount        :=  nvl(r_sel_imp.imp_trx_amt,0);
                    g_batch_impound_amount :=
                          NVL (g_batch_impound_amount, 0)
                        + NVL (r_sel_imp.imp_trx_amt, 0);
                ELSE
                    --l_imp_amount        :=  nvl(r_sel_imp.impound_amount,0);
                    g_batch_impound_amount := 0;
                --:=  nvl(g_batch_impound_amount,0)   +
                --    nvl(r_sel_imp.impound_amount,0);

                END IF;



                --xxmm_utilities.put_line_log (  'the impound amount is '||to_char(nvl(l_imp_amount,0))
                --                        ||' and batch amount is '||to_char(nvl(g_batch_impound_amount,0))  );

                l_insert_receipt := TRUE;
                l_skip_trans := FALSE;
                l_create_cons_receipt := FALSE;


                --            log_file ('mmmmmmmm');


                --


                IF (    l_add_receipts
                    AND (    TRUNC (l_remittance_due_date) <>
                                 TRUNC (r_sel_imp.remit_due_date)
                         AND l_country <> r_sel_imp.country
                         AND l_receipt_currency <> r_sel_imp.receipt_currency
                         AND l_impound_currency <> r_sel_imp.imp_trx_cur
                         AND l_bank_acc_id_intended_stlmt <>
                                 g_bank_acc_id_intended_stlmt))
                THEN
                    --               log_file ('nnnnnnnn');


                    l_skip_trans := TRUE;
                END IF;

                --

                l_create_cons_receipt := FALSE;

                IF     g_consolidate_impounds
                   AND r_sel_imp.funding_method IN
                           (xxmm_constants.gc_debit_pull_fund_meth,
                            xxmm_constants.gc_credit_push_fund_meth,
                            -->> Sharath Yaski | 29-OCT-2019 | Project Moose
                            xxmm_constants.gc_bill_pay_fund_meth
                            --<< Sharath Yaski | 29-OCT-2019 | Project Moose
                           )
                THEN
                    log_file ('In consolidate Impound logic');



                    IF (   (l_last_control_number <> r_sel_imp.control_number)
                        OR (    g_cons_by_impound_type
                            AND l_last_impound_type <>
                                    r_sel_imp.impound_trx_type)
                        OR (TRUNC (l_last_imp_due_date) <>
                                TRUNC (r_sel_imp.impound_due_date))
                        OR (   l_last_imp_bank
                            || l_last_imp_branch
                            || l_last_imp_account <>
                                   r_sel_imp.impound_bank
                                || r_sel_imp.impound_branch
                                || r_sel_imp.impound_account))
                    THEN
                        --                    log_file ('ooooooooooo');

                        l_create_cons_receipt := TRUE;
                    --
                    -- change made for consolidation
                    --
                    --l_imp_amount        :=  nvl(l_imp_amount,0) + nvl(r_sel_imp.imp_trx_amt,0);


                    ELSE
                        --                  log_file ('qqqqqqqq l_create_cons_receipt : False');


                        l_create_cons_receipt := FALSE;
                    --l_imp_amount        :=  nvl(r_sel_imp.imp_trx_amt,0);

                    END IF;
                ELSE
                    l_imp_amount := NVL (r_sel_imp.imp_trx_amt, 0);
                END IF;

                --

                --            log_file ('qrqrqrqr');

                IF NOT l_skip_trans
                THEN
                    --               log_file ('rrrrrrrr');

                    log_file ('l_skip_trans : FALSE');


                    IF     g_consolidate_impounds
                       AND r_sel_imp.funding_method IN
                               (xxmm_constants.gc_debit_pull_fund_meth,
                                xxmm_constants.gc_credit_push_fund_meth,
                                -->> Sharath Yaski | 29-OCT-2019 | Project Moose
                                xxmm_constants.gc_bill_pay_fund_meth
                                --<< Sharath Yaski | 29-OCT-2019 | Project Moose
                               )
                    THEN
                        log_file (
                            'Condolidating imppound for debit pull or credit push...');



                        IF l_create_cons_receipt
                        THEN
                            --                     log_file ('tttttttt');

                            --insert consolidated receipts

                            l_imp_amount := 0;
                            l_create_receipt := TRUE;
                            l_upd_last_receipt := FALSE;

                            FOR i IN 1 .. l_index
                            LOOP
                                --                        log_file ('uuuuuuuu');


                                r_sel_trans := g_trans_sel (i);


                                --                        log_file('r_sel_trans, the impound amount is :'||r_sel_trans.imp_trx_amt);
                                --                        log_file('r_sel_trans, the fun impound amount is :'||r_sel_trans.fun_impound_trx_amount);

                                --
                                -- insert only receipt first to get the receipt number with zero impound amount
                                --

                                IF l_create_receipt
                                THEN
                                    --                           log_file ('vvvvvvvv');


                                    insert_receipts (
                                        NULL,
                                        r_sel_trans.control_id,
                                        r_sel_trans.remit_due_date,
                                        r_sel_trans.impound_due_date,
                                        r_sel_trans.receipt_currency,
                                        r_sel_trans.imp_trx_cur,
                                        l_imp_amount,
                                        r_sel_trans.funding_method,
                                        r_sel_trans.country,
                                        r_sel_trans.input_source,
                                        g_spread_tier,
                                        g_spread_rate,
                                        FALSE,
                                        g_receipt_bank_acc_id --g_bank_acc_id_intended_stlmt
                                                             );

                                    l_create_receipt := FALSE;

                                    -->>Project G'Day (Australia) Sprint 5||Muhammad Imran Qureshi ||20-APR-2016


                                    g_receipt_cnt :=
                                        NVL (g_receipt_cnt, 0) + 1;
                                    l_receipt_cnt :=
                                        NVL (l_receipt_cnt, 0) + 1;
                                --<<Project G'Day (Australia) Sprint 5||Muhammad Imran Qureshi ||20-APR-2016


                                XXMM_UTILITIES.put_line_log('receipt created from array count '||to_char(i)||', receipt # is '||g_receipt_number);

                                END IF;

                                -- log_file('After l_create_receipt :'||l_create_receipt);

                                l_imp_amount :=
                                      NVL (l_imp_amount, 0)
                                    + NVL (r_sel_trans.imp_trx_amt, 0);

                                log_file (
                                       'total consolidated impound amount is '
                                    || l_imp_amount);

                                IF NVL (g_max_receipt_amount, 0) >
                                       NVL (l_imp_amount, 0)
                                THEN
                                    --log_file ('77777777');


                                    l_app_amount :=
                                        NVL (r_sel_trans.imp_trx_amt, 0);


                                    insert_receipt_applications (
                                        r_sel_trans.impound_trx_id,
                                        NVL (r_sel_trans.imp_trx_amt, 0),
                                        r_sel_trans.funding_method,
                                        r_sel_trans.imp_trx_cur);

                                    update_impound_trx (
                                        r_sel_trans.impound_trx_id,
                                        NVL (r_sel_trans.imp_trx_amt, 0));

                                    l_upd_last_receipt := TRUE;
                                ELSE
                                    l_imp_amount :=
                                          NVL (l_imp_amount, 0)
                                        - NVL (r_sel_trans.imp_trx_amt, 0);

                                    l_app_amount :=
                                          NVL (g_max_receipt_amount, 0)
                                        - NVL (l_imp_amount, 0);
                                    l_imp_amount :=
                                          NVL (l_imp_amount, 0)
                                        + NVL (l_app_amount, 0);

                                    insert_receipt_applications (
                                        r_sel_trans.impound_trx_id,
                                        NVL (l_app_amount, 0),
                                        r_sel_trans.funding_method,
                                        r_sel_trans.imp_trx_cur);



                                    update_impound_trx (
                                        r_sel_trans.impound_trx_id,
                                        NVL (l_app_amount, 0));

                                    update_receipts (g_batch_id,
                                                     g_receipt_number,
                                                     NVL (l_imp_amount, 0));

                                    l_imp_amount :=
                                          NVL (r_sel_trans.imp_trx_amt, 0)
                                        - NVL (l_app_amount, 0);

                                    --                           log_file ('wwwwwwww');


                                    --if  nvl(r_sel_trans.imp_trx_amt,0)  >   nvl(g_max_receipt_amount,0)
                                    IF NVL (l_imp_amount, 0) >
                                           NVL (g_max_receipt_amount, 0)
                                    THEN
                                        --                              log_file ('yyyyyyyy');


                                        l_tot_amount := NVL (l_imp_amount, 0);
                                        l_rem_amount := NVL (l_imp_amount, 0);

                                        LOOP
                                            --                                 log_file ('zzzzzzzz');

                                            IF NVL (l_rem_amount, 0) >
                                                   NVL (g_max_receipt_amount,
                                                        0)
                                            THEN
                                                l_app_amount :=
                                                    NVL (
                                                        g_max_receipt_amount,
                                                        0);
                                                l_rem_amount :=
                                                      NVL (l_rem_amount, 0)
                                                    - NVL (l_app_amount, 0);

                                                insert_receipts (
                                                    NULL,
                                                    r_sel_trans.control_id,
                                                    r_sel_trans.remit_due_date,
                                                    r_sel_trans.impound_due_date,
                                                    r_sel_trans.receipt_currency,
                                                    r_sel_trans.imp_trx_cur,
                                                    NVL (l_app_amount, 0),
                                                    r_sel_trans.funding_method,
                                                    r_sel_trans.country,
                                                    r_sel_trans.input_source,
                                                    g_spread_tier,
                                                    g_spread_rate,
                                                    FALSE,
                                                    g_receipt_bank_acc_id --g_bank_acc_id_intended_stlmt
                                                                         );


                                                insert_receipt_applications (
                                                    r_sel_trans.impound_trx_id,
                                                    NVL (l_app_amount, 0),
                                                    r_sel_trans.funding_method,
                                                    r_sel_trans.imp_trx_cur);
                                                update_impound_trx (
                                                    r_sel_trans.impound_trx_id,
                                                    NVL (l_app_amount, 0));

                                                l_upd_last_receipt := FALSE;
                                            ELSE
                                                l_app_amount :=
                                                    NVL (l_rem_amount, 0);
                                                l_rem_amount := 0;

                                                insert_receipts (
                                                    NULL,
                                                    r_sel_trans.control_id,
                                                    r_sel_trans.remit_due_date,
                                                    r_sel_trans.impound_due_date,
                                                    r_sel_trans.receipt_currency,
                                                    r_sel_trans.imp_trx_cur,
                                                    0,
                                                    r_sel_trans.funding_method,
                                                    r_sel_trans.country,
                                                    r_sel_trans.input_source,
                                                    g_spread_tier,
                                                    g_spread_rate,
                                                    FALSE,
                                                    g_receipt_bank_acc_id --g_bank_acc_id_intended_stlmt
                                                                         );

                                                l_imp_amount :=
                                                    NVL (l_app_amount, 0);

                                                insert_receipt_applications (
                                                    r_sel_trans.impound_trx_id,
                                                    NVL (l_app_amount, 0),
                                                    r_sel_trans.funding_method,
                                                    r_sel_trans.imp_trx_cur);
                                                update_impound_trx (
                                                    r_sel_trans.impound_trx_id,
                                                    NVL (l_app_amount, 0));

                                                l_upd_last_receipt := TRUE;
                                            END IF;



                                            IF NVL (l_rem_amount, 0) = 0
                                            THEN
                                                --                                    log_file ('11111111');

                                                EXIT;
                                            END IF;
                                        --                              log_file ('22222222');


                                        END LOOP;
                                    ELSE
                                        --                              log_file ('33333333');


                                        --update_receipts (g_batch_id, g_receipt_number, nvl(l_imp_amount,0));

                                        insert_receipts (
                                            NULL,
                                            r_sel_trans.control_id,
                                            r_sel_trans.remit_due_date,
                                            r_sel_trans.impound_due_date,
                                            r_sel_trans.receipt_currency,
                                            r_sel_trans.imp_trx_cur,
                                            0,
                                            r_sel_trans.funding_method,
                                            r_sel_trans.country,
                                            r_sel_trans.input_source,
                                            g_spread_tier,
                                            g_spread_rate,
                                            FALSE,
                                            g_receipt_bank_acc_id --g_bank_acc_id_intended_stlmt
                                                                 );

                                        insert_receipt_applications (
                                            r_sel_trans.impound_trx_id,
                                            NVL (l_imp_amount, 0),
                                            r_sel_trans.funding_method,
                                            r_sel_trans.imp_trx_cur);

                                        update_impound_trx (
                                            r_sel_trans.impound_trx_id,
                                            NVL (l_imp_amount, 0));

                                        l_upd_last_receipt := TRUE;
                                    END IF;
                                --                        log_file ('44444444');

                                --                        log_file ('66666666');



                                END IF;
                            --                        log_file ('88888888');

                            --
                            -->>Project G'Day (Australia) Sprint 3||Muhammad Imran Qureshi ||20-APR-2016
                            --
                            --      r_sel_trans := NULL;
                            --      g_trans_sel (l_index) := r_sel_trans;
                            --
                            -->>Project G'Day (Australia) Sprint 3||Muhammad Imran Qureshi ||20-APR-2016
                            --


                            END LOOP;


                            --
                            -->>Project G'Day (Australia) Sprint 3||Muhammad Imran Qureshi ||20-APR-2016
                            --
                            r_sel_trans := NULL;
                            g_trans_sel (l_index) := r_sel_trans;

                            --
                            -->>Project G'Day (Australia) Sprint 3||Muhammad Imran Qureshi ||20-APR-2016
                            --

                            IF     l_upd_last_receipt
                               AND g_receipt_number IS NOT NULL
                            THEN
                                log_file (
                                       '999999999, l_imp_amount is '
                                    || l_imp_amount);


                                update_receipts (g_batch_id,
                                                 g_receipt_number,
                                                 NVL (l_imp_amount, 0));
                            END IF;

                            log_file ('@@@@@@@@@');
                            l_index := 1;
                            g_trans_sel (l_index) := r_sel_imp;

                            -->>Project G'Day (Australia) Sprint 5||Muhammad Imran Qureshi ||20-APR-2016


                            l_create_cons_receipt := FALSE;
                            l_last_control_number := r_sel_imp.control_number;
                            l_last_impound_type := r_sel_imp.impound_trx_type;
                            l_last_imp_due_date := r_sel_imp.impound_due_date;
                            l_last_imp_bank := r_sel_imp.impound_bank;
                            l_last_imp_branch := r_sel_imp.impound_branch;
                            l_last_imp_account := r_sel_imp.impound_account;

                            g_imp_account_name :=
                                r_sel_imp.impound_account_name;
                            g_imp_bank := r_sel_imp.impound_bank;
                            g_imp_branch := r_sel_imp.impound_branch;
                            g_imp_account := r_sel_imp.impound_account;

                            --
                            -- Naeem Start 10-JAN-2017, FP issue 65412
                            --

                            g_imp_swift_bic := r_sel_imp.impound_swift_bic;

                            --
                            -- Naeem  End  10-JAN-2017, FP issue 65412
                            --


                            --Project G'Day Start Muhammad 27-APR-2016
                            g_control_account_name :=
                                r_sel_imp.impound_account_name;
                            g_control_bank := r_sel_imp.impound_bank;
                            g_control_branch := r_sel_imp.impound_branch;
                            g_control_account := r_sel_imp.impound_account;
                            g_control_swift_bic :=
                                r_sel_imp.impound_swift_bic;
                        --Project G'Day End Muhammad 27-APR-2016

                        --<<Project G'Day (Australia) Sprint 5||Muhammad Imran Qureshi ||20-APR-2016



                        ELSE
                            log_file ('#########');
                            l_index := NVL (l_index, 0) + 1;

                            log_file (
                                   'Before, l_index='
                                || l_index
                                || ' and r_sel_imp.imp_trx_amt is '
                                || r_sel_imp.imp_trx_amt);

                            g_trans_sel (l_index) := r_sel_imp;

                            log_file (
                                   'After, l_index='
                                || l_index
                                || ' and r_sel_imp.imp_trx_amt is '
                                || r_sel_imp.imp_trx_amt);
                        END IF;
                    ELSE
                        log_file ('00000000');


                        --if  r_sel_imp.funding_method    =   xxmm_constants.gc_debit_pull_fund_meth


                        IF r_sel_imp.funding_method IN
                               (xxmm_constants.gc_debit_pull_fund_meth,
                                xxmm_constants.gc_usrw_funding_method)
                        THEN
                            --                     log_file ('01010101');


                            log_file (
                                   'the l_imp_amount is '
                                || TO_CHAR (NVL (l_imp_amount, 0))
                                || ' and max receipt amount is '
                                || TO_CHAR (NVL (g_max_receipt_amount, 0)));


                            LOOP
                                IF     NVL (l_imp_amount, 0) >
                                           NVL (g_max_receipt_amount, 0)
                                   AND NVL (g_max_receipt_amount, 0) > 0
                                THEN
                                    --                           log_file ('12121212');


                                    log_file (
                                           'splitting loop, the l_imp_amount is '
                                        || TO_CHAR (NVL (l_imp_amount, 0))
                                        || ' and max receipt amount is '
                                        || TO_CHAR (
                                               NVL (g_max_receipt_amount, 0)));

                                    --log_file('');

                                    insert_receipts (
                                        r_sel_imp.impound_trx_id,
                                        r_sel_imp.control_id,
                                        r_sel_imp.remit_due_date,
                                        r_sel_imp.impound_due_date,
                                        r_sel_imp.receipt_currency,
                                        r_sel_imp.imp_trx_cur,
                                        NVL (g_max_receipt_amount, 0),
                                        r_sel_imp.funding_method,
                                        r_sel_imp.country,
                                        r_sel_imp.input_source,
                                        g_spread_tier,
                                        g_spread_rate,
                                        TRUE,
                                        g_receipt_bank_acc_id --g_bank_acc_id_intended_stlmt --null
                                                             );

                                    update_impound_trx (
                                        r_sel_imp.impound_trx_id,
                                        NVL (g_max_receipt_amount, 0));

                                    l_imp_amount :=
                                          NVL (l_imp_amount, 0)
                                        - NVL (g_max_receipt_amount, 0);
                                    g_receipt_cnt :=
                                        NVL (g_receipt_cnt, 0) + 1;
                                    l_receipt_cnt :=
                                        NVL (l_receipt_cnt, 0) + 1;
                                ELSE
                                    --                           log_file ('13131313');

                                    insert_receipts (
                                        r_sel_imp.impound_trx_id,
                                        r_sel_imp.control_id,
                                        r_sel_imp.remit_due_date,
                                        r_sel_imp.impound_due_date,
                                        r_sel_imp.receipt_currency,
                                        r_sel_imp.imp_trx_cur,
                                        l_imp_amount,
                                        r_sel_imp.funding_method,
                                        r_sel_imp.country,
                                        r_sel_imp.input_source,
                                        g_spread_tier,
                                        g_spread_rate,
                                        TRUE,
                                        g_receipt_bank_acc_id --g_bank_acc_id_intended_stlmt
                                                             );

                                    update_impound_trx (
                                        r_sel_imp.impound_trx_id,
                                        NVL (l_imp_amount, 0));

                                    g_receipt_cnt :=
                                        NVL (g_receipt_cnt, 0) + 1;
                                    l_receipt_cnt :=
                                        NVL (l_receipt_cnt, 0) + 1;
                                    l_imp_amount := 0;

                                    EXIT;
                                END IF;
                            END LOOP;
                        ELSE
                            --                     log_file ('14141414');

                            log_file (
                                   'Intended setlmt bank id is '
                                || TO_CHAR (g_bank_acc_id_intended_stlmt));


                            insert_receipts (r_sel_imp.impound_trx_id,
                                             r_sel_imp.control_id,
                                             r_sel_imp.remit_due_date,
                                             r_sel_imp.impound_due_date,
                                             r_sel_imp.receipt_currency,
                                             r_sel_imp.imp_trx_cur,
                                             l_imp_amount,
                                             r_sel_imp.funding_method,
                                             r_sel_imp.country,
                                             r_sel_imp.input_source,
                                             g_spread_tier,
                                             g_spread_rate,
                                             TRUE,
                                             g_receipt_bank_acc_id --g_bank_acc_id_intended_stlmt
                                                                  );

                            update_impound_trx (r_sel_imp.impound_trx_id,
                                                NVL (l_imp_amount, 0));

                            g_receipt_cnt := NVL (g_receipt_cnt, 0) + 1;
                            l_receipt_cnt := NVL (l_receipt_cnt, 0) + 1;
                        END IF;
                    --               log_file ('15151515');



                    END IF;
                END IF;
            END IF;
        END LOOP;


        -->>Project G'Day (Australia) Sprint 3||Muhammad Imran Qureshi ||20-APR-2016

        --IF     g_consolidate_impounds
        --AND l_create_cons_receipt

        IF g_trans_sel.COUNT > 0
        THEN
            --                     log_file ('tttttttt');


            --               --Project G'Day Start Muhammad 27-APR-2016
            --               g_control_account_name := r_sel_imp.impound_account_name;
            --               g_control_bank := r_sel_imp.impound_bank;
            --               g_control_branch := r_sel_imp.impound_branch;
            --               g_control_account := r_sel_imp.impound_account;
            --               g_control_swift_bic := r_sel_imp.impound_swift_bic;
            --              --Project G'Day End Muhammad 27-APR-2016

            --insert consolidated receipts

            l_imp_amount := 0;
            l_create_receipt := TRUE;
            l_upd_last_receipt := FALSE;

            FOR i IN 1 .. l_index
            LOOP
                --log_file ('uuuuuuuu');


                r_sel_trans := g_trans_sel (i);


                --                        log_file('r_sel_trans, the impound amount is :'||r_sel_trans.imp_trx_amt);
                --                        log_file('r_sel_trans, the fun impound amount is :'||r_sel_trans.fun_impound_trx_amount);

                --
                -- insert only receipt first to get the receipt number with zero impound amount
                --

                IF l_create_receipt
                THEN
                    --log_file ('vvvvvvvv');


                    insert_receipts (NULL,
                                     r_sel_trans.control_id,
                                     r_sel_trans.remit_due_date,
                                     r_sel_trans.impound_due_date,
                                     r_sel_trans.receipt_currency,
                                     r_sel_trans.imp_trx_cur,
                                     l_imp_amount,
                                     r_sel_trans.funding_method,
                                     r_sel_trans.country,
                                     r_sel_trans.input_source,
                                     g_spread_tier,
                                     g_spread_rate,
                                     FALSE,
                                     g_receipt_bank_acc_id --g_bank_acc_id_intended_stlmt
                                                          );

                    l_create_receipt := FALSE;
                    XXMM_UTILITIES.put_line_log('receipt created from array count '||to_char(i)||', receipt # is '||g_receipt_number);
                    g_receipt_cnt := NVL (g_receipt_cnt, 0) + 1;
                    l_receipt_cnt := NVL (l_receipt_cnt, 0) + 1;
                END IF;

                -- log_file('After l_create_receipt :'||l_create_receipt);

                l_imp_amount :=
                    NVL (l_imp_amount, 0) + NVL (r_sel_trans.imp_trx_amt, 0);

                log_file (
                    'total consolidated impound amount is ' || l_imp_amount);

                IF NVL (g_max_receipt_amount, 0) > NVL (l_imp_amount, 0)
                THEN
                    --log_file ('77777777');


                    l_app_amount := NVL (r_sel_trans.imp_trx_amt, 0);


                    insert_receipt_applications (
                        r_sel_trans.impound_trx_id,
                        NVL (r_sel_trans.imp_trx_amt, 0),
                        r_sel_trans.funding_method,
                        r_sel_trans.imp_trx_cur);

                    update_impound_trx (r_sel_trans.impound_trx_id,
                                        NVL (r_sel_trans.imp_trx_amt, 0));

                    l_upd_last_receipt := TRUE;
                ELSE
                    l_imp_amount :=
                          NVL (l_imp_amount, 0)
                        - NVL (r_sel_trans.imp_trx_amt, 0);

                    l_app_amount :=
                        NVL (g_max_receipt_amount, 0) - NVL (l_imp_amount, 0);
                    l_imp_amount :=
                        NVL (l_imp_amount, 0) + NVL (l_app_amount, 0);

                    insert_receipt_applications (r_sel_trans.impound_trx_id,
                                                 NVL (l_app_amount, 0),
                                                 r_sel_trans.funding_method,
                                                 r_sel_trans.imp_trx_cur);



                    update_impound_trx (r_sel_trans.impound_trx_id,
                                        NVL (l_app_amount, 0));

                    update_receipts (g_batch_id,
                                     g_receipt_number,
                                     NVL (l_imp_amount, 0));

                    l_imp_amount :=
                          NVL (r_sel_trans.imp_trx_amt, 0)
                        - NVL (l_app_amount, 0);

                    --                           log_file ('wwwwwwww');


                    --if  nvl(r_sel_trans.imp_trx_amt,0)  >   nvl(g_max_receipt_amount,0)
                    IF NVL (l_imp_amount, 0) > NVL (g_max_receipt_amount, 0)
                    THEN
                        --                              log_file ('yyyyyyyy');


                        l_tot_amount := NVL (l_imp_amount, 0);
                        l_rem_amount := NVL (l_imp_amount, 0);

                        LOOP
                            --                                 log_file ('zzzzzzzz');

                            IF NVL (l_rem_amount, 0) >
                                   NVL (g_max_receipt_amount, 0)
                            THEN
                                l_app_amount := NVL (g_max_receipt_amount, 0);
                                l_rem_amount :=
                                      NVL (l_rem_amount, 0)
                                    - NVL (l_app_amount, 0);

                                insert_receipts (
                                    NULL,
                                    r_sel_trans.control_id,
                                    r_sel_trans.remit_due_date,
                                    r_sel_trans.impound_due_date,
                                    r_sel_trans.receipt_currency,
                                    r_sel_trans.imp_trx_cur,
                                    NVL (l_app_amount, 0),
                                    r_sel_trans.funding_method,
                                    r_sel_trans.country,
                                    r_sel_trans.input_source,
                                    g_spread_tier,
                                    g_spread_rate,
                                    FALSE,
                                    g_receipt_bank_acc_id --g_bank_acc_id_intended_stlmt
                                                         );


                                insert_receipt_applications (
                                    r_sel_trans.impound_trx_id,
                                    NVL (l_app_amount, 0),
                                    r_sel_trans.funding_method,
                                    r_sel_trans.imp_trx_cur);
                                update_impound_trx (
                                    r_sel_trans.impound_trx_id,
                                    NVL (l_app_amount, 0));

                                l_upd_last_receipt := FALSE;

                                g_receipt_cnt := NVL (g_receipt_cnt, 0) + 1;
                                l_receipt_cnt := NVL (l_receipt_cnt, 0) + 1;
                            ELSE
                                l_app_amount := NVL (l_rem_amount, 0);
                                l_rem_amount := 0;

                                insert_receipts (
                                    NULL,
                                    r_sel_trans.control_id,
                                    r_sel_trans.remit_due_date,
                                    r_sel_trans.impound_due_date,
                                    r_sel_trans.receipt_currency,
                                    r_sel_trans.imp_trx_cur,
                                    0,
                                    r_sel_trans.funding_method,
                                    r_sel_trans.country,
                                    r_sel_trans.input_source,
                                    g_spread_tier,
                                    g_spread_rate,
                                    FALSE,
                                    g_receipt_bank_acc_id --g_bank_acc_id_intended_stlmt
                                                         );

                                l_imp_amount := NVL (l_app_amount, 0);

                                insert_receipt_applications (
                                    r_sel_trans.impound_trx_id,
                                    NVL (l_app_amount, 0),
                                    r_sel_trans.funding_method,
                                    r_sel_trans.imp_trx_cur);
                                update_impound_trx (
                                    r_sel_trans.impound_trx_id,
                                    NVL (l_app_amount, 0));

                                l_upd_last_receipt := TRUE;

                                g_receipt_cnt := NVL (g_receipt_cnt, 0) + 1;
                                l_receipt_cnt := NVL (l_receipt_cnt, 0) + 1;
                            END IF;



                            IF NVL (l_rem_amount, 0) = 0
                            THEN
                                --                                    log_file ('11111111');

                                EXIT;
                            END IF;
                        --                              log_file ('22222222');


                        END LOOP;
                    ELSE
                        --                              log_file ('33333333');


                        --update_receipts (g_batch_id, g_receipt_number, nvl(l_imp_amount,0));

                        insert_receipts (NULL,
                                         r_sel_trans.control_id,
                                         r_sel_trans.remit_due_date,
                                         r_sel_trans.impound_due_date,
                                         r_sel_trans.receipt_currency,
                                         r_sel_trans.imp_trx_cur,
                                         0,
                                         r_sel_trans.funding_method,
                                         r_sel_trans.country,
                                         r_sel_trans.input_source,
                                         g_spread_tier,
                                         g_spread_rate,
                                         FALSE,
                                         g_receipt_bank_acc_id --g_bank_acc_id_intended_stlmt
                                                              );

                        insert_receipt_applications (
                            r_sel_trans.impound_trx_id,
                            NVL (l_imp_amount, 0),
                            r_sel_trans.funding_method,
                            r_sel_trans.imp_trx_cur);

                        update_impound_trx (r_sel_trans.impound_trx_id,
                                            NVL (l_imp_amount, 0));

                        l_upd_last_receipt := TRUE;

                        g_receipt_cnt := NVL (g_receipt_cnt, 0) + 1;
                        l_receipt_cnt := NVL (l_receipt_cnt, 0) + 1;
                    END IF;
                --                        log_file ('44444444');

                --                        log_file ('66666666');



                END IF;
            --                        log_file ('88888888');

            --
            -->>Project G'Day (Australia) Sprint 3||Muhammad Imran Qureshi ||20-APR-2016
            --
            --      r_sel_trans := NULL;
            --      g_trans_sel (l_index) := r_sel_trans;
            --
            -->>Project G'Day (Australia) Sprint 3||Muhammad Imran Qureshi ||20-APR-2016
            --


            END LOOP;


            --
            -->>Project G'Day (Australia) Sprint 3||Muhammad Imran Qureshi ||20-APR-2016
            --
            r_sel_trans := NULL;
            g_trans_sel (l_index) := r_sel_trans;

            --
            -->>Project G'Day (Australia) Sprint 3||Muhammad Imran Qureshi ||20-APR-2016
            --

            IF l_upd_last_receipt AND g_receipt_number IS NOT NULL
            THEN
                log_file ('999999999, l_imp_amount is ' || l_imp_amount);


                update_receipts (g_batch_id,
                                 g_receipt_number,
                                 NVL (l_imp_amount, 0));
            END IF;

            log_file ('@@@@@@@@@');
            l_index := 1;
            g_trans_sel (l_index) := r_sel_imp;
        ELSE
            --log_file ('#########');
            l_index := NVL (l_index, 0) + 1;

            --                     log_file ('Before, l_index='||l_index||' and r_sel_imp.imp_trx_amt is '||r_sel_imp.imp_trx_amt);

            g_trans_sel (l_index) := r_sel_imp;
        --                     log_file ('After, l_index='||l_index||' and r_sel_imp.imp_trx_amt is '||r_sel_imp.imp_trx_amt);

        END IF;

        -->>Project G'Day (Australia) Sprint 3||Muhammad Imran Qureshi ||20-APR-2016

        IF NVL (l_receipt_cnt, 0) > 0
        THEN
            report_batch_detail (
                g_batch_number,
                g_fm_descr,
                TRUNC (l_last_remit_due_date),
                   --l_last_inten_stlmt_name,
                   l_last_inten_stlmt_bank
                || ' '
                || l_last_inten_stlmt_branch
                || ' '
                || l_last_inten_stlmt_account,
                g_batch_date,
                g_new_flag,
                l_last_country,
                l_last_inten_stlmt_account                           --FP66978
                                          );
        END IF;


        IF g_funding_method IN (xxmm_constants.gc_credit_push_fund_meth,
                                -->> Sharath Yaski | 29-OCT-2019 | Project Moose
                                xxmm_constants.gc_bill_pay_fund_meth
                                --<< Sharath Yaski | 29-OCT-2019 | Project Moose
                               )
        THEN
            CLOSE g_sel_imp1;
        ELSE
            CLOSE g_sel_imp;
        END IF;


        COMMIT;


        log_message (' ');
        log_file (' ');
        log_message (
            '------------------------------------------------------------');
        log_file (
            '------------------------------------------------------------');

        log_message (
               'Total '
            || TO_CHAR (g_receipt_cnt)
            || ' receipts created by receipt process.');
        log_file (
               'Total '
            || TO_CHAR (g_receipt_cnt)
            || ' receipts created by receipt process.');


        log_message (
            '------------------------------------------------------------');
        log_file (
            '------------------------------------------------------------');
        log_message (' ');
        log_file (' ');
        p_cnt := g_receipt_cnt;
        g_receipt_cnt := 0;

        log_message ('Ending << ' || l_program_unit);
        log_file ('Ending << ' || l_program_unit);
    EXCEPTION
        WHEN OTHERS
        THEN
            p_text := g_err_msg;
            g_err_msg :=
                   'OTHER EXCEPTION while creating Receipt batches, the error text is : '
                || SQLERRM;
            log_message (g_err_msg);
            log_file (g_err_msg);
            log_error (g_err_msg, xxmm_constants.msg_type_error);

            --                xxmm_utilities.put_line_log (  g_err_msg );
            raise_application_error (-20023, g_err_msg);
    END main;


    ----------------------------------------------------------------------------------
    --
    -- proecdure:     create_empty_batches
    --
    -- inputs:        none
    --
    --
    -- this procedure creates the empty receipt batches based on the given parameter values.
    --
    --+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    --
    --  modified by        date         description
    --
    -----------------------------------------------------------------------------------
    PROCEDURE create_empty_batches (
        p_input_source           IN xxmm_cts_headers.input_source%TYPE DEFAULT NULL,
        p_funding_method         IN xxmm_cts_impound_trx.funding_method%TYPE DEFAULT NULL,
        p_bank_acc_inten_stlmt   IN VARCHAR2,
        p_cnt                    IN NUMBER)
    IS
        --
        l_message                      VARCHAR2 (2000) DEFAULT NULL;


        l_cnt                          NUMBER DEFAULT 0;
        l_receipt_cnt                  NUMBER DEFAULT 0;

        l_program_unit                 VARCHAR2 (100)
                                           := g_package_name || '.CREATE_EMPTY_BATCHES';

        l_receipt_currency             xxmm_receipt_batches.receipt_currency%TYPE
                                           DEFAULT NULL;
        l_impound_currency             xxmm_receipt_batches.impound_currency%TYPE
                                           DEFAULT NULL;
        l_func_cur                     xxmm_receipt_batches.impound_currency%TYPE
                                           DEFAULT NULL;
        l_exchange_rate                xxmm_receipt_batches.adp_exch_rate%TYPE
                                           DEFAULT NULL;
        l_bank_acc_id_intended_stlmt   xxmm_receipt_batches.bank_acc_id_intended_stlmt%TYPE
            DEFAULT NULL;
        l_bank_acc_id_final_stlmt      xxmm_receipt_batches.bank_acc_id_intended_stlmt%TYPE
            DEFAULT NULL;
        l_country                      xxmm_receipt_batches.country%TYPE
                                           DEFAULT NULL;


        CURSOR c_rec_batch (
            p_funding_method               IN xxmm_receipt_batches.funding_method%TYPE,
            p_batch_date                   IN xxmm_receipt_batches.remittance_due_date%TYPE,
            p_receipt_currency             IN xxmm_receipt_batches.receipt_currency%TYPE,
            p_impound_currency             IN xxmm_receipt_batches.impound_currency%TYPE,
            p_bank_acc_id_intended_stlmt   IN NUMBER,
            p_country                      IN xxmm_receipt_batches.country%TYPE)
        IS
            SELECT *
              FROM xxmm_receipt_batches
             WHERE     funding_method = p_funding_method
                   AND TRUNC (remittance_due_date) = TRUNC (p_batch_date)
                   AND receipt_currency = p_receipt_currency
                   AND impound_currency = p_impound_currency
                   AND country = p_country
                   AND bank_acc_id_intended_stlmt =
                           p_bank_acc_id_intended_stlmt
                   AND receipt_batch_type =
                           xxmm_constants.gc_rec_batch_type_auto
                   AND status = xxmm_constants.gc_rec_batch_status_created; --PWC

        r_rec_batch                    c_rec_batch%ROWTYPE;

        CURSOR c_func_cur (
            p_country   IN VARCHAR2)
        IS
            SELECT MIN (attribute1) func_curr
              FROM xxmm_lookups_v
             WHERE     lookup_type = xxmm_constants.gc_country_lt
                   AND lookup_code = p_country
                   AND enabled_flag = 'Y'
                   --and     default_flag            =   'y'
                   AND TRUNC (SYSDATE) BETWEEN TRUNC (start_date_active)
                                           AND TRUNC (
                                                   NVL (end_date_active,
                                                        SYSDATE));
    BEGIN
        log_message ('Starting >> ' || l_program_unit);
        log_file ('Starting >> ' || l_program_unit);


        --g_country               :=  p_country;
        g_input_source := p_input_source;
        g_funding_method := p_funding_method;
        g_bank_acc_inten_stlmt := p_bank_acc_inten_stlmt;

        l_cnt := 0;
        xxmm_utilities.populate_who_insert (g_creation_date,
                                            g_created_by,
                                            g_last_update_date,
                                            g_last_updated_by,
                                            g_last_update_login);

        FOR r_empty_batch
            IN g_empty_batch (g_input_source,
                              g_funding_method,
                              g_bank_acc_inten_stlmt)
        LOOP
            get_fm_attributes (r_empty_batch.funding_method                --,
                                                           --xxmm_constants.gc_input_source_combo_canada
                                                           );

            /*
                    if        c_bank%isopen
                    then
                            close    c_bank;
                    end if;

                    open    c_bank (    r_empty_batch.inten_stlmt_bank,
                                        r_empty_batch.inten_stlmt_branch,
                                        r_empty_batch.inten_stlmt_account );

                    fetch    c_bank    into    r_bank;
                    close   c_bank;

                      l_bank_acc_id_intended_stlmt         :=    r_bank.bank_account_id;
                    l_receipt_currency                   := r_bank.receipt_currency;
            */

            log_message (
                   'Bank Account Name is '
                || r_empty_batch.inten_stlmt_account_name);
            log_file (
                   'Bank Account Name is '
                || r_empty_batch.inten_stlmt_account_name);

            log_message (
                   'Bank Account id is '
                || TO_CHAR (r_empty_batch.inten_stlmt_bank_account_id));
            log_file (
                   'Bank Account id is '
                || TO_CHAR (r_empty_batch.inten_stlmt_bank_account_id));


            IF r_empty_batch.funding_method IN
                   (xxmm_constants.gc_credit_push_fund_meth,
                    -->> Sharath Yaski | 29-OCT-2019 | Project Moose
                    xxmm_constants.gc_bill_pay_fund_meth,
                    --<< Sharath Yaski | 29-OCT-2019 | Project Moose
                    xxmm_constants.gc_uscp_fund_meth,
                    xxmm_constants.gc_nsfr_fund_meth)
            THEN
                --fnd_file.put_line(fnd_file.log, 'the impound bank  is '||r_sel_imp.impound_bank);
                --fnd_file.put_line(fnd_file.log, 'the impound branch  is '||r_sel_imp.impound_branch);
                --fnd_file.put_line(fnd_file.log, 'the impound account is '||r_sel_imp.impound_account);

                --fnd_file.put_line(fnd_file.log, 'the concentration bank a/c name is '||r_empty_batch.conc_bank_acct_name);

                get_bank (r_empty_batch.conc_bank_acct_name,
                          l_bank_acc_id_final_stlmt);
            END IF;


            l_bank_acc_id_intended_stlmt :=
                r_empty_batch.inten_stlmt_bank_account_id;
            l_receipt_currency := r_empty_batch.bank_acct_currency;
            l_country := r_empty_batch.country;

            IF c_func_cur%ISOPEN
            THEN
                CLOSE c_func_cur;
            END IF;

            OPEN c_func_cur (r_empty_batch.country);

            FETCH c_func_cur INTO l_func_cur;

            IF c_func_cur%FOUND
            THEN
                g_func_imp_currency := l_func_cur;
            END IF;

            CLOSE c_func_cur;


            IF r_empty_batch.funding_method =
                   xxmm_constants.gc_usrw_funding_method
            THEN
                l_impound_currency := g_func_imp_currency;
                l_exchange_rate := NULL;
            ELSE
                l_impound_currency := l_receipt_currency;
                l_exchange_rate := 1;
            END IF;

            IF l_bank_acc_id_intended_stlmt IS NOT NULL
            THEN
                log_message ('L_IMPOUND_CURRENCY is ' || l_impound_currency);
                log_file ('L_IMPOUND_CURRENCY is ' || l_impound_currency);


                log_message ('L_RECEIPT_CURRENCY is ' || l_receipt_currency);
                log_file ('L_RECEIPT_CURRENCY is ' || l_receipt_currency);


                IF c_rec_batch%ISOPEN
                THEN
                    CLOSE c_rec_batch;
                END IF;

                OPEN c_rec_batch (r_empty_batch.funding_method,
                                  TRUNC (g_clt_sysdate),
                                  l_receipt_currency,
                                  l_impound_currency,
                                  l_bank_acc_id_intended_stlmt,
                                  l_country);

                FETCH c_rec_batch INTO r_rec_batch;


                --if      r_rec_batch.receipt_batch_id is null
                IF c_rec_batch%NOTFOUND
                THEN
                    l_cnt := NVL (l_cnt, 0) + 1;
                    l_message :=
                           'Creating Empty Receipt Batch for Bank :'
                        || r_empty_batch.inten_stlmt_bank
                        || ', Branch : '
                        || r_empty_batch.inten_stlmt_branch
                        || ' and Account : '
                        || r_empty_batch.inten_stlmt_account
                        || '.';

                    log_message (l_message);
                    log_file (l_message);


                    insert_receipt_batch (                             --null,
                                          r_empty_batch.funding_method,
                                          TRUNC (g_clt_sysdate),
                                          l_receipt_currency,
                                          l_impound_currency,
                                          l_exchange_rate,
                                          --null,
                                          l_bank_acc_id_intended_stlmt,
                                          l_bank_acc_id_final_stlmt,
                                          l_country,
                                          'N',
                                          l_receipt_cnt);


                    report_batch_detail (
                        g_batch_number,
                        g_fm_descr,
                        TRUNC (g_clt_sysdate),
                           --r_empty_batch.inten_stlmt_account,
                           r_empty_batch.inten_stlmt_bank
                        || ' '
                        || r_empty_batch.inten_stlmt_branch
                        || ' '
                        || r_empty_batch.inten_stlmt_account,
                        TRUNC (g_clt_sysdate),
                        --p_count             in  number,
                        --p_amount            in  number,
                        'Yes',
                        l_country,
                        r_empty_batch.inten_stlmt_account            --FP66978
                                                         );
                END IF;

                CLOSE c_rec_batch;
            ELSE
                l_message :=
                       'Could not find the intended settlement Bank :'
                    || r_empty_batch.inten_stlmt_bank
                    || ', Branch : '
                    || r_empty_batch.inten_stlmt_branch
                    || ' and Account : '
                    || r_empty_batch.inten_stlmt_account
                    || ' in the XXMM_BANK_ACCOUNTS table. Empty batch not created for this bank';

                log_error (l_message, xxmm_constants.msg_type_warning);
                log_file (l_message);
            END IF;
        END LOOP;


        COMMIT;


        log_message (' ');
        log_file (' ');
        log_message (
            '------------------------------------------------------------');
        log_file (
            '------------------------------------------------------------');

        log_message (
               'Total '
            || TO_CHAR (l_cnt)
            || ' Empty receipts batches created by receipt process.');
        log_file (
               'Total '
            || TO_CHAR (l_cnt)
            || ' Empty receipts batches created by receipt process.');


        log_message (
            '------------------------------------------------------------');
        log_file (
            '------------------------------------------------------------');
        log_message (' ');
        log_file (' ');

        log_message ('Ending << ' || l_program_unit);
        log_file ('Ending << ' || l_program_unit);
    -->> FT#6579||Mohammed Arif Ali ||31-JUL-2012
    --commented below code


    /* if      nvl(l_cnt,0) + nvl(p_cnt,0)   >   0
     then

             xxmm_utilities.put_line_output( chr(13));
             xxmm_utilities.put_line_output('                                                      **** End Of Report ****'||chr(13));
             xxmm_utilities.put_line_output( chr(13));

     else
             xxmm_utilities.put_line_output( chr(13));
             xxmm_utilities.put_line_output('                                                      **** No Data Found ****'||chr(13));
             xxmm_utilities.put_line_output( chr(13));


     end if; */
    -->> FT#6579||Mohammed Arif Ali ||31-JUL-2012

    EXCEPTION
        WHEN OTHERS
        THEN
            g_err_msg :=
                   'OTHER EXCEPTION while creating Empty Receipt batches, the error text is : '
                || SQLERRM;
            log_message (g_err_msg);
            log_file (g_err_msg);
            log_error (g_err_msg, xxmm_constants.msg_type_error);

            raise_application_error (-20024, g_err_msg);
    END create_empty_batches;



    PROCEDURE conc_main (
        p_errbuf                    OUT VARCHAR2,
        p_retcode                   OUT VARCHAR2,
        p_remit_thru_date        IN     VARCHAR2 DEFAULT NULL, --xxmm_receipt_batches.remittance_due_date%type   default null,
        p_country                IN     xxmm_cts_headers.country%TYPE DEFAULT NULL,
        p_input_source           IN     xxmm_cts_headers.input_source%TYPE DEFAULT NULL,
        p_funding_method         IN     xxmm_cts_impound_trx.funding_method%TYPE DEFAULT NULL,
        p_bank_acc_inten_stlmt   IN     xxmm_bank_accounts.account_name%TYPE DEFAULT NULL,
        p_control                IN     xxmm_customer_controls.control_number%TYPE DEFAULT NULL,
        p_impound_number_from    IN     xxmm_cts_impound_trx.impound_trx_number%TYPE DEFAULT NULL,
        p_impound_number_to      IN     xxmm_cts_impound_trx.impound_trx_number%TYPE DEFAULT NULL)
    IS
        l_program_unit           VARCHAR2 (100) := g_package_name || '.CONC_MAIN';
        l_msg                    VARCHAR2 (2000) DEFAULT NULL;
        l_cnt                    NUMBER DEFAULT 0;
        -->START >PWR 17-121 Rel 4.5 | 07-MAY-2018  CQ - Sprint 1 - US US988191 - Debit Pull Straight Thru Processing | Muhammad Imran Qureshiand George Felian
        l_receipt_batch_status   VARCHAR2 (3);
        l_receipt_status         VARCHAR2 (3);
        --   l_straight_thru_req       VARCHAR2(1):='N';
        l_straight_thru_lrw      VARCHAR2 (1) := 'N';
        l_straight_thru_rev      VARCHAR2 (1) := 'N';
        l_straight_thru_rem      VARCHAR2 (1) := 'N';
        l_count                  NUMBER;
         -->> FP 68398 | Ranjitha | 23-JUN-2020 | If we have only one receipt with 0. cancel the batch as it is NRM status
        l_tot_amt                NUMBER := 0;
        --<< FP 68398 | Ranjitha | 23-JUN-2020 | If we have only one receipt with 0. cancel the batch as it is NRM status
        l_request_id             NUMBER;
        l_receipt_batch_type     VARCHAR2 (3);
        l_funding_method         VARCHAR2 (3);

        CURSOR c_rb_receipt_submit
        IS
              SELECT rb.*
                FROM xxmm_receipt_batches rb
               WHERE     rb.concurrent_request_id = g_request_id
                     AND rb.receipt_batch_type =
                             xxmm_constants.gc_rec_batch_type_auto     --'AUT'
                     --AND rb.funding_method =  xxmm_constants.gc_debit_pull_fund_meth --'00'
                     AND status = xxmm_constants.gc_rec_batch_status_created
            ORDER BY rb.receipt_batch_id;
    --<<End  PWR 17-121 Rel 4.5 | 07-MAY-2018  CQ - Sprint 1 - US US988191 - Debit Pull Straight Thru Processing | Muhammad Imran Qureshiand George Felian
    BEGIN
        p_retcode := 0;
        log_message ('Starting >> ' || l_program_unit);
        log_file ('Starting >> ' || l_program_unit);

        --
        -- START 17-NOV-2011 Naeem  UAT Issue 5238
        --
        -->> Project G'day | ranjitha | 4-APR-2106| Declaring it as constant global variable.Hence not requried here
        G_ORG_ID := xxmm_utilities.get_org_id;
        --<< Project G'day | ranjitha | 4-APR-2106| Declaring it as constant global variable.Hence not requried here
        g_ou_name := xxmm_security_profile.get_ou_name (g_org_id);

        --
        --  END  17-NOV-2011 Naeem  UAT Issue 5238
        --
        l_msg := 'Param Country is  ' || p_country;
        log_message (l_msg);
        log_file (l_msg);

        l_msg := 'Param Input Source is  ' || p_input_source;
        log_message (l_msg);
        log_file (l_msg);

        l_msg := 'Param Funding Method is  ' || p_funding_method;
        log_message (l_msg);
        log_file (l_msg);

        l_msg :=
               'Param Intended Settlement Bank Account is  '
            || p_bank_acc_inten_stlmt;
        log_message (l_msg);
        log_file (l_msg);

        l_msg :=
               'Param From Remittance Thru Date is  '
            || TO_CHAR (TO_DATE (p_remit_thru_date, 'YYYY/MM/DD HH24:MI:SS'),
                        'DD-MON-RRRR');
        log_message (l_msg);
        log_file (l_msg);

        l_msg := 'Param Control Number is  ' || p_control;
        log_message (l_msg);
        log_file (l_msg);

        l_msg := 'Param Impound Number From is  ' || p_impound_number_from;
        log_message (l_msg);
        log_file (l_msg);

        l_msg := 'Param Impound Number To is  ' || p_impound_number_to;
        log_message (l_msg);
        log_file (l_msg);
        -->> Project G'day | ranjitha | 4-APR-2106| Declaring it as constant global variable.Hence not requried here
         g_org_id := xxmm_utilities.get_org_id;
        --<< Project G'day | ranjitha | 4-APR-2106| Declaring it as constant global variable.Hence not requried here
        g_srv_tmz_code := xxmm_timezones.get_server_timezone_code;

        g_srv_tmz_id := get_timezone_id (g_srv_tmz_code);

        log_file ('the Server Time zone is ' || TO_CHAR (g_srv_tmz_id));
        log_file (
               'the system date in server Time zone is '
            || TO_CHAR (CURRENT_DATE, 'DD-MON-YYYY HH24:MI:SS'));

        main (p_country,
              p_input_source,
              p_funding_method,
              p_bank_acc_inten_stlmt,
              TO_DATE (p_remit_thru_date, 'YYYY/MM/DD HH24:MI:SS'), --p_remit_thru_date,
              p_control,
              p_impound_number_from,
              p_impound_number_to,
              NULL,
              l_cnt,
              l_msg);


        create_empty_batches (p_input_source,
                              p_funding_method,
                              p_bank_acc_inten_stlmt,
                              l_cnt);


        report_batch_exceptions;


        -->START >PWR 17-121 Rel 4.5 | 07-MAY-2018  CQ - Sprint 1 - US US988191 - Debit Pull Straight Thru Processing | Muhammad Imran Qureshiand George Felian


        l_straight_thru_lrw :=
            NVL (xxmm_lookup_utilities.get_code_attribute (
                     xxmm_constants.gc_source_type_ind,
                     'XXMM_ST_THRU_PROCESS_FUND_METH',
                     g_funding_method,
                     'XXMM_ST_THRU_PROCESS_FUND_METH',
                     'ATTRIBUTE1'),
                 'N');


        l_straight_thru_rev :=
            NVL (xxmm_lookup_utilities.get_code_attribute (
                     xxmm_constants.gc_source_type_ind,
                     'XXMM_ST_THRU_PROCESS_FUND_METH',
                     g_funding_method,
                     'XXMM_ST_THRU_PROCESS_FUND_METH',
                     'ATTRIBUTE2'),
                 'N');



        l_straight_thru_rem :=
            NVL (xxmm_lookup_utilities.get_code_attribute (
                     xxmm_constants.gc_source_type_ind,
                     'XXMM_ST_THRU_PROCESS_FUND_METH',
                     g_funding_method,
                     'XXMM_ST_THRU_PROCESS_FUND_METH',
                     'ATTRIBUTE3'),
                 'N');


        log_file (
               'Straight Thru Processing : '
            || l_straight_thru_lrw
            || ' For Funding Method : '
            || g_funding_method);

        /*BEGIN
          SELECT receipt_batch_type, funding_method
             INTO l_receipt_batch_type, l_funding_method
             FROM xxmm_receipt_batches rb
            WHERE rb.concurrent_request_id = g_request_id
              AND rb.receipt_batch_type =  xxmm_constants.gc_rec_batch_type_auto --'AUT'
              AND rb.funding_method =  xxmm_constants.gc_debit_pull_fund_meth --'00'
              AND status = xxmm_constants.gc_rec_batch_status_created;
        END;*/


        IF /*l_receipt_batch_type = xxmm_constants.gc_rec_batch_type_auto --'AUT'
       AND l_funding_method = xxmm_constants.gc_debit_pull_fund_meth --'00'   Debit Pull
       AND */
          l_straight_thru_lrw = 'Y'
        THEN
            FOR r_rb_receipt_submit IN c_rb_receipt_submit
            LOOP
                BEGIN
                    SELECT COUNT (1)
                      -->> FP 68398 | Ranjitha | 23-JUN-2020 | If we have only one receipt with 0. cancel the batch as it is NRM status
                    , sum(receipt_amount) tot_amt
                      INTO l_count,
                      l_tot_amt
                      --<< FP 68398 | Ranjitha| 23-JUN-2020  | If we have only one receipt with 0. cancel the batch as it is NRM status

                      FROM xxmm_receipts
                     WHERE receipt_batch_id =
                               r_rb_receipt_submit.receipt_batch_id;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        l_count := 0;
                        l_tot_amt := 0;
                END;

                 -->> FP 68398 | Ranjitha | 23-JUN-2020 | If we have only one receipt with 0. cancel the batch as it is NRM status
                IF l_count > 0 and l_tot_amt != 0
                --<< FP 68398 | Ranjitha | 23-JUN-2020 | If we have only one receipt with 0. cancel the batch as it is NRM status
                 THEN
                    l_receipt_batch_status :=
                        xxmm_constants.gc_rec_batch_status_lockreview;   --LRW

                    xxmm_create_receipts.update_receipt_batch_status (
                        r_rb_receipt_submit.receipt_batch_id,
                        NULL,
                        l_receipt_batch_status);

                    IF l_straight_thru_rev = 'Y'
                    THEN
                        l_receipt_batch_status :=
                            xxmm_constants.gc_rec_batch_status_reviewed; --REW

                        xxmm_create_receipts.update_receipt_batch_status (
                            r_rb_receipt_submit.receipt_batch_id,
                            NULL,
                            l_receipt_batch_status);


                        l_receipt_status :=
                            xxmm_constants.gc_receipt_status_reviewed;   --REW

                        xxmm_create_receipts.update_receipt_status (
                            r_rb_receipt_submit.receipt_batch_id,
                            -- NULL,
                            l_receipt_status);
                    END IF;
                ELSE
                    l_receipt_batch_status :=
                        xxmm_constants.gc_rec_batch_status_cancel;       --CAN

                    xxmm_create_receipts.update_receipt_batch_status (
                        r_rb_receipt_submit.receipt_batch_id,
                        NULL,
                        l_receipt_batch_status);
                END IF;


                COMMIT;

                IF     r_rb_receipt_submit.receipt_batch_type =
                           xxmm_constants.gc_rec_batch_type_auto       --'AUT'
                   --AND r_rb_receipt_submit.funding_method = xxmm_constants.gc_debit_pull_fund_meth --'00'   Debit Pull
                   -- AND r_rb_receipt_submit.country = 'CA'
                   AND l_straight_thru_rev = 'Y'
                   AND l_straight_thru_rem = 'Y'
                THEN
                    --Call IMMS Create Remittance Batches - receipts


                    IF l_receipt_batch_status =
                           xxmm_constants.gc_pay_batch_status_reviewed
                    THEN
                        l_request_id :=
                            xxmm_request.submit_request (
                                p_application   => 'XXMM',
                                p_program       => 'XXMM_REMITTANCE_AUTO_CREATE',
                                p_wait          => 0, -- Wait until the Program Completes
                                p_argument1     => 'RCT',
                                p_argument2     => p_remit_thru_date, --xxmm_timezones.get_ou_date (SYSDATE, g_org_id),
                                p_argument3     => r_rb_receipt_submit.funding_method,
                                p_argument4     => r_rb_receipt_submit.bank_acc_id_intended_stlmt,
                                p_argument5     => r_rb_receipt_submit.receipt_batch_id,
                                p_print         => TRUE,
                                p_org_id        => g_org_id);
                    END IF;

                    log_file (' Request ID Submitted:  ' || l_request_id);
                --commit;

                END IF;

                l_msg :=
                       'Receipt Batch ID is: '
                    || r_rb_receipt_submit.receipt_batch_id
                    || ' Receipt Batch Number is: '
                    || r_rb_receipt_submit.receipt_batch_number
                    || 'Receipt Batch Status is : '
                    || r_rb_receipt_submit.status;
                log_file (l_msg);
            END LOOP;
        END IF;

        COMMIT;
        -->> END PWR 17-121 Rel 4.5 | 07-MAY-2018  CQ - Sprint 1 - US US988191 - Debit Pull Straight Thru Processing | Muhammad Imran Qureshiand George Felian
        log_message ('Ending << ' || l_program_unit);
        log_file ('Ending << ' || l_program_unit);
    EXCEPTION
        WHEN OTHERS
        THEN
            -->>UAT7075 | Mamtha Babu | 20-NOV-2012
            --g_err_msg is already populated with the appropriate error messages in hte procedures which are called from conc_main.
            --So the below statement with l_msg is misleading and hence commenting it out
            -- g_err_msg   :=   'OTHER EXCEPTION, the error text is : '||l_msg;
            --log_file    (g_err_msg);
            --<<UAT7075 | Mamtha Babu | 20-NOV-2012

            log_message (g_err_msg);
            log_error (g_err_msg, xxmm_constants.msg_type_error);

            p_retcode := 2;
            p_errbuf := g_err_msg;
            raise_application_error (-20099, g_err_msg);
    END conc_main;


    --
    -- Start Naeem 18-NOV-2014
    --

    FUNCTION extract_control_number_name (p_reference    VARCHAR2,
                                          p_attr         VARCHAR2)
        RETURN VARCHAR2
    IS
        l_control_name     VARCHAR2 (100);
        l_ctrl_number      VARCHAR2 (30) := NULL;
        l_control_number   VARCHAR2 (30) := NULL;
        l_type             VARCHAR2 (10);
        l_start_point      VARCHAR2 (10);
        l_length           VARCHAR2 (10);
        l_ctrl_text        VARCHAR2 (30) := NULL;
        l_cnt1             NUMBER := 0;
        l_cnt2             NUMBER := 0;
        l_cnt3             NUMBER := 0;
        l_reference        VARCHAR2 (200) := NULL;
    BEGIN
        SELECT al.lookup_code, al.attribute1, al.attribute2
          INTO l_type, l_start_point, l_length
          FROM xxmm_lookups al, xxmm_lookup_types alt
         WHERE     alt.lookup_type_id = al.lookup_type_id
               AND alt.lookup_type =
                       xxmm_constants.gc_control_name_extract_lt
               -- AND p_reference LIKE al.lookup_code || '%' --Karen Jiang |Sept 15,2014|extract first three char from bank reference field as type code
               AND TRIM (SUBSTR (p_reference, 1, 3)) = al.lookup_code;

        log_file (p_reference);

        IF ASCII (
               SUBSTR (p_reference,
                       LENGTH (p_reference),
                       LENGTH (p_reference))) = '13'
        THEN
            l_reference := SUBSTR (p_reference, 1, LENGTH (p_reference) - 1);
        ELSE
            l_reference := p_reference;
        END IF;

        log_file (l_reference);


        IF p_attr = 'NAME'
        THEN
            --dbms_output.put_line('p_attr is ; "'||p_attr||'"');
            l_control_name :=
                TRIM (
                    SUBSTR (l_reference,
                            LENGTH (l_type) + TO_NUMBER (l_start_point),
                            TO_NUMBER (l_length)));

            RETURN (l_control_name);
        ELSIF p_attr = 'NUMBER'
        THEN
            log_file ('p_attr is ; "' || p_attr || '"');

            IF TRIM (SUBSTR (l_reference, 1, 3)) = 'TFR'
            THEN
                --log_file('l_reference is ; "'||l_reference||'"');
                l_ctrl_number :=
                    SUBSTR (
                        xxmm_utilities.parse_string (l_reference, '*', 3),
                        1,
                        5);
                log_file ('l_ctrl_number is ; "' || l_ctrl_number || '"');

                l_ctrl_number := RPAD (l_ctrl_number, 5, ' ');

                IF NOT valid_control_number (LTRIM (RTRIM (l_ctrl_number)))
                THEN
                    log_file (
                           '1st Try extracted l_ctrl_number "'
                        || l_ctrl_number
                        || '" is Not Valid. ');

                    l_ctrl_number :=
                        SUBSTR (
                            xxmm_utilities.parse_string (l_reference, '*', 3),
                              INSTR (
                                  xxmm_utilities.parse_string (l_reference,
                                                               '*',
                                                               3),
                                  ' ',
                                  -1)
                            - 5,
                            5);

                    log_file (
                           '2nd try extracted l_ctrl_number is "'
                        || l_ctrl_number
                        || '"');

                    l_ctrl_number := RPAD (LTRIM (l_ctrl_number), 5, ' ');

                    --log_file ('AAA l_ctrl_number is ; "'||l_ctrl_number||'"');

                    IF NOT valid_control_number (
                               LTRIM (RTRIM (l_ctrl_number)))
                    THEN
                        log_file (
                               '2nd try extracted l_ctrl_number is Not Valid "'
                            || l_ctrl_number
                            || '"');
                        log_file (' l_reference is "' || l_reference || '"');

                        l_cnt1 := INSTR (l_reference, '*', -2) + 1;
                        l_cnt2 := INSTR (l_reference, '*', -1);
                        l_cnt3 := NVL (l_cnt2, 0) - NVL (l_cnt1, 0);
                        --l_cnt1  :=  nvl(l_cnt1,0) + 1;

                        log_file (' l_cnt1 is : "' || l_cnt1 || '"');
                        log_file (' l_cnt2 is : "' || l_cnt2 || '"');
                        log_file (' l_cnt3 is : "' || l_cnt3 || '"');

                        --l_ctrl_text :=  substr(p_reference, instr(p_reference,'*',-2) + 1, instr(p_reference,'*',-1) - instr(p_reference,'*',-2)-1);
                        l_ctrl_text := SUBSTR (l_reference, l_cnt1, l_cnt3);

                        l_cnt1 := 5;
                        l_cnt2 := LENGTH (l_ctrl_text);

                        log_file (
                            'AAA l_ctrl_text is : "' || l_ctrl_text || '"');
                        log_file ('BBB l_cnt1 is : "' || l_cnt1 || '"');
                        log_file ('CCC l_cnt2 is : "' || l_cnt2 || '"');
                        log_file ('DDD l_cnt3 is : "' || l_cnt3 || '"');

                        FOR i IN l_cnt1 .. l_cnt3
                        LOOP
                            IF SUBSTR (l_ctrl_text, i, 1) NOT IN (' ', '*')
                            THEN
                                l_ctrl_number := SUBSTR (l_ctrl_text, i, 4);

                                log_file (
                                       'Now the extracted l_ctrl_number is  "'
                                    || l_ctrl_number
                                    || '"');

                                IF NOT valid_control_number (
                                           LTRIM (RTRIM (l_ctrl_number)))
                                THEN
                                    log_file (
                                           'The extractd l_ctrl_number "'
                                        || l_ctrl_number
                                        || '" is Not Valid.');
                                ELSE
                                    l_ctrl_number :=
                                        RPAD (l_ctrl_number, 5, ' ');
                                    log_file (
                                           'The extracted l_ctrl_number "'
                                        || l_ctrl_number
                                        || '" is VALID.');

                                    EXIT;
                                END IF;
                            END IF;
                        END LOOP;
                    END IF;
                END IF;
            ELSE
                --log_file ('p_reference is ; "'||p_reference||'"');
                l_reference := RTRIM (l_reference);

                l_ctrl_number :=
                    SUBSTR (
                        xxmm_utilities.clean_special_chars (l_reference),
                          LENGTH (l_type)
                        + TO_NUMBER (l_start_point)
                        + TO_NUMBER (l_length),
                        5);
                log_file (
                       'The extracted l_ctrl_number is ; "'
                    || l_ctrl_number
                    || '"');

                l_ctrl_number := RPAD (l_ctrl_number, 5, ' ');

                IF NOT valid_control_number (LTRIM (RTRIM (l_ctrl_number)))
                THEN
                    log_file (
                           'Try 1 extracted l_ctrl_number "'
                        || l_ctrl_number
                        || '" is Not Valid.');

                    l_ctrl_number :=
                        SUBSTR (l_reference,
                                INSTR (l_reference, ' ', -1) + 1,
                                4);

                    log_file (
                           'Try 2 extrcated l_ctrl_number is "'
                        || l_ctrl_number
                        || '"');

                    IF NOT valid_control_number (
                               LTRIM (RTRIM (l_ctrl_number)))
                    THEN
                        log_file (
                               'Try 2 extrcated l_ctrl_number is "'
                            || l_ctrl_number
                            || '" is Not Valid');

                        l_ctrl_number := '~~~~';
                    END IF;

                    l_ctrl_number := RPAD (LTRIM (l_ctrl_number), 5, ' ');
                END IF;
            END IF;

            log_file (' l_ctrl_number is ; "' || l_ctrl_number || '"');


            IF SUBSTR (l_ctrl_number, 5, 1) = ' '
            THEN
                l_control_number := SUBSTR (l_ctrl_number, 1, 4);
                log_file (
                    'The l_control_number is ; "' || l_control_number || '"');
            ELSE
                l_control_number := '~~~~';
                log_file (
                       ' returning invalid l_control_number "'
                    || l_control_number
                    || '"');
            END IF;


            RETURN (l_control_number);
        END IF;
    EXCEPTION
        WHEN OTHERS
        THEN
            RETURN (p_reference);
    END extract_control_number_name;



    --
    --  End  Naeem 18-NOV-2014
    --

    --Extract control name string for matching from reference field according to the lookup start position and length
    FUNCTION extract_control_name (p_reference VARCHAR2)
        RETURN VARCHAR2
    IS
        l_control_name   VARCHAR2 (100);
        l_type           VARCHAR2 (10);
        l_start_point    VARCHAR2 (10);
        l_length         VARCHAR2 (10);
    BEGIN
        SELECT al.lookup_code, al.attribute1, al.attribute2
          INTO l_type, l_start_point, l_length
          FROM xxmm_lookups al, xxmm_lookup_types alt
         WHERE     alt.lookup_type_id = al.lookup_type_id
               AND alt.lookup_type =
                       xxmm_constants.gc_control_name_extract_lt
               -- AND p_reference LIKE al.lookup_code || '%' --Karen Jiang |Sept 15,2014|extract first three char from bank reference field as type code
               AND TRIM (SUBSTR (p_reference, 1, 3)) = al.lookup_code;

        l_control_name :=
            TRIM (
                SUBSTR (p_reference,
                        LENGTH (l_type) + TO_NUMBER (l_start_point),
                        TO_NUMBER (l_length)));

        RETURN l_control_name;
    EXCEPTION
        WHEN OTHERS
        THEN
            RETURN p_reference;
    END extract_control_name;

    /*
       ************************************************************************
       *            COPYRIGHT (c) 2016 ADP Canada, Financial Systems          *
       ************************************************************************
       *                                                                      *
       * Module Name  : clean_special_characters                              *
       * Module Type  : PL/SQL Procedure                                      *
       * Purpose      : Procedure to clean any special charaters if present   *
       ************************************************************************
       *                            BIBLIOGRAPHY                              *
       ************************************************************************
       *                                                                      *
       ************************************************************************
       *   Date       |      Author          |  SCR    | Remarks              *
       ************************************************************************
       * 01/03/2016    Arun Bacha             R Q3 PWR EU 15-600                                                        *
       ************************************************************************
       */

    FUNCTION clean_special_chars (str_in VARCHAR2)
        RETURN VARCHAR2
    IS
        str_out     VARCHAR2 (2550);
        ch          VARCHAR2 (10);
        v_str_out   VARCHAR2 (2550);


        CURSOR c1
        IS
            SELECT lookup_code
              FROM xxmm_lookups al, xxmm_lookup_types alt
             WHERE     alt.lookup_type_id = al.lookup_type_id
                   AND alt.lookup_type = 'XXMM_SPECIAL_CHARACTERS'
                   and al.enabled_flag= 'Y'; --  George Felian   26-MAY-2020       IMM 20-253 UK Intraday Receipt Logic
    BEGIN
        str_out := ' ';

        v_str_out := str_in;

        FOR rec IN c1
        LOOP
            ch := CHR (rec.lookup_code);
            v_str_out := REPLACE (v_str_out, ch, '');
        END LOOP;

        str_out := v_str_out;

        RETURN str_out;
    END clean_special_chars;

    --Remove the  defined strings in lookup from control name
    FUNCTION strip_control_name (p_control_name VARCHAR2)
        RETURN VARCHAR2
    IS
        CURSOR c1
        IS
              SELECT meaning
                FROM xxmm_lookups al, xxmm_lookup_types alt
               WHERE     alt.lookup_type_id = al.lookup_type_id
                     AND alt.lookup_type =
                             xxmm_constants.gc_ctrl_match_exclusions_lt
                 and al.enabled_flag= 'Y' --  George Felian   26-MAY-2020       IMM 20-253 UK Intraday Receipt Logic
            ORDER BY al.lookup_code;


        l_control_name   VARCHAR2 (100);
    BEGIN
        /*
        l_control_name := REPLACE (UPPER (p_control_name), ' ', '');

        FOR rec IN c1
        LOOP
           l_control_name := REPLACE (l_control_name, UPPER (rec.meaning), '');
        END LOOP;
       */
        --dbms_output.put_line('p_control_name is '||p_control_name);

        l_control_name := UPPER (p_control_name);

        --dbms_output.put_line('UPPER(p_control_name) is '||l_control_name);

        FOR rec IN c1
        LOOP
            --    dbms_output.put_line('rec.meaning is '||rec.meaning);
            l_control_name :=
                REPLACE (l_control_name, UPPER (rec.meaning), '');
        --dbms_output.put_line('l_control_name is '||l_control_name);

        END LOOP;

        l_control_name := REPLACE (UPPER (l_control_name), ' ', '');

        -- dbms_output.put_line('Returning l_control_name is '||l_control_name);



        RETURN l_control_name;
    EXCEPTION
        WHEN OTHERS
        THEN
            log_file ('Function strip_control_name failed.');
            RETURN UPPER (p_control_name);
    END strip_control_name;


    /*
        ************************************************************************
        *            COPYRIGHT (c) 2016 ADP Canada, Financial Systems          *
        ************************************************************************
        *                                                                      *
        * Module Name  : get_control_number_nl_fr                                          *
        * Module Type  : PL/SQL Procedure                                      *
        * Purpose      : Procedure to extract the number from the bank reference*
        *               information fields                                     *
        ************************************************************************
        *                            BIBLIOGRAPHY                              *
        ************************************************************************
        *                                                                      *
        ************************************************************************
        *   Date       |      Author          |  SCR    | Remarks              *
        ************************************************************************
        * 01/03/2016    Arun Bacha             R Q3 PWR EU 15-600                                                        *
        ************************************************************************
        */
    FUNCTION get_control_number_nl_fr (
        control_info       IN VARCHAR2,
        p_control_number   IN xxmm_customer_controls.control_number%TYPE)
        RETURN VARCHAR2
    IS
        control_num_info     VARCHAR2 (255);

        -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 || Insert  the numerical chunks into the pl/sql table
        TYPE control_record_list
            IS TABLE OF xxmm_customer_controls.control_number%TYPE
            INDEX BY BINARY_INTEGER;

        --<< PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 || Insert  the numerical chunks into the pl/sql table
        control_record       control_record_list;
        l_count              NUMBER := 0;
        -->>FP 64945   || ARUN BACHA || 17-MAY-2016 || Added the list variable to store all the possible control numbers
        control_number_act   control_record_list;             --VARCHAR2 (16);
        l_flag               VARCHAR2 (15);
        --<<FP 64945   || ARUN BACHA || 17-MAY-2016 || Added the list variable to store all the possible control numbers
        l_length_zero_pad    NUMBER;
        i                    BINARY_INTEGER := 0;
    BEGIN
        -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 || Extract the control name only if the lookup code exists
        IF xxmm_lookup_utilities.lookup_code_exist (
               NULL,
               xxmm_constants.gc_err_code_lt,
               g_extrct_control_name)
        THEN
            --<< PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 || Extract the control name only if the lookup code exists
            -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 || Extract the numerical part in the control number
            control_num_info :=
                TRIM (REGEXP_REPLACE (control_info, '[^0-9]+', ' '));

            --<< PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 || Extract the numerical part in the control number
            -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 || Check for the control with the numerical chunks
            WHILE (LENGTH (control_num_info) > 0)
            LOOP
                IF (INSTR (control_num_info, ' ') > 0)
                THEN
                    control_record (i) :=
                        TRIM (
                            SUBSTR (control_num_info,
                                    1,
                                    INSTR (control_num_info, ' ')));
                ELSE
                    control_record (i) := TRIM (control_num_info);
                END IF;

                control_num_info :=
                    TRIM (
                        SUBSTR (control_num_info,
                                (LENGTH (control_record (i)) + 1)));
                i := i + 1;
            END LOOP;

            i := 0;

            FOR x IN control_record.FIRST .. control_record.LAST
            LOOP
                BEGIN
                    IF (LENGTH (control_record (x)) < 12)
                    THEN
                        l_length_zero_pad := 12 - LENGTH (control_record (x));

                        FOR lcntr IN 1 .. l_length_zero_pad
                        LOOP
                            control_record (x) := '0' || control_record (x);
                        END LOOP;
                    END IF;

                    SELECT xcc.control_number
                      INTO control_number_act (i)
                      FROM xxmm_customer_controls xcc
                     WHERE DECODE (
                               LENGTH (xcc.control_number),
                               1, CONCAT ('00000000000', xcc.control_number),
                               2, CONCAT ('0000000000', xcc.control_number),
                               3, CONCAT ('000000000', xcc.control_number),
                               4, CONCAT ('00000000', xcc.control_number),
                               5, CONCAT ('0000000', xcc.control_number),
                               6, CONCAT ('000000', xcc.control_number),
                               7, CONCAT ('00000', xcc.control_number),
                               8, CONCAT ('0000', xcc.control_number),
                               9, CONCAT ('000', xcc.control_number),
                               10, CONCAT ('00', xcc.control_number),
                               11, CONCAT ('0', xcc.control_number),
                               12, xcc.control_number,
                               CONCAT ('000000', xcc.control_number)) =
                               control_record (x);

                    i := i + 1;

                    l_count := l_count + 1;
                --<< PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 || Check for the control with the numerical chunks
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        l_count := l_count;
                    WHEN OTHERS
                    THEN
                        l_count := l_count;
                END;

                -->>FP64945    || ARUN BACHA || 17-MAY-2016 || Added the condition to return no match when we found multiple control numbers while creating unapplied receipts
                IF l_count > 1 AND p_control_number IS NULL --<<FP64945   || ARUN BACHA || 17-MAY-2016 || Added the condition to return no match when we found multiple control numbers while creating unapplied receipts
                THEN
                    RETURN 'NO_MATCH';
                END IF;
            END LOOP;

            i := 0;

            -->>FP64945 || ARUN BACHA || 17-MAY-2016 || Added the condition to return no match when we found multiple control numbers while creating unapplied receipts
            IF l_count > 1 AND p_control_number IS NOT NULL
            THEN
                FOR x IN 0 .. (l_count - 1)
                LOOP
                    IF UPPER (control_number_act (x)) =
                           UPPER (p_control_number)
                    THEN
                        RETURN control_number_act (x);
                    END IF;
                END LOOP;
            END IF;

            --<<FP64945 || ARUN BACHA || 17-MAY-2016 || Added the condition to return no match when we found multiple control numbers while creating unapplied receipts
            IF l_count = 1
            THEN
                RETURN control_number_act (0);
            ELSE
                RETURN 'NO_MATCH';
            END IF;
        ELSE
            RETURN control_info;
        END IF;
    EXCEPTION
        WHEN OTHERS
        THEN
            RETURN 'NO_MATCH';
    END get_control_number_nl_fr;

    /*
    ************************************************************************
    *            COPYRIGHT (c) 2016 ADP Canada, Financial Systems          *
    ************************************************************************
    *                                                                      *
    * Module Name  : MATCH_ORG_CONTROL                                     *
    * Module Type  : PL/SQL Procedure                                      *
    * Purpose      : Procedure to check whether ORG  account number in the *
    *                file is similar to the ORG account for the Control and*
    *              if it doesn't match then the lines are inserted into GTT*
    ************************************************************************
    *                            BIBLIOGRAPHY                              *
    ************************************************************************
    *                                                                      *
    ************************************************************************
    *   Date       |      Author          |  SCR    | Remarks              *
    ************************************************************************
    * 01/03/2016    Arun Bacha             R Q3 PWR EU 15-600                                                        *
    ************************************************************************
    */

    PROCEDURE match_org_control (p_org_account   IN VARCHAR2,
                                 p_control_id    IN VARCHAR2
                                  )
    IS
        l_org_account         VARCHAR2 (30);
        l_control_name        VARCHAR2 (50);
        l_control_number      VARCHAR2 (12);
        -->>START  George Felian 28-JUN-2016 PWR EU-15-600 US477483 Start
        l_org_account_name    xxmm_bank_accounts.account_name%TYPE;
        -->>END  George Felian 28-JUN-2016 PWR EU-15-600 US477483 END
        -->>FP64945  || Arun Bacha || MAY 2016 || Added the variable whichis set to true when a ORG account is present in IMMS and we couldn't Identify the control
        l_org_exists          BOOLEAN DEFAULT FALSE;
        l_org_account_match   VARCHAR2 (1) DEFAULT 'N';
    --<<FP64945    || Arun Bacha || MAY 2016 || Added the variable whichis set to true when a ORG account is present in IMMS and we couldn't Identify the control
    BEGIN
        -->>FP64945 || Arun Bacha || MAY 2016 || Added the condition to check the particular ORG exists for the control
        IF p_control_id IS NOT NULL
        THEN
            --<< FP64945   || Arun Bacha || MAY 2016 || Added the condition to check the particular ORG exists for the control
            -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 || Get the control info and the most recent org account associated to the control
            IF p_org_account IS NOT NULL
            THEN
                BEGIN
                    SELECT xcc.control_name,
                           xcc.control_number,
                           xba.account_number,
                           -->>START  George Felian 28-JUN-2016 PWR EU-15-600 US477483 Start
                           'Y'
                      -->>END  George Felian 28-JUN-2016 PWR EU-15-600 US477483 END
                      INTO l_control_name,
                           l_control_number,
                           l_org_account,
                           l_org_account_match
                      FROM xxmm_customer_controls xcc,
                           xxmm_bank_accounts xba,
                           xxmm_bank_account_uses xbau
                     WHERE -->>FP64945   || Arun Bacha || MAY 2016 || Added the condition to check the particular ORG exists for the control
                          xcc  .control_id = p_control_id
                           --<<FP64945   || Arun Bacha || MAY 2016 || Added the condition to check the particular ORG exists for the control
                           AND xbau.bank_account_id = xba.bank_account_id
                           AND xbau.account_usage_type =
                                   xxmm_constants.gc_org_acc_usage_type
                           AND xbau.entity_id = xcc.control_id
                           AND (   xba.account_number = p_org_account --<<START  George Felian 28-JUN-2016 PWR EU-15-600 US477483 Start
                                OR DECODE (
                                       g_check_sort_code,
                                       'Y', REPLACE (
                                                SUBSTR (
                                                    xba.account_name,
                                                    INSTR (xba.account_name,
                                                           ' ',
                                                           1)),
                                                ' ',
                                                ''),
                                       '@@@@') = p_org_account) -->><END  George Felian 28-JUN-2016 PWR EU-15-600 US477483
                           AND xbau.effective_end_date IS NULL;
                -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 || Get the control info and the most recent org account associated to the contr
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        NULL;
                END;
            END IF;

            -->> FP64945   || Arun Bacha || MAY 2016 || Added the condition to check any ORG exists for the control
            IF p_org_account IS NULL OR l_org_account IS NULL
            THEN
                BEGIN
                    SELECT xcco.control_name,
                           xcco.control_number,
                           xcab.account_number
                      INTO l_control_name, l_control_number, l_org_account
                      FROM xxmm_customer_controls xcco,
                           (  SELECT xba.account_number, xcc.control_id
                                FROM xxmm_customer_controls xcc,
                                     xxmm_bank_account_uses xbau,
                                     xxmm_bank_accounts xba
                               WHERE     xcc.control_id = p_control_id
                                     AND xbau.bank_account_id =
                                             xba.bank_account_id(+)
                                     AND xbau.account_usage_type =
                                             xxmm_constants.gc_org_acc_usage_type
                                     AND xbau.entity_id = xcc.control_id
                                     AND xbau.effective_end_date IS NULL
                            ORDER BY xbau.effective_start_date DESC) xcab
                     WHERE     xcco.control_id = p_control_id
                           AND xcab.control_id(+) = xcco.control_id
                           AND ROWNUM = 1;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        BEGIN
                            SELECT control_name, control_number
                              INTO l_control_name, l_control_number
                              FROM xxmm_customer_controls
                             WHERE control_id = p_control_id;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                l_control_number := NULL;
                                l_control_name := NULL;
                                l_org_account := NULL;
                        END;
                END;
            END IF;

            -->> FP64945 || Arun Bacha || MAY 2016 || Added the condition to check any ORG exists for the control
            -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 || Inserting into the GTT depending on the transaction type
            -->>START  George Felian 28-JUN-2016 PWR EU-15-600 US477483 Start
            IF l_org_account_match = 'N'
            THEN
                /*NVL (l_org_account, '0') <> NVL (p_org_account, '00')
                   -->>START  George Felian 28-JUN-2016 PWR EU-15-600 US477483 Start
             THEN
                    IF (g_check_sort_code ='Y'
                         AND REPLACE(SUBSTR(l_org_account_name,INSTR(l_org_account_name,' ',1)),' ','') <> NVL (p_org_account, '00') )
                   -->>END  George Felian 28-JUN-2016 PWR EU-15-600 US477483 END
                   THEN  */
                -->> George Felian 28-JUN-2016 PWR EU-15-600 US477483 END
                g_itd_rpt_trx_cnt := g_itd_rpt_trx_cnt + 1;

                IF p_org_account IS NULL
                THEN
                    INSERT INTO xxmm_itd_report_gtt (org_category,
                                                     control_number,
                                                     control_name,
                                                     control_org_account,
                                                     bank_org_account)
                         VALUES (g_org_acc_null_bank_acc,
                                 l_control_number,
                                 l_control_name,
                                 l_org_account,
                                 p_org_account);
                ELSIF l_org_account IS NULL
                THEN
                    INSERT INTO xxmm_itd_report_gtt (org_category,
                                                     control_number,
                                                     control_name,
                                                     control_org_account,
                                                     bank_org_account)
                         VALUES (g_org_acc_not_exist,
                                 l_control_number,
                                 l_control_name,
                                 l_org_account,
                                 p_org_account);
                ELSE
                    INSERT INTO xxmm_itd_report_gtt (org_category,
                                                     control_number,
                                                     control_name,
                                                     control_org_account,
                                                     bank_org_account)
                         VALUES (g_org_acc_mismatch,
                                 l_control_number,
                                 l_control_name,
                                 l_org_account,
                                 p_org_account);
                END IF;
            END IF;
        ELSIF p_control_id IS NULL AND p_org_account IS NULL
        THEN
            g_no_bank_org_trn_cnt := g_no_bank_org_trn_cnt + 1; -- NO ORG ACCT IN BANK FILE AND NO CONTROL IDENTIFED TRANSACTIONS
        ELSIF p_control_id IS NULL AND p_org_account IS NOT NULL
        THEN
            -->> FP64945   || Arun Bacha || MAY 2016 || Added the below code to chech whether a ORG account exists in IMMS
            BEGIN
                SELECT xcc.control_name,
                       xcc.control_number,
                       xba.account_number
                  INTO l_control_name, l_control_number, l_org_account
                  FROM xxmm_customer_controls xcc,
                       xxmm_bank_accounts xba,
                       xxmm_bank_account_uses xbau
                 WHERE     xbau.bank_account_id = xba.bank_account_id
                       AND xbau.entity_id = xcc.control_id
                       AND xbau.account_usage_type =
                               xxmm_constants.gc_org_acc_usage_type
                       AND (   xba.account_number = p_org_account --<<START  George Felian 28-JUN-2016 PWR EU-15-600 US477483 Start
                            OR DECODE (
                                   g_check_sort_code,
                                   'Y', REPLACE (
                                            SUBSTR (
                                                xba.account_name,
                                                INSTR (xba.account_name,
                                                       ' ',
                                                       1)),
                                            ' ',
                                            ''),
                                   '@@@@') = p_org_account) -->><END  George Felian 28-JUN-2016 PWR EU-15-600 US477483
                       AND xbau.effective_end_date IS NULL;

                l_org_exists := TRUE;
            EXCEPTION
                WHEN TOO_MANY_ROWS
                THEN
                    l_org_exists := TRUE;
                WHEN OTHERS
                THEN
                    NULL;
            END;

            -- g_itd_rpt_trx_cnt := g_itd_rpt_trx_cnt + 1;

            IF NOT l_org_exists
            THEN
                -->>FP64945   || Arun Bacha || MAY 2016 || Added the below code to chech whether a ORG account exists in IMMS
                g_itd_rpt_trx_cnt := g_itd_rpt_trx_cnt + 1;

                INSERT INTO xxmm_itd_report_gtt (org_category,
                                                 control_number,
                                                 control_name,
                                                 control_org_account,
                                                 bank_org_account)
                     VALUES (g_org_acc_not_exist,
                             NULL,
                             NULL,
                             NULL,
                             p_org_account);
            END IF;
        END IF;
    -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 || Inserting into the GTT depending on the transaction type
    END match_org_control;

  /*
    ************************************************************************
    *            COPYRIGHT (c) 2016 ADP Canada, Financial Systems          *
    ************************************************************************
    *                                                                      *
    * Module Name  : MATCH_ORG_CONTROL_UK                                  *
    * Module Type  : PL/SQL Procedure                                      *
    * Purpose      : Procedure to check whether ORG  account number in the *
    *                file is similar to the ORG account for the Control and*
    *              if it doesn't match then the lines are inserted into GTT*.
    *                                                                      *
    *          This Program is a copy off MATCH_ORG_CONTROL This program    *
    *        Insert into XXMM_ITD_REPORT_GTT and table  XXMM_ITD_REPORT_ALL*
    *                                                                      *
    ************************************************************************
    *                            BIBLIOGRAPHY                              *
    ************************************************************************
    *                                                                      *
    ************************************************************************
    *   Date       |      Author          |  SCR    | Remarks              *
    ************************************************************************
    * 26-MAY-2020  George Felian      IMM 20-253 UK Intraday Receipt Logic *
    * 14-JUL-2020  George Felian       FP68480 - Correct UK ITD Exceptions *
    *                                  Re-write procedure                 .*
    ************************************************************************
    */



/* Formatted on 7/16/2020 4:47:05 PM (QP5 v5.215.12089.38647) */
PROCEDURE match_org_control_uk (p_org_account           IN VARCHAR2,
                                p_control_id            IN VARCHAR2,
                                p_inbound_file_id       IN NUMBER,
                                p_bank_reference_no     IN VARCHAR2,
                                p_bank_control_number      VARCHAR2)
IS
   l_org_account          VARCHAR2 (30);
   l_org_account_miss     VARCHAR2 (30);
   l_control_name         VARCHAR2 (50);
   l_control_number       VARCHAR2 (12);
   l_control_name_dup     VARCHAR2 (50);
   l_control_number_dup   VARCHAR2 (12);
   l_org_account_dup_yn   VARCHAR2 (1) DEFAULT 'N';
   r_xxmm_itd_report      xxmm_itd_report%ROWTYPE;
BEGIN
   -->> START 26-MAY-2020  George Felian      IMM 20-253 UK Intraday Receipt Logic
   -- 26-MAY-2020  George Felian Initialize xxmm_itd_report_all columns
   r_xxmm_itd_report.creation_date := g_creation_date;
   r_xxmm_itd_report.created_by := g_created_by;
   r_xxmm_itd_report.last_update_date := g_last_update_date;
   r_xxmm_itd_report.last_updated_by := g_last_updated_by;
   r_xxmm_itd_report.last_update_login := g_last_update_login;
   r_xxmm_itd_report.concurrent_request_id := g_request_id;
   r_xxmm_itd_report.org_id := g_org_id;
   r_xxmm_itd_report.inbound_file_id := p_inbound_file_id;
   r_xxmm_itd_report.receipt_id := g_receipt_id;
   r_xxmm_itd_report.receipt_batch_id := g_batch_id;
   r_xxmm_itd_report.receipt_batch_date := g_batch_date;
   r_xxmm_itd_report.bank_org_account := p_org_account;
   r_xxmm_itd_report.bank_reference_no := p_bank_reference_no;
   r_xxmm_itd_report.bank_control_number := p_bank_control_number;

   BEGIN
      -- Verify Originator account exists
      SELECT xba.account_number, ctrl.control_number, ctrl.control_name
        INTO l_org_account, l_control_number, l_control_name
        FROM xxmm_customer_controls ctrl,
             xxmm_bank_accounts xba,
             xxmm_bank_account_uses xbau
       WHERE     ctrl.control_id = xbau.entity_id
             AND TRUNC (SYSDATE) BETWEEN TRUNC (
                                            NVL (xba.effective_start_date,
                                                 SYSDATE))
                                     AND TRUNC (
                                            NVL (xba.effective_end_date,
                                                 SYSDATE))
             AND TRUNC (SYSDATE) BETWEEN TRUNC (
                                            NVL (xbau.effective_start_date,
                                                 SYSDATE))
                                     AND TRUNC (
                                            NVL (xbau.effective_end_date,
                                                 SYSDATE))
             AND xba.account_number = LTRIM (p_org_account)
             AND xbau.entity_id = NVL (ctrl.control_id, xbau.entity_id)
             AND xbau.account_usage_type =
                    xxmm_constants.gc_org_acc_usage_type
             AND xbau.entity_type = xxmm_constants.gc_entity_type
             AND xba.bank_account_id = xbau.bank_account_id;

      r_xxmm_itd_report.control_name := l_control_name;
      r_xxmm_itd_report.control_number := l_control_number;
      r_xxmm_itd_report.control_org_account := l_org_account;
   EXCEPTION
      WHEN TOO_MANY_ROWS
      THEN
         -- If too many rows exsit for org accoun tand we can identifi  client - no excpeption
         BEGIN
            SELECT control_name, control_number
              INTO l_control_name, l_control_number
              FROM xxmm_customer_controls
             WHERE control_id = p_control_id;

           -->> START George Felian   29-JUL-2020      FP68480  -IMMS Intraday Receipt Exceptions Report not working as expected
             --  1.  50 of the 70 have a matching Bank Account Number stated in the Bank File Originator Account and Control Originator Account fields, and are therefore not exceptions.
             --  2.  .8 of the 70 don't have a Control Name, Control Number or Control Originator Account stated eventhough the heading states that IMMS has been able to match to a Control.
             --  4 . 4 of the 70 have a Control Name and Control Number stated but do not have a Control Originator Account stated eventhough all 4 have an Originator Account listed in the Control WB within IMMS.
              l_org_account := LTRIM (p_org_account);
           --<< END George Felian   29-JUL-2020      FP68480  -IMMS Intraday Receipt Exceptions Report not working as expected

         EXCEPTION
            WHEN OTHERS
            THEN
               --- If too many rows exsit for org account and unable to identify client

               l_org_account := LTRIM (p_org_account);
               l_control_number := NULL;
               l_control_name := NULL;
         END;
      WHEN OTHERS
      THEN
         -- Get control info  if Originator account does not exists
         BEGIN
            SELECT control_name, control_number
              INTO l_control_name, l_control_number
              FROM xxmm_customer_controls
             WHERE control_id = p_control_id;

            l_org_account := NULL;
            r_xxmm_itd_report.control_name := l_control_name;
            r_xxmm_itd_report.control_number := l_control_number;
         EXCEPTION
            WHEN OTHERS
            THEN
               l_org_account := NULL;
               l_control_number := NULL;
               l_control_name := NULL;

               r_xxmm_itd_report.control_name := NULL;
               r_xxmm_itd_report.control_number := NULL;
         END;
   END;


   -- Get Orignator account if what was not passed does not exist
   -- based on clinet number or name that was passed in the file.
   l_org_account_miss := NULL;
   IF l_org_account is null
   THEN
        BEGIN
            SELECT xba.account_number,
            control_number,
            control_name
            INTO l_org_account_miss,
                 l_control_number,
                 l_control_name
            FROM xxmm_customer_controls ctrl,
                 xxmm_bank_accounts xba,
                 xxmm_bank_account_uses xbau
           WHERE     ctrl.control_id = xbau.entity_id
             AND TRUNC (SYSDATE) BETWEEN TRUNC (
                                            NVL (xba.effective_start_date,
                                                 SYSDATE))
                                     AND TRUNC (
                                            NVL (xba.effective_end_date,
                                                 SYSDATE))
             AND TRUNC (SYSDATE) BETWEEN TRUNC (
                                            NVL (xbau.effective_start_date,
                                                 SYSDATE))
                                     AND TRUNC (
                                            NVL (xbau.effective_end_date,
                                                 SYSDATE))
             AND ctrl.control_id = LTRIM (p_control_id)
             AND xbau.entity_id = NVL (ctrl.control_id, xbau.entity_id)
             AND xbau.account_usage_type =
                    xxmm_constants.gc_org_acc_usage_type
             AND xbau.entity_type = xxmm_constants.gc_entity_type
             AND xba.bank_account_id = xbau.bank_account_id;

             r_xxmm_itd_report.control_name := l_control_name;
             r_xxmm_itd_report.control_number := l_control_number;
             r_xxmm_itd_report.control_org_account := l_org_account_miss;
             --<< START George Felian   29-JUL-2020      FP68480  -IMMS Intraday Receipt Exceptions Report not working as expected
             -- If client has more than one original account - use one with latest effective start date.
             -- 4. 2 of the 70 have a Control Name and Control Number stated however it is incorrect and seems to have been matched based on Control Name eventhough there are multiple name matches
        EXCEPTION
            WHEN TOO_MANY_ROWS
            THEN
                BEGIN

                    SELECT xba.account_number,
                    control_number,
                    control_name
                    INTO l_org_account_miss,
                         l_control_number,
                         l_control_name             FROM xxmm_customer_controls ctrl,
                         xxmm_bank_accounts xba,
                         xxmm_bank_account_uses xbau
                   WHERE     ctrl.control_id = xbau.entity_id
                     AND TRUNC (SYSDATE) BETWEEN TRUNC (
                                                    NVL (xba.effective_start_date,
                                                         SYSDATE))
                                             AND TRUNC (
                                                    NVL (xba.effective_end_date,
                                                         SYSDATE))
                     AND TRUNC (SYSDATE) BETWEEN TRUNC (
                                                    NVL (xbau.effective_start_date,
                                                         SYSDATE))
                                             AND TRUNC (
                                                    NVL (xbau.effective_end_date,
                                                         SYSDATE))
                     AND ctrl.control_id = LTRIM (p_control_id)
                     AND xbau.entity_id = NVL (ctrl.control_id, xbau.entity_id)
                     AND xbau.account_usage_type =
                            xxmm_constants.gc_org_acc_usage_type
                     AND xbau.entity_type = xxmm_constants.gc_entity_type
                     AND xba.bank_account_id = xbau.bank_account_id
                     AND xbau.effective_start_date =
                     (
                            SELECT MAX( xbau2.effective_start_date)
                            FROM xxmm_bank_account_uses xbau2
                            WHERE xbau.entity_id =  xbau2.entity_id
                            AND xbau2.entity_id = LTRIM (p_control_id)
                            AND xbau2.account_usage_type = xxmm_constants.gc_org_acc_usage_type
                            AND xbau2.entity_type = xxmm_constants.gc_entity_type
                    );
                         r_xxmm_itd_report.control_name := l_control_name;
                         r_xxmm_itd_report.control_number := l_control_number;
                         r_xxmm_itd_report.control_org_account := l_org_account_miss;

                 EXCEPTION
                 WHEN OTHERS
                 THEN
                    NULL;
                 END;
                --<< END George Felian   29-JUL-2020      FP68480  -IMMS Intraday Receipt Exceptions Report not working as expected
            WHEN OTHERS
            THEN
           l_org_account_miss := NULL;
           l_control_number := NULL;
           l_control_name := NULL;
        END;
    END IF;

   -- exception-  originator acoount passed does not exist in IMMS or cant be linked to a client
   IF     LTRIM (p_org_account) IS NOT NULL
      AND l_org_account IS NULL
      AND p_control_id IS NULL
   THEN

      INSERT INTO xxmm_itd_report_gtt (org_category,
                                       control_number,
                                       control_name,
                                       control_org_account,
                                       bank_org_account)
           VALUES (g_org_acc_not_exist,
                   l_control_number,
                   l_control_name,
                   NVL(l_org_account,l_org_account_miss),
                   p_org_account);

      g_itd_rpt_trx_cnt := g_itd_rpt_trx_cnt + 1;
      r_xxmm_itd_report.org_category := g_org_acc_not_exist;

      INSERT INTO xxmm_itd_report
           VALUES r_xxmm_itd_report;
   END IF;

   --exception- unable to find originator account, but can be linked to client
   IF     LTRIM (p_org_account) IS NOT NULL
      AND l_org_account IS NULL
      AND p_control_id IS NOT NULL
   THEN
      INSERT INTO xxmm_itd_report_gtt (org_category,
                                       control_number,
                                       control_name,
                                       control_org_account,
                                       bank_org_account)
           VALUES (g_org_acc_mismatch,
                   l_control_number,
                   l_control_name,
                   NVL(l_org_account,l_org_account_miss),
                   p_org_account);

      g_itd_rpt_trx_cnt := g_itd_rpt_trx_cnt + 1;
      r_xxmm_itd_report.org_category := g_org_acc_mismatch;

      INSERT INTO xxmm_itd_report
           VALUES r_xxmm_itd_report;
   END IF;

   --exception  Originator account not passed but can be linked to client
   IF LTRIM (p_org_account) IS NULL AND p_control_id IS NOT NULL
   THEN
      INSERT INTO xxmm_itd_report_gtt (org_category,
                                       control_number,
                                       control_name,
                                       control_org_account,
                                       bank_org_account)
           VALUES (g_org_acc_null_bank_acc,
                   l_control_number,
                   l_control_name,
                   NVL(l_org_account,l_org_account_miss),
                   p_org_account);

      g_itd_rpt_trx_cnt := g_itd_rpt_trx_cnt + 1;
      r_xxmm_itd_report.org_category := g_org_acc_null_bank_acc;

      INSERT INTO xxmm_itd_report
           VALUES r_xxmm_itd_report;
   END IF;

   --exception  Originator account not passed but cannot  be linked to client
   IF LTRIM (p_org_account) IS NULL AND p_control_id IS NULL
   THEN
      INSERT INTO xxmm_itd_report_gtt (org_category,
                                       control_number,
                                       control_name,
                                       control_org_account,
                                       bank_org_account)
           VALUES (g_org_acc_null_bank_acc_ctl,
                   l_control_number,
                   l_control_name,
                    NVL(l_org_account,l_org_account_miss),
                   p_org_account);

      g_itd_rpt_trx_cnt := g_itd_rpt_trx_cnt + 1;
      r_xxmm_itd_report.org_category := g_org_acc_null_bank_acc_ctl;

      INSERT INTO xxmm_itd_report
           VALUES r_xxmm_itd_report;
   END IF;
END match_org_control_uk;


    /*
     ************************************************************************
     *            COPYRIGHT (c) 2016 ADP Canada, Financial Systems          *
     ************************************************************************
     *                                                                      *
     * Module Name  : REL_RISK_HOLD                                         *
     * Module Type  : PL/SQL Procedure                                      *
     * Purpose      : Procedure to check whether the risktier and funding   *
     *               method hold and if exists, remove the hold on the cts  *
     ************************************************************************
     *                            BIBLIOGRAPHY                              *
     ************************************************************************
     *                                                                      *
     ************************************************************************
     *   Date       |      Author          |  SCR    | Remarks              *
     ************************************************************************
     * 01/03/2016    Arun Bacha             R Q3 PWR EU 15-600              *
     ************************************************************************
     */

    PROCEDURE rel_risk_hold (
        p_cts_header_id    IN xxmm_cts_headers.cts_header_id%TYPE,
        p_impound_trx_id   IN xxmm_cts_impound_trx.impound_trx_id%TYPE)
    IS
        l_hold_id             xxmm_cts_holds.hold_id%TYPE;
        l_trx_id              xxmm_cts_holds.entity_id%TYPE;
        l_hold_type           xxmm_cts_holds.hold_entity_type%TYPE;
        l_error_code          VARCHAR2 (500);
        l_program_unit        VARCHAR2 (100) := g_package_name || '.REL_RISK_HOLD';
        l_error_message       VARCHAR2 (500);
        l_released_comments   VARCHAR2 (100);
        l_production_user     VARCHAR2 (20);
        -->> Arun Bacha ||11th May, 2018 || US US998870 || Release 4.5 || All the holds defined in the lookup have to be released
        l_hold_code           VARCHAR2 (500);

        -->> Arun Bacha ||11th May, 2018 || US US998870 || Release 4.5 || Changed the select stament into cursor to remove mulitple holds

        CURSOR c_hold_details
        IS
            SELECT hold_id,
                   entity_id, -->> Project G'day | Sharath Yaski | 02-MAY-2016| Load the Hold Entity Type to local.
                   hold_entity_type,
                   hold_code
              FROM xxmm_cts_holds, -->> Arun Bacha ||11th May, 2018 || US US998870 || Release 4.5 || All the holds defined in the lookup have to be released
                                  xxmm_lookups_v xlv
             --<< Arun Bacha ||11th May, 2018 || US US998870 || Release 4.5 || All the holds defined in the lookup have to be released
             -->> Project G'day | Ranjitha | 26-APR-2016| Need to release hold at Impound level only for AUS.
             WHERE                         --  cts_header_id = p_cts_header_id
                       --  entity_id = decode (hold_entity_type,'CTS', p_cts_header_id,'IMP',p_impound_trx_id)
                       entity_id =
                           DECODE (
                               hold_entity_type,
                               xxmm_constants.gc_hold_entity_type_cts, p_cts_header_id,
                               xxmm_constants.gc_hold_entity_type_imp, p_impound_trx_id)
                   --<< Project G'day | Ranjitha | 26-APR-2016| Need to release hold at Impound level only for AUS.
                   -->> Arun Bacha ||11th May, 2018 || US US998870 || Release 4.5 || All the holds defined in the lookup have to be released
                   --  AND hold_code = xxmm_constants.gc_risk_review_tier_hold
                   -- AND held_by = l_production_user;
                   AND hold_code = xlv.lookup_code
                   AND held_by =
                           DECODE (xlv.attribute2,
                                   'Y', l_production_user,
                                   held_by)
                   AND xlv.lookup_type = 'XXMM_CP_REC_APPL_REL_HOLD_CODE';
    --<<   Arun Bacha ||11th May, 2018 || US US998870 || Release 4.5 || All the holds defined in the lookup have to be released
    -->> Project G'day | Ranjitha | 26-APR-2016| Not requried as we are handling in the above decode only.
    BEGIN
        log_message ('Starting >> ' || l_program_unit);
        log_file ('Starting >> ' || l_program_unit);
        l_released_comments :=
            'Released by IMMS Intraday Create Automatic Receipt Batches Program';
        l_production_user := 'PRODUCTION';

        -->> Arun Bacha ||11th May, 2018 || US US998870 || Release 4.5 || Added the loop to remove multiple holds
        FOR r_hold_details IN c_hold_details
        LOOP
            /*   -->> Arun Bacha ||11th May, 2018 || US998870 || Removed the if condition
                IF (l_hold_id IS NOT NULL AND l_trx_id IS NOT NULL)
              THEN */
            log_message (
                   'Releasing the Hold: '
                || r_hold_details.hold_code
                || ' on '
                || r_hold_details.hold_entity_type
                || ' '
                || r_hold_details.entity_id);

            xxmm_hold_release_utilities.release_hold (
                r_hold_details.hold_id,
                r_hold_details.entity_id,
                -->> Project G'day | Sharath Yaski | 02-MAY-2016| Hold Entity Type saved to local variable.
                --xxmm_constants.gc_hold_entity_type_cts,
                r_hold_details.hold_entity_type,
                --<< Project G'day | Sharath Yaski | 02-MAY-2016| Hold Entity Type saved to local variable.
                -->> Arun Bacha ||11th May, 2018 || US US998870 || Release 4.5
                --xxmm_constants.gc_risk_review_tier_hold,
                r_hold_details.hold_code,
                -->> Arun Bacha ||11th May, 2018 || US US998870 || Release 4.5
                xxmm_constants.gc_risk_mitigated_rel,
                l_released_comments,
                l_error_code,
                l_error_message);
        -- END IF;  -->> Arun Bacha ||11th May, 2018 || US998870 || Removed the if condition

        END LOOP;

        log_message ('Ending >> ' || l_program_unit);
        log_file ('Ending >> ' || l_program_unit);
    EXCEPTION
        WHEN OTHERS
        THEN
            l_error_message :=
                   'ERROR when checking for RR Risk Tier and Funding Method hold and release. ERROR: '
                || SQLERRM;
            log_file (l_error_message);
    END rel_risk_hold;

    /* ************************************************************************
     *            COPYRIGHT (c) 2016 ADP Canada, Financial Systems          *
     ************************************************************************
     *                                                                      *
     * Module Name  : PURGE_STAG_TABLES                                     *
     * Module Type  : PL/SQL Procedure                                      *
     * Purpose      : Procedure to deletes data for current file  from the  *
     *                staging tables according to inbound_file_id.          *
     *                                                                      *
     ************************************************************************
     *                            BIBLIOGRAPHY                              *
     ************************************************************************
     *                                                                      *
     ************************************************************************
     *   Date       |      Author          |  SCR    | Remarks              *
     ************************************************************************
     *   Mar 2016         Arun Bacha          R Q3 PWR EU 15-600                                                  *
     ************************************************************************
     */
    PROCEDURE purge_stag_table (p_inbound_file_id IN NUMBER)
    IS
    BEGIN
        log_message ('XXMM=>Deleting the data from stag tables', 1);
        log_message ('p_inbound_file id:' || p_inbound_file_id, 3);

       DELETE FROM xxmm_itd_cp_receipt_stag
           WHERE inbound_file_id = p_inbound_file_id;

        COMMIT;
        log_message (
               'XXMM=>Imported XXMM Temp Records have been purged from staging tables for inbound_file_id: '
            || p_inbound_file_id,
            1);
    END purge_stag_table;


    PROCEDURE update_itd_stag_match_flag (p_inbound_file_id NUMBER)
    IS
        CURSOR c_multi_ctrl_verify
        IS
            SELECT ROWID, xicrs.*
              FROM xxmm_itd_cp_receipt_stag xicrs
             WHERE match_flag = 'Y' AND inbound_file_id = p_inbound_file_id;

        CURSOR c_multi_ctrl_verify_nsf
        IS
            SELECT ROWID, xicrs.*
              FROM xxmm_itd_cp_receipt_stag xicrs
             WHERE     match_flag = 'Y'
                   AND inbound_file_id = p_inbound_file_id
                   AND attribute6 = xxmm_constants.gc_nsfr_fund_meth;

        l_v_match_count   NUMBER;
        l_dummy           NUMBER;
        l_dummy_char      VARCHAR2 (100);

        l_ctrl_number     VARCHAR2 (30) := NULL;
    BEGIN
        log_message (
               'Starting update_itd_stag_match_flag for inbound_file_id: '
            || TO_CHAR (p_inbound_file_id),
            1);

        -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||Added the condition to change the direction of flow based on the Country
        IF NOT xxmm_lookup_utilities.lookup_code_exist (
                   NULL,
                   xxmm_constants.gc_err_code_lt,
                   g_itd_rct)
        THEN
            --<< PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||Added the condition to change the direction of flow based on the Country
            UPDATE xxmm_itd_cp_receipt_stag xicrs
               SET match_flag = 'Y'
             WHERE     inbound_file_id = p_inbound_file_id
                   AND EXISTS
                           ( SELECT 1
                              FROM xxmm_cts_impound_trx imp,
                                   xxmm_cts_headers cts,
                                   xxmm_customer_controls ctrl
                             WHERE     xicrs.amount =
                                             NVL (imp.impound_trx_amount, 0)
                                           - NVL (imp.applied_amount, 0)
                                           + NVL (imp.adjustment_amount, 0)
                                           - NVL (imp.write_off_amount, 0)
                                   AND imp.application_status IN
                                           (xxmm_constants.gc_imp_unapplied_status,
                                            xxmm_constants.gc_imp_partial_status)
                                   AND imp.status =
                                           xxmm_constants.gc_validated_status
                                   AND xicrs.account_number =
                                              imp.impound_branch
                                           || imp.impound_account
                                   AND cts.cts_header_id = imp.cts_header_id
                                   AND cts.control_id = ctrl.control_id
                                   --
                                   -- Start Naeem 18-NOV-2014
                                   --
                                   --       AND (   xicrs.bank_reference_no LIKE
                                   --                  '%' || ctrl.control_number || '%'
                                   AND (   extract_control_number_name (
                                               xicrs.bank_reference_no,
                                               'NUMBER') =
                                               ctrl.control_number
                                        --
                                        -- End Naeem 18-NOV-2014
                                        --
                                        --
                                        --  End  Naeem 18-DEC-2014
                                        --
                                        --                                 OR upper(xicrs.bank_reference_no) LIKE
                                        --                                       '%' || upper(ctrl.control_name) || '%'
                                        --
                                        --  End  Naeem 18-DEC-2014
                                        --
                                        OR extract_control_name (
                                               UPPER (
                                                   xicrs.bank_reference_no)) LIKE
                                                  '%'
                                               || UPPER (ctrl.control_name)
                                               || '%'
                                        OR UPPER (ctrl.control_name) LIKE
                                                  '%'
                                               || extract_control_name (
                                                      UPPER (
                                                          xicrs.bank_reference_no))
                                               || '%'
                                        OR xxmm_create_receipts.strip_control_name (
                                               xxmm_utilities.clean_special_chars (
                                                   extract_control_name (
                                                       UPPER (
                                                           xicrs.bank_reference_no)))) LIKE
                                                  '%'
                                               || xxmm_create_receipts.strip_control_name (
                                                      xxmm_utilities.clean_special_chars (
                                                          UPPER (
                                                              ctrl.control_name)))
                                               || '%'
                                        OR xxmm_create_receipts.strip_control_name (
                                               xxmm_utilities.clean_special_chars (
                                                   UPPER (ctrl.control_name))) LIKE
                                                  '%'
                                               || xxmm_create_receipts.strip_control_name (
                                                      xxmm_utilities.clean_special_chars (
                                                          extract_control_name (
                                                              UPPER (
                                                                  xicrs.bank_reference_no))))
                                               || '%'));



            -- if get multiple control from the above matching, it should be treated as no match
            FOR r_multi_ctrl_verify IN c_multi_ctrl_verify
            LOOP
                l_ctrl_number :=
                    extract_control_number_name (
                        r_multi_ctrl_verify.bank_reference_no,
                        'NUMBER');


                BEGIN
                      SELECT imp.impound_branch || imp.impound_account,
                               NVL (imp.impound_trx_amount, 0)
                             - NVL (imp.applied_amount, 0)
                             + NVL (imp.adjustment_amount, 0)
                             - NVL (imp.write_off_amount, 0),
                             ctrl.control_id,
                             COUNT (1)
                        INTO l_dummy_char,
                             l_dummy,
                             l_dummy,
                             l_v_match_count
                        FROM xxmm_cts_impound_trx imp,
                             xxmm_cts_headers cts,
                             xxmm_customer_controls ctrl
                       WHERE     r_multi_ctrl_verify.amount =
                                       NVL (imp.impound_trx_amount, 0)
                                     - NVL (imp.applied_amount, 0)
                                     + NVL (imp.adjustment_amount, 0)
                                     - NVL (imp.write_off_amount, 0)
                             AND imp.application_status IN
                                     (xxmm_constants.gc_imp_unapplied_status,
                                      xxmm_constants.gc_imp_partial_status)
                             AND imp.status =
                                     xxmm_constants.gc_validated_status
                             AND r_multi_ctrl_verify.account_number =
                                     imp.impound_branch || imp.impound_account
                             AND cts.cts_header_id = imp.cts_header_id
                             AND cts.control_id = ctrl.control_id
                             --
                             -- Start Naeem 18-NOV-2014
                             --
                             --AND (   r_multi_ctrl_verify.bank_reference_no LIKE
                             --           '%' || ctrl.control_number || '%'
                             --AND (  extract_control_number_name(r_multi_ctrl_verify.bank_reference_no,'NUMBER')  = ctrl.control_number
                             AND (   ctrl.control_number = l_ctrl_number
                                  --
                                  -- End Naeem 18-NOV-2014
                                  --
                                  --
                                  --  End  Naeem 18-DEC-2014
                                  --
                                  --                          OR upper(r_multi_ctrl_verify.bank_reference_no) LIKE
                                  --                                '%' || upper(ctrl.control_name) || '%'
                                  --
                                  --  End  Naeem 18-DEC-2014
                                  --
                                  OR extract_control_name (
                                         UPPER (
                                             r_multi_ctrl_verify.bank_reference_no)) LIKE
                                            '%'
                                         || UPPER (ctrl.control_name)
                                         || '%'
                                  OR UPPER (ctrl.control_name) LIKE
                                            '%'
                                         || extract_control_name (
                                                UPPER (
                                                    r_multi_ctrl_verify.bank_reference_no))
                                         || '%'
                                  OR xxmm_create_receipts.strip_control_name (
                                         xxmm_utilities.clean_special_chars (
                                             extract_control_name (
                                                 UPPER (
                                                     r_multi_ctrl_verify.bank_reference_no)))) LIKE
                                            '%'
                                         || xxmm_create_receipts.strip_control_name (
                                                xxmm_utilities.clean_special_chars (
                                                    UPPER (ctrl.control_name)))
                                         || '%'
                                  OR xxmm_create_receipts.strip_control_name (
                                         xxmm_utilities.clean_special_chars (
                                             UPPER (ctrl.control_name))) LIKE
                                            '%'
                                         || xxmm_create_receipts.strip_control_name (
                                                xxmm_utilities.clean_special_chars (
                                                    extract_control_name (
                                                        UPPER (
                                                            r_multi_ctrl_verify.bank_reference_no))))
                                         || '%')
                    GROUP BY imp.impound_branch || imp.impound_account,
                               NVL (imp.impound_trx_amount, 0)
                             - NVL (imp.applied_amount, 0)
                             + NVL (imp.adjustment_amount, 0)
                             - NVL (imp.write_off_amount, 0),
                             ctrl.control_id;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        log_message (
                            'Multiple matched control with same impound amount and account found');

                        UPDATE xxmm_itd_cp_receipt_stag
                           SET match_flag = 'N'
                         WHERE ROWID = r_multi_ctrl_verify.ROWID;

                        log_message (
                               'Update flag to N for  record: '
                            || r_multi_ctrl_verify.as_of_date
                            || ','
                            || TO_CHAR (r_multi_ctrl_verify.amount)
                            || ','
                            || r_multi_ctrl_verify.bank_reference_no);
                END;
            END LOOP;
        -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||Added the condition to change the direction of flow based on the Country
        ELSIF xxmm_lookup_utilities.lookup_code_exist (
                  NULL,
                  xxmm_constants.gc_err_code_lt,
                  g_itd_rct)
        THEN
            --<< PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||Added the condition to change the direction of flow based on the Country
            -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||Update the flag and funding method in the staging table for CP receipts
            IF g_funding_method = xxmm_constants.gc_credit_push_fund_meth
            THEN
                UPDATE xxmm_itd_cp_receipt_stag xicrs
                   SET match_flag = 'Y',
                       attribute6 = xxmm_constants.gc_credit_push_fund_meth
                 WHERE     inbound_file_id = p_inbound_file_id
                       AND EXISTS
                               (SELECT 1
                                  FROM xxmm_cts_impound_trx imp,
                                       xxmm_cts_headers cts,
                                       xxmm_customer_controls ctrl
                                 WHERE     xicrs.amount =
                                                 NVL (imp.impound_trx_amount,
                                                      0)
                                               - NVL (imp.applied_amount, 0)
                                               + NVL (imp.adjustment_amount,
                                                      0)
                                               - NVL (imp.write_off_amount,
                                                      0)
                                       AND imp.application_status IN
                                               (xxmm_constants.gc_imp_unapplied_status,
                                                xxmm_constants.gc_imp_partial_status)
                                       AND imp.funding_method =
                                               xxmm_constants.gc_credit_push_fund_meth
                                       AND imp.status IN
                                               (xxmm_constants.gc_validated_status,
                                                xxmm_constants.gc_imp_trx_status_need_val)
                                       AND imp.impound_bank_account_id =
                                               xicrs.bank_account_id
                                       AND cts.cts_header_id =
                                               imp.cts_header_id
                                       AND cts.control_id = ctrl.control_id
                                       -->>FP64945  || Arun Bacha || MAY 2016 || Added a new parameter to the function to check whether the ORG account exists for the control and tp to match the control number when muliple control numbers are found
        --->>> Start FP-66895 07-OCT-2019 Muhammad -- to filter Impounds for that particulart Originator Account.
--                                     AND (   xxmm_create_receipts.get_org_unique_control_id (
--                                                   xicrs.originator_account,
--                                                   ctrl.control_id) =
--                                                   ctrl.control_id
                   AND (cts.control_id in (SELECT xbau.entity_id
                                          --INTO l_control_id
                                            FROM xxmm_bank_accounts xba, xxmm_bank_account_uses xbau
                                           WHERE     (   xba.account_number = xicrs.originator_account --<<START  George Felian 28-JUN-2016 PWR EU-15-600 US477483 Start
                                                    OR DECODE (
                                                           g_check_sort_code,
                                                           'Y', REPLACE (
                                                                    SUBSTR (xba.account_name,
                                                                            INSTR (xba.account_name, ' ', 1)),
                                                                    ' ',
                                                                    ''),
                                                           '@@@@') = xicrs.originator_account) -->><END  George Felian 28-JUN-2016 PWR EU-15-600 US477483
                                             AND xbau.entity_id = NVL (ctrl.control_id, xbau.entity_id)
                                             AND xbau.account_usage_type = xxmm_constants.gc_org_acc_usage_type
                                             AND xbau.entity_type = xxmm_constants.gc_entity_type
                                             AND xba.bank_account_id = xbau.bank_account_id)
        --->>> End FP-66895 07-OCT-2019 Muhammad -- to filter Impounds for that particulart Originator Account.
                                            --xicrs.originator_account) = ctrl.control_id
                                            OR UPPER (
                                                   TRIM (
                                                       get_control_number_nl_fr (
                                                           xicrs.attribute4,
                                                           ctrl.control_number))) =
                                                   --xicrs.attribute4))) =
                                                   -->>FP64945  || Arun Bacha || MAY 2016 || Added a new parameter to the function to check whether the ORG account exists for the control and tp to match the control number when muliple control numbers are found
                                                   UPPER (
                                                       TRIM (
                                                           ctrl.control_number))
                                            OR NVL (
                                                   UPPER (
                                                       xicrs.bank_reference_no),
                                                   'NO_MATCH') LIKE
                                                      '%'
                                                   || UPPER (
                                                          ctrl.control_name)
                                                   || '%'
                                            OR UPPER (ctrl.control_name) LIKE
                                                      '%'
                                                   || NVL (
                                                          UPPER (
                                                              xicrs.bank_reference_no),
                                                          'NO_MATCH')
                                                   || '%'
                                            OR NVL (
                                                   xxmm_create_receipts.strip_control_name (
                                                       clean_special_chars (
                                                           UPPER (
                                                               xicrs.bank_reference_no))),
                                                   'NO_MATCH') LIKE
                                                      '%'
                                                   || xxmm_create_receipts.strip_control_name (
                                                          clean_special_chars (
                                                              UPPER (
                                                                  ctrl.control_name)))
                                                   || '%'
                                            OR xxmm_create_receipts.strip_control_name (
                                                   clean_special_chars (
                                                       UPPER (
                                                           ctrl.control_name))) LIKE
                                                      '%'
                                                   || NVL (
                                                          xxmm_create_receipts.strip_control_name (
                                                              clean_special_chars (
                                                                  UPPER (
                                                                      xicrs.bank_reference_no))),
                                                          'NO_MATCH')
                                                   || '%'));



                FOR r_multi_ctrl_verify IN c_multi_ctrl_verify
                LOOP
                    BEGIN
                          SELECT imp.impound_branch || imp.impound_account,
                                   NVL (imp.impound_trx_amount, 0)
                                 - NVL (imp.applied_amount, 0)
                                 + NVL (imp.adjustment_amount, 0)
                                 - NVL (imp.write_off_amount, 0),
                                 ctrl.control_id,
                                 COUNT (1)
                            INTO l_dummy_char,
                                 l_dummy,
                                 l_dummy,
                                 l_v_match_count
                            FROM xxmm_cts_impound_trx imp,
                                 xxmm_cts_headers cts,
                                 xxmm_customer_controls ctrl
                           WHERE     r_multi_ctrl_verify.amount =
                                           NVL (imp.impound_trx_amount, 0)
                                         - NVL (imp.applied_amount, 0)
                                         + NVL (imp.adjustment_amount, 0)
                                         - NVL (imp.write_off_amount, 0)
                                 AND imp.application_status IN
                                         (xxmm_constants.gc_imp_unapplied_status,
                                          xxmm_constants.gc_imp_partial_status)
                                 AND imp.funding_method =
                                         xxmm_constants.gc_credit_push_fund_meth
                                 AND imp.status IN
                                         (xxmm_constants.gc_validated_status,
                                          xxmm_constants.gc_imp_trx_status_need_val)
                                 AND imp.impound_bank_account_id =
                                         r_multi_ctrl_verify.bank_account_id
                                 AND cts.cts_header_id = imp.cts_header_id
                                 AND cts.control_id = ctrl.control_id
                                 -->>FP64945   || Arun Bacha || MAY 2016 || Added a new parameter to the function to check whether the ORG account exists for the control and tp to match the control number when muliple control numbers are found
                                 AND xxmm_create_receipts.get_org_unique_control_id (
                                         r_multi_ctrl_verify.originator_account,
                                         ctrl.control_id) = ctrl.control_id
                        -->>FP64945 || Arun Bacha || MAY 2016 || Added a new parameter to the function to check whether the ORG account exists for the control and tp to match the control number when muliple control numbers are fou
                        -->>FP64945  || Arun Bacha || MAY 2016 || Commented  the below code to chech the match with the ORG account
                        /*
                        UPPER (
                                                          TRIM (
                                                             get_control_number_nl_fr (
                                                                  r_multi_ctrl_verify.attribute4,ctrl.control_number))) =
                                                                --r_multi_ctrl_verify.attribute4))) =
                        -->>FP64945  || Arun Bacha || MAY 2016 || Added a new parameter to the function to check whether the ORG account exists for the control and tp to match the control number when muliple control numbers are found
                                                          UPPER (TRIM (ctrl.control_number))
                                                    OR NVL (
                                                          UPPER (
                                                             r_multi_ctrl_verify.bank_reference_no),
                                                          'NO_MATCH') LIKE
                                                          '%' || UPPER (ctrl.control_name) || '%'
                                                    OR UPPER (ctrl.control_name) LIKE
                                                             '%'
                                                          || NVL (
                                                                UPPER (
                                                                   r_multi_ctrl_verify.bank_reference_no),
                                                                'NO_MATCH')
                                                          || '%'
                                                    OR NVL (
                                                          xxmm_create_receipts.strip_control_name (
                                                             clean_special_chars (
                                                                UPPER (
                                                                   r_multi_ctrl_verify.bank_reference_no))),
                                                          'NO_MATCH') LIKE
                                                             '%'
                                                          || xxmm_create_receipts.strip_control_name (
                                                                clean_special_chars (
                                                                   UPPER (ctrl.control_name)))
                                                          || '%'
                                                    OR xxmm_create_receipts.strip_control_name (
                                                          clean_special_chars (
                                                             UPPER (ctrl.control_name))) LIKE
                                                             '%'
                                                          || NVL (
                                                                xxmm_create_receipts.strip_control_name (
                                                                   clean_special_chars (
                                                                      UPPER (
                                                                         r_multi_ctrl_verify.bank_reference_no))),
                                                                'NO_MATCH')
                                                          || '%') */
                        --<< FP64945   || Arun Bacha || MAY 2016 || Commented  the below code to chech the match with the ORG account
                        GROUP BY imp.impound_branch || imp.impound_account,
                                   NVL (imp.impound_trx_amount, 0)
                                 - NVL (imp.applied_amount, 0)
                                 + NVL (imp.adjustment_amount, 0)
                                 - NVL (imp.write_off_amount, 0),
                                 ctrl.control_id;
                    EXCEPTION
                        WHEN TOO_MANY_ROWS OR NO_DATA_FOUND
                        THEN
                            BEGIN
                                  -->> FP64945   || Arun Bacha || MAY 2016 || Added the below  to chech the match with the control name or number
                                  SELECT    imp.impound_branch
                                         || imp.impound_account,
                                           NVL (imp.impound_trx_amount, 0)
                                         - NVL (imp.applied_amount, 0)
                                         + NVL (imp.adjustment_amount, 0)
                                         - NVL (imp.write_off_amount, 0),
                                         ctrl.control_id,
                                         COUNT (1)
                                    INTO l_dummy_char,
                                         l_dummy,
                                         l_dummy,
                                         l_v_match_count
                                    FROM xxmm_cts_impound_trx imp,
                                         xxmm_cts_headers cts,
                                         xxmm_customer_controls ctrl
                                   WHERE     r_multi_ctrl_verify.amount =
                                                   NVL (imp.impound_trx_amount,
                                                        0)
                                                 - NVL (imp.applied_amount, 0)
                                                 + NVL (imp.adjustment_amount,
                                                        0)
                                                 - NVL (imp.write_off_amount,
                                                        0)
                                         AND imp.application_status IN
                                                 (xxmm_constants.gc_imp_unapplied_status,
                                                  xxmm_constants.gc_imp_partial_status)
                                         AND imp.funding_method =
                                                 xxmm_constants.gc_credit_push_fund_meth
                                         AND imp.status IN
                                                 (xxmm_constants.gc_validated_status,
                                                  xxmm_constants.gc_imp_trx_status_need_val)
                                         AND imp.impound_bank_account_id =
                                                 r_multi_ctrl_verify.bank_account_id
                                         AND cts.cts_header_id =
                                                 imp.cts_header_id
                                         AND cts.control_id = ctrl.control_id
                                         -->> FP64945  || Arun Bacha || MAY 2016 || Added a new parameter to the function to check whether the ORG account exists for the control and tp to match the control number when muliple control numbers are found
                                         AND (   UPPER (
                                                     TRIM (
                                                         get_control_number_nl_fr (
                                                             r_multi_ctrl_verify.attribute4,
                                                             ctrl.control_number))) =
                                                     --r_multi_ctrl_verify.attribute4))) =
                                                     -->>FP64945  || Arun Bacha || MAY 2016 || Added a new parameter to the function to check whether the ORG account exists for the control and tp to match the control number when muliple control numbers are found
                                                     UPPER (
                                                         TRIM (
                                                             ctrl.control_number))
                                              OR NVL (
                                                     UPPER (
                                                         r_multi_ctrl_verify.bank_reference_no),
                                                     'NO_MATCH') LIKE
                                                        '%'
                                                     || UPPER (
                                                            ctrl.control_name)
                                                     || '%'
                                              OR UPPER (ctrl.control_name) LIKE
                                                        '%'
                                                     || NVL (
                                                            UPPER (
                                                                r_multi_ctrl_verify.bank_reference_no),
                                                            'NO_MATCH')
                                                     || '%'
                                              OR NVL (
                                                     xxmm_create_receipts.strip_control_name (
                                                         clean_special_chars (
                                                             UPPER (
                                                                 r_multi_ctrl_verify.bank_reference_no))),
                                                     'NO_MATCH') LIKE
                                                        '%'
                                                     || xxmm_create_receipts.strip_control_name (
                                                            clean_special_chars (
                                                                UPPER (
                                                                    ctrl.control_name)))
                                                     || '%'
                                              OR xxmm_create_receipts.strip_control_name (
                                                     clean_special_chars (
                                                         UPPER (
                                                             ctrl.control_name))) LIKE
                                                        '%'
                                                     || NVL (
                                                            xxmm_create_receipts.strip_control_name (
                                                                clean_special_chars (
                                                                    UPPER (
                                                                        r_multi_ctrl_verify.bank_reference_no))),
                                                            'NO_MATCH')
                                                     || '%')
                                GROUP BY    imp.impound_branch
                                         || imp.impound_account,
                                           NVL (imp.impound_trx_amount, 0)
                                         - NVL (imp.applied_amount, 0)
                                         + NVL (imp.adjustment_amount, 0)
                                         - NVL (imp.write_off_amount, 0),
                                         ctrl.control_id;
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    log_message (
                                        'Multiple matched control with same impound amount and account found');

                                    UPDATE xxmm_itd_cp_receipt_stag
                                       SET match_flag = 'N',
                                           attribute6 = NULL
                                     WHERE ROWID = r_multi_ctrl_verify.ROWID;

                                    log_file (
                                           'Update flag to N for  record: '
                                        || r_multi_ctrl_verify.as_of_date
                                        || ','
                                        || TO_CHAR (
                                               r_multi_ctrl_verify.amount)
                                        || ','
                                        || r_multi_ctrl_verify.bank_reference_no);
                            END;
                        --<<FP64945   || Arun Bacha || MAY 2016 || Added the below  to chech the match with the control name or number
                        WHEN OTHERS
                        THEN
                            log_message (
                                'Multiple matched control with same impound amount and account found');

                            UPDATE xxmm_itd_cp_receipt_stag
                               SET match_flag = 'N', attribute6 = NULL
                             WHERE ROWID = r_multi_ctrl_verify.ROWID;

                            log_message (
                                   'Update flag to N for  record: '
                                || r_multi_ctrl_verify.as_of_date
                                || ','
                                || TO_CHAR (r_multi_ctrl_verify.amount)
                                || ','
                                || r_multi_ctrl_verify.bank_reference_no);
                    END;
                END LOOP;
            --<< PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||Update the flag and funding method in the staging table for CP receipts
            -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||Update the flag and funding method in the staging table for NSF  receipts
            ELSIF g_funding_method = xxmm_constants.gc_nsfr_fund_meth
            THEN
                UPDATE xxmm_itd_cp_receipt_stag xicrs
                   SET match_flag = 'Y',
                       attribute6 = xxmm_constants.gc_nsfr_fund_meth
                 WHERE     xicrs.inbound_file_id = p_inbound_file_id
                       AND EXISTS
                               (SELECT 1
                                  FROM xxmm_cts_impound_trx imp,
                                       xxmm_cts_headers cts,
                                       xxmm_customer_controls ctrl
                                 WHERE     xicrs.amount =
                                                 NVL (imp.impound_trx_amount,
                                                      0)
                                               - NVL (imp.applied_amount, 0)
                                               + NVL (imp.adjustment_amount,
                                                      0)
                                               - NVL (imp.write_off_amount,
                                                      0)
                                       AND imp.application_status IN
                                               (xxmm_constants.gc_imp_unapplied_status,
                                                xxmm_constants.gc_imp_partial_status)
                                       AND imp.funding_method =
                                               xxmm_constants.gc_nsfr_fund_meth
                                       AND imp.status IN
                                               (xxmm_constants.gc_validated_status,
                                                xxmm_constants.gc_imp_trx_status_need_val)
                                       AND imp.impound_bank_account_id =
                                               xicrs.bank_account_id
                                       AND cts.cts_header_id =
                                               imp.cts_header_id
                                       AND cts.control_id = ctrl.control_id
                                       AND xicrs.match_flag = 'N'
                                       -->> FP64945  || Arun Bacha || MAY 2016 || Added a new parameter to the function to check whether the ORG account exists for the control and tp to match the control number when muliple control numbers are found
        --->>> Start FP-66895 07-OCT-2019 Muhammad -- to filter Impounds for that particulart Originator Account.
--                                     AND (   xxmm_create_receipts.get_org_unique_control_id (
--                                                   xicrs.originator_account,
--                                                   ctrl.control_id) =
--                                                   ctrl.control_id
                   AND (cts.control_id in (SELECT xbau.entity_id
                                          --INTO l_control_id
                                            FROM xxmm_bank_accounts xba, xxmm_bank_account_uses xbau
                                           WHERE     (   xba.account_number = xicrs.originator_account --<<START  George Felian 28-JUN-2016 PWR EU-15-600 US477483 Start
                                                    OR DECODE (
                                                           g_check_sort_code,
                                                           'Y', REPLACE (
                                                                    SUBSTR (xba.account_name,
                                                                            INSTR (xba.account_name, ' ', 1)),
                                                                    ' ',
                                                                    ''),
                                                           '@@@@') = xicrs.originator_account) -->><END  George Felian 28-JUN-2016 PWR EU-15-600 US477483
                                             AND xbau.entity_id = NVL (ctrl.control_id, xbau.entity_id)
                                             AND xbau.account_usage_type = xxmm_constants.gc_org_acc_usage_type
                                             AND xbau.entity_type = xxmm_constants.gc_entity_type
                                             AND xba.bank_account_id = xbau.bank_account_id)
        --->>> End FP-66895 07-OCT-2019 Muhammad -- to filter Impounds for that particulart Originator Account.
                                            -- xicrs.originator_account) = ctrl.control_id
                                            OR UPPER (
                                                   TRIM (
                                                       get_control_number_nl_fr (
                                                           xicrs.attribute4,
                                                           ctrl.control_number))) =
                                                   -- xicrs.attribute4))) =
                                                   -->> FP64945  || Arun Bacha || MAY 2016 || Added a new parameter to the function to check whether the ORG account exists for the control and tp to match the control number when muliple control numbers are found
                                                   UPPER (
                                                       TRIM (
                                                           ctrl.control_number))
                                            OR NVL (
                                                   UPPER (
                                                       xicrs.bank_reference_no),
                                                   'NO_MATCH') LIKE
                                                      '%'
                                                   || UPPER (
                                                          ctrl.control_name)
                                                   || '%'
                                            OR UPPER (ctrl.control_name) LIKE
                                                      '%'
                                                   || NVL (
                                                          UPPER (
                                                              xicrs.bank_reference_no),
                                                          'NO_MATCH')
                                                   || '%'
                                            OR NVL (
                                                   xxmm_create_receipts.strip_control_name (
                                                       clean_special_chars (
                                                           UPPER (
                                                               xicrs.bank_reference_no))),
                                                   'NO_MATCH') LIKE
                                                      '%'
                                                   || xxmm_create_receipts.strip_control_name (
                                                          clean_special_chars (
                                                              UPPER (
                                                                  ctrl.control_name)))
                                                   || '%'
                                            OR xxmm_create_receipts.strip_control_name (
                                                   clean_special_chars (
                                                       UPPER (
                                                           ctrl.control_name))) LIKE
                                                      '%'
                                                   || NVL (
                                                          xxmm_create_receipts.strip_control_name (
                                                              clean_special_chars (
                                                                  UPPER (
                                                                      xicrs.bank_reference_no))),
                                                          'NO_MATCH')
                                                   || '%'));



                FOR r_multi_ctrl_verify_nsf IN c_multi_ctrl_verify_nsf
                LOOP
                    BEGIN
                          SELECT imp.impound_branch || imp.impound_account,
                                   NVL (imp.impound_trx_amount, 0)
                                 - NVL (imp.applied_amount, 0)
                                 + NVL (imp.adjustment_amount, 0)
                                 - NVL (imp.write_off_amount, 0),
                                 ctrl.control_id,
                                 COUNT (1)
                            INTO l_dummy_char,
                                 l_dummy,
                                 l_dummy,
                                 l_v_match_count
                            FROM xxmm_cts_impound_trx imp,
                                 xxmm_cts_headers cts,
                                 xxmm_customer_controls ctrl,
                                 xxmm_bank_accounts xba,
                                 xxmm_bank_account_uses xbau
                           WHERE     r_multi_ctrl_verify_nsf.amount =
                                           NVL (imp.impound_trx_amount, 0)
                                         - NVL (imp.applied_amount, 0)
                                         + NVL (imp.adjustment_amount, 0)
                                         - NVL (imp.write_off_amount, 0)
                                 AND imp.application_status IN
                                         (xxmm_constants.gc_imp_unapplied_status,
                                          xxmm_constants.gc_imp_partial_status)
                                 AND imp.status IN
                                         (xxmm_constants.gc_validated_status,
                                          xxmm_constants.gc_imp_trx_status_need_val)
                                 AND imp.funding_method =
                                         xxmm_constants.gc_nsfr_fund_meth
                                 AND imp.impound_bank_account_id =
                                         r_multi_ctrl_verify_nsf.bank_account_id
                                 AND cts.cts_header_id = imp.cts_header_id
                                 AND cts.control_id = ctrl.control_id
                                 -->>FP64945  || Arun Bacha || MAY 2016 || Added a new parameter to the function to check whether the ORG account exists for the control and tp to match the control number when muliple control numbers are found
                                 AND xxmm_create_receipts.get_org_unique_control_id (
                                         r_multi_ctrl_verify_nsf.originator_account,
                                         ctrl.control_id) = ctrl.control_id
                        -- r_multi_ctrl_verify_nsf.originator_account) = ctrl.control_iD
                        -->> FP64945   || Arun Bacha || MAY 2016 || Added a new parameter to the function to check whether the ORG account exists for the control and tp to match the control number when muliple control numbers are found
                        -->> FP64945   || Arun Bacha || MAY 2016 || Commented the below  to chech the match with the ORG Account
                        /*                   UPPER (TRIM (ctrl.control_number))
                                     OR NVL (
                                           UPPER (
                                              r_multi_ctrl_verify_nsf.bank_reference_no),
                                           'NO_MATCH') LIKE
                                           '%' || UPPER (ctrl.control_name) || '%'
                                     OR UPPER (ctrl.control_name) LIKE
                                              '%'
                                           || NVL (
                                                 UPPER (
                                                    r_multi_ctrl_verify_nsf.bank_reference_no),
                                                 'NO_MATCH')
                                           || '%'
                                     OR NVL (
                                           xxmm_create_receipts.strip_control_name (
                                              clean_special_chars (
                                                 UPPER (
                                                    r_multi_ctrl_verify_nsf.bank_reference_no))),
                                           'NO_MATCH') LIKE
                                              '%'
                                           || xxmm_create_receipts.strip_control_name (
                                                 clean_special_chars (
                                                    UPPER (ctrl.control_name)))
                                           || '%'
                                     OR xxmm_create_receipts.strip_control_name (
                                           clean_special_chars (
                                              UPPER (ctrl.control_name))) LIKE
                                              '%'
                                           || NVL (
                                                 xxmm_create_receipts.strip_control_name (
                                                    clean_special_chars (
                                                       UPPER (
                                                          r_multi_ctrl_verify_nsf.bank_reference_no))),
                                                 'NO_MATCH')
                                           || '%') */
                        -->>FP64945  || Arun Bacha || MAY 2016 || Commented the below  to chech the match with the ORG Account
                        GROUP BY imp.impound_branch || imp.impound_account,
                                   NVL (imp.impound_trx_amount, 0)
                                 - NVL (imp.applied_amount, 0)
                                 + NVL (imp.adjustment_amount, 0)
                                 - NVL (imp.write_off_amount, 0),
                                 ctrl.control_id;
                    EXCEPTION
                        WHEN NO_DATA_FOUND OR TOO_MANY_ROWS
                        THEN
                            -->> FP64945  || Arun Bacha || MAY 2016 || Added the below  to chech the match with the control name and number
                            BEGIN
                                  SELECT    imp.impound_branch
                                         || imp.impound_account,
                                           NVL (imp.impound_trx_amount, 0)
                                         - NVL (imp.applied_amount, 0)
                                         + NVL (imp.adjustment_amount, 0)
                                         - NVL (imp.write_off_amount, 0),
                                         ctrl.control_id,
                                         COUNT (1)
                                    INTO l_dummy_char,
                                         l_dummy,
                                         l_dummy,
                                         l_v_match_count
                                    FROM xxmm_cts_impound_trx imp,
                                         xxmm_cts_headers cts,
                                         xxmm_customer_controls ctrl,
                                         xxmm_bank_accounts xba,
                                         xxmm_bank_account_uses xbau
                                   WHERE     r_multi_ctrl_verify_nsf.amount =
                                                   NVL (imp.impound_trx_amount,
                                                        0)
                                                 - NVL (imp.applied_amount, 0)
                                                 + NVL (imp.adjustment_amount,
                                                        0)
                                                 - NVL (imp.write_off_amount,
                                                        0)
                                         AND imp.application_status IN
                                                 (xxmm_constants.gc_imp_unapplied_status,
                                                  xxmm_constants.gc_imp_partial_status)
                                         AND imp.status IN
                                                 (xxmm_constants.gc_validated_status,
                                                  xxmm_constants.gc_imp_trx_status_need_val)
                                         AND imp.funding_method =
                                                 xxmm_constants.gc_nsfr_fund_meth
                                         AND imp.impound_bank_account_id =
                                                 r_multi_ctrl_verify_nsf.bank_account_id
                                         AND cts.cts_header_id =
                                                 imp.cts_header_id
                                         AND cts.control_id = ctrl.control_id
                                         -->> FP64945    || Arun Bacha || MAY 2016 || Added a new parameter to the function to check whether the ORG account exists for the control and tp to match the control number when muliple control numbers are found
                                         AND (   UPPER (
                                                     TRIM (
                                                         get_control_number_nl_fr (
                                                             r_multi_ctrl_verify_nsf.attribute4,
                                                             ctrl.control_number))) =
                                                     --r_multi_ctrl_verify_nsf.attribute4))) =
                                                     -->>FP64945  || Arun Bacha || MAY 2016 || Added a new parameter to the function to check whether the ORG account exists for the control and tp to match the control number when muliple control numbers are found
                                                     UPPER (
                                                         TRIM (
                                                             ctrl.control_number))
                                              OR NVL (
                                                     UPPER (
                                                         r_multi_ctrl_verify_nsf.bank_reference_no),
                                                     'NO_MATCH') LIKE
                                                        '%'
                                                     || UPPER (
                                                            ctrl.control_name)
                                                     || '%'
                                              OR UPPER (ctrl.control_name) LIKE
                                                        '%'
                                                     || NVL (
                                                            UPPER (
                                                                r_multi_ctrl_verify_nsf.bank_reference_no),
                                                            'NO_MATCH')
                                                     || '%'
                                              OR NVL (
                                                     xxmm_create_receipts.strip_control_name (
                                                         clean_special_chars (
                                                             UPPER (
                                                                 r_multi_ctrl_verify_nsf.bank_reference_no))),
                                                     'NO_MATCH') LIKE
                                                        '%'
                                                     || xxmm_create_receipts.strip_control_name (
                                                            clean_special_chars (
                                                                UPPER (
                                                                    ctrl.control_name)))
                                                     || '%'
                                              OR xxmm_create_receipts.strip_control_name (
                                                     clean_special_chars (
                                                         UPPER (
                                                             ctrl.control_name))) LIKE
                                                        '%'
                                                     || NVL (
                                                            xxmm_create_receipts.strip_control_name (
                                                                clean_special_chars (
                                                                    UPPER (
                                                                        r_multi_ctrl_verify_nsf.bank_reference_no))),
                                                            'NO_MATCH')
                                                     || '%')
                                GROUP BY    imp.impound_branch
                                         || imp.impound_account,
                                           NVL (imp.impound_trx_amount, 0)
                                         - NVL (imp.applied_amount, 0)
                                         + NVL (imp.adjustment_amount, 0)
                                         - NVL (imp.write_off_amount, 0),
                                         ctrl.control_id;
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    log_message (
                                        'Multiple matched control with same impound amount and account found ');

                                    UPDATE xxmm_itd_cp_receipt_stag
                                       SET match_flag = 'N',
                                           attribute6 = NULL
                                     WHERE ROWID =
                                               r_multi_ctrl_verify_nsf.ROWID;

                                    log_message (
                                           'Update flag to N for  record: '
                                        || r_multi_ctrl_verify_nsf.as_of_date
                                        || ','
                                        || TO_CHAR (
                                               r_multi_ctrl_verify_nsf.amount)
                                        || ','
                                        || r_multi_ctrl_verify_nsf.bank_reference_no);
                            END;
                        --<<FP64945  || Arun Bacha || MAY 2016 || Added the below  to chech the match with the control name and number
                        WHEN OTHERS
                        THEN
                            log_message (
                                'Multiple matched control with same impound amount and account found ');

                            UPDATE xxmm_itd_cp_receipt_stag
                               SET match_flag = 'N', attribute6 = NULL
                             WHERE ROWID = r_multi_ctrl_verify_nsf.ROWID;

                            log_message (
                                   'Update flag to N for  record: '
                                || r_multi_ctrl_verify_nsf.as_of_date
                                || ','
                                || TO_CHAR (r_multi_ctrl_verify_nsf.amount)
                                || ','
                                || r_multi_ctrl_verify_nsf.bank_reference_no);
                    END;
                END LOOP;
            --<< PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||Update the flag and funding method in the staging table for NSF  receipts
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS
        THEN
            g_err_msg :=
                   'OTHER EXCEPTION in procedure update_itd_stag_match_flag , the error text is : '
                || SQLERRM;
            log_message (g_err_msg);
            log_file (g_err_msg);
            log_error (g_err_msg, xxmm_constants.msg_type_error);

            raise_application_error (-20010, g_err_msg);
    END update_itd_stag_match_flag;

     /* ************************************************************************
     *            COPYRIGHT (c) 2020 ADP Canada, Financial Systems          *
     ************************************************************************
     *                                                                      *
     * Module Name  : UpDATE_ITD_STAG_MATCH_FLAG_UK                         *
     * Module Type  : PL/SQL Procedure                                      *
     * Purpose      : Procedure to match INTRA day file with Impounds based *
     *               originater account, client control and Name            *
     *                                                                      *
     ************************************************************************
     *                            BIBLIOGRAPHY                              *
     ************************************************************************
     *                                                                      *
     ************************************************************************
     *   Date       |      Author          |  SCR    | Remarks              *
     ************************************************************************
     * 26-MAY-2020  George Felian       IMM 20-253 UK Intraday Receipt Logic*
     ************************************************************************
     */
/* Formatted on 6/6/2020 7:00:25 AM (QP5 v5.215.12089.38647) */
/* Formatted on 6/6/2020 3:35:11 PM (QP5 v5.215.12089.38647) */
PROCEDURE update_itd_stag_match_flag_uk (p_inbound_file_id NUMBER)
IS
   CURSOR c_cp_stage (
      inbound_file_id IN xxmm_inbound_files_all.inbound_file_id%TYPE)
   IS
      SELECT ROWID, cp_stage.*
        FROM xxmm_itd_cp_receipt_stag cp_stage
       WHERE inbound_file_id = p_inbound_file_id;

       CURSOR c_client_name  (p_bank_reference_no VARCHAR2) IS
                   SELECT ctrl.control_id, ctrl.control_number, ctrl.control_name
              FROM xxmm_customer_controls ctrl
             WHERE xxmm_create_receipts.strip_control_name (
                      xxmm_create_receipts.clean_special_chars (
                         UPPER (ctrl.control_name))) LIKE
                         '%'
                      || NVL (
                            xxmm_create_receipts.strip_control_name (
                               xxmm_create_receipts.clean_special_chars (
                                  UPPER (p_bank_reference_no))),
                            'NO_MATCH')
                      || '%';



   l_impound_trx_id             xxmm_cts_impound_trx.impound_trx_id%TYPE;
   l_impound_trx_number         xxmm_cts_impound_trx.impound_trx_number%TYPE;
   l_funding_method             xxmm_cts_impound_trx.funding_method%TYPE;
   l_control_id                 xxmm_customer_controls.control_id%TYPE;
   l_control_id_single          xxmm_customer_controls.control_id%TYPE;
   l_control_number             xxmm_customer_controls.control_number%TYPE;
   l_control_number_single      xxmm_customer_controls.control_number%TYPE;
   l_match_flag                 xxmm_itd_cp_receipt_stag.match_flag%TYPE;
   l_control_name               xxmm_customer_controls.control_name%TYPE;
   l_client_match               VARCHAR2 (1);
   l_client_orig_match          VARCHAR2 (1);
   l_client_orig_match_single   VARCHAR2 (1);
   l_application_status         VARCHAR2 (3);
   l_too_many_impounds          VARCHAR2 (1);
   l_too_many_orig                VARCHAR2 (1);    -- George Felian   17-JUL-2020      FP68493  - no cient name matching whentoo many row for org account

BEGIN
   log_message (
         'Starting update_itd_stag_match_flag_uk for inbound_file_id: '
      || TO_CHAR (p_inbound_file_id));


   FOR r_cp_stage IN c_cp_stage (p_inbound_file_id)
   LOOP
      l_impound_trx_id := NULL;
      l_impound_trx_number := NULL;
      l_control_id := NULL;
      l_control_id_single := NULL;
      l_control_name := NULL;
      l_control_number := NULL;
      l_control_number_single := NULL;
      l_funding_method := NULL;
      l_match_flag := 'N';            --Y=Applied N= Unapplied or Unidentified
      l_client_orig_match := 'N';           -- Originator account match exists
      l_client_orig_match_single := 'N'; --used if more than one control uses same originator account
      l_application_status := 'UND';    -- Unidentified until an applied or unnapplied  match is found
      l_too_many_impounds := 'N'; -- used to flag more than impound found by control name matching
      l_too_many_orig := 'N';    -- George Felian   17-JUL-2020      FP68493  - no cient name matching whentoo many row for org account


      -- Part 1 Check if there is an Originator Account match
      BEGIN
         log_message (
               'Begin Originator Account match for '
            || r_cp_stage.originator_account,
            3);

         SELECT ctrl.control_id, ctrl.control_number, ctrl.control_name
           INTO l_control_id, l_control_number, l_control_name
           FROM xxmm_customer_controls ctrl
          WHERE ctrl.control_id IN
                   (SELECT xbau.entity_id
                      FROM xxmm_bank_accounts xba,
                           xxmm_bank_account_uses xbau
                     WHERE     TRUNC (SYSDATE) BETWEEN TRUNC (
                                                          NVL (
                                                             xba.effective_start_date,
                                                             SYSDATE))
                                                   AND TRUNC (
                                                          NVL (
                                                             xba.effective_end_date,
                                                             SYSDATE))
                           AND TRUNC (SYSDATE) BETWEEN TRUNC (
                                                          NVL (
                                                             xbau.effective_start_date,
                                                             SYSDATE))
                                                   AND TRUNC (
                                                          NVL (
                                                             xbau.effective_end_date,
                                                             SYSDATE))
                           AND xba.account_number =
                                  r_cp_stage.originator_account
                           AND xbau.entity_id =
                                  NVL (ctrl.control_id, xbau.entity_id)
                           AND xbau.account_usage_type =
                                  xxmm_constants.gc_org_acc_usage_type
                           AND xbau.entity_type =
                                  xxmm_constants.gc_entity_type
                           AND xba.bank_account_id = xbau.bank_account_id);

         log_message (
            'Originator Account match for ' || r_cp_stage.originator_account,
            3);
         l_client_orig_match := 'Y';
         l_client_orig_match_single := 'Y';
         l_control_id_single := l_control_id;
      EXCEPTION
         WHEN TOO_MANY_ROWS
         THEN
            log_message (
                  'Too Many Rows for Originator Account '
               || r_cp_stage.originator_account,
               3);
            l_client_orig_match := 'Y';
            l_client_orig_match_single := 'N';
            l_too_many_orig := 'Y';    -- George Felian   17-JUL-2020      FP68493  - no cient name matching whentoo many row for org account

            BEGIN
               SELECT ctrl.control_id, ctrl.control_number, ctrl.control_name
                 INTO l_control_id, l_control_number, l_control_name
                 FROM xxmm_customer_controls ctrl
                WHERE     UPPER (
                             TRIM (
                                get_control_number_nl_fr (
                                   NVL (r_cp_stage.attribute4,
                                        ctrl.control_number)))) =
                             ctrl.control_number
                      AND ctrl.control_id IN
                             (SELECT xbau.entity_id
                                FROM xxmm_bank_accounts xba,
                                     xxmm_bank_account_uses xbau
                               WHERE     TRUNC (SYSDATE) BETWEEN TRUNC (
                                                                    NVL (
                                                                       xba.effective_start_date,
                                                                       SYSDATE))
                                                             AND TRUNC (
                                                                    NVL (
                                                                       xba.effective_end_date,
                                                                       SYSDATE))
                                     AND TRUNC (SYSDATE) BETWEEN TRUNC (
                                                                    NVL (
                                                                       xbau.effective_start_date,
                                                                       SYSDATE))
                                                             AND TRUNC (
                                                                    NVL (
                                                                       xbau.effective_end_date,
                                                                       SYSDATE))
                                     AND xba.account_number =
                                            r_cp_stage.originator_account
                                     AND xbau.entity_id =
                                            NVL (ctrl.control_id,
                                                 xbau.entity_id)
                                     AND xbau.account_usage_type =
                                            xxmm_constants.gc_org_acc_usage_type
                                     AND xbau.entity_type =
                                            xxmm_constants.gc_entity_type
                                     AND xba.bank_account_id =
                                            xbau.bank_account_id);

               l_client_orig_match_single := 'Y';
               l_control_id_single := l_control_id;
               log_message (
                     'Originator Account for '
                  || r_cp_stage.originator_account
                  || ' Control Number from file '
                  || r_cp_stage.attribute4
                  || ' exists',
                  3);
            EXCEPTION
               WHEN OTHERS
               THEN
                  l_client_orig_match_single := 'N';
                  log_message (
                        'Other Exception for Originator Account for '
                     || r_cp_stage.originator_account
                     || ' Control Number from file '
                     || r_cp_stage.attribute4
                     || ' does not exist',
                     3);
                  log_message (SQLERRM, 3);
            END;
         WHEN NO_DATA_FOUND
         THEN
            log_message (
                  'Originator Account not found '
               || r_cp_stage.originator_account,
               3);
            l_client_orig_match := 'N';
         WHEN OTHERS
         THEN
            log_message (
                  'Other Exception for Originator Account '
               || r_cp_stage.originator_account,
               3);
            log_message (SQLERRM, 3);

            l_client_orig_match := 'N';
      END;


      -- Part 2 Check if there is an Originator Account match and Impound match - Create Applied Receipt
      IF l_client_orig_match = 'Y'
      THEN
         BEGIN
            log_message (
                  'Begin Originator Account match '
               || r_cp_stage.originator_account
               || ' and Impound Amount '
               || r_cp_stage.amount,
               3);


            SELECT imp.impound_trx_id,
                   imp.impound_trx_number,
                   ctrl.control_id,
                   ctrl.control_number,
                   ctrl.control_name,
                   imp.funding_method
              INTO l_impound_trx_id,
                   l_impound_trx_number,
                   l_control_id,
                   l_control_number,
                   l_control_name,
                   l_funding_method
              FROM xxmm_cts_impound_trx imp,
                   xxmm_cts_headers cts,
                   xxmm_customer_controls ctrl
             WHERE     cts.cts_header_id = imp.cts_header_id
                   AND cts.control_id = ctrl.control_id
                   AND imp.impound_bank_account_id =
                          r_cp_stage.bank_account_id
                   AND imp.application_status IN
                          (xxmm_constants.gc_imp_unapplied_status,
                           xxmm_constants.gc_imp_partial_status)
                   AND imp.status IN
                          (xxmm_constants.gc_validated_status,
                           xxmm_constants.gc_imp_trx_status_need_val)
                   AND r_cp_stage.amount =
                            NVL (imp.impound_trx_amount, 0)
                          - NVL (imp.applied_amount, 0)
                          + NVL (imp.adjustment_amount, 0)
                          - NVL (imp.write_off_amount, 0)
                   AND ctrl.control_id IN
                          (SELECT xbau.entity_id
                             FROM xxmm_bank_accounts xba,
                                  xxmm_bank_account_uses xbau
                            WHERE     TRUNC (SYSDATE) BETWEEN TRUNC (
                                                                 NVL (
                                                                    xba.effective_start_date,
                                                                    SYSDATE))
                                                          AND TRUNC (
                                                                 NVL (
                                                                    xba.effective_end_date,
                                                                    SYSDATE))
                                  AND TRUNC (SYSDATE) BETWEEN TRUNC (
                                                                 NVL (
                                                                    xbau.effective_start_date,
                                                                    SYSDATE))
                                                          AND TRUNC (
                                                                 NVL (
                                                                    xbau.effective_end_date,
                                                                    SYSDATE))
                                  AND xba.account_number =
                                         r_cp_stage.originator_account
                                  AND xbau.entity_id =
                                         NVL (ctrl.control_id,
                                              xbau.entity_id)
                                  AND xbau.account_usage_type =
                                         xxmm_constants.gc_org_acc_usage_type
                                  AND xbau.entity_type =
                                         xxmm_constants.gc_entity_type
                                  AND xba.bank_account_id =
                                         xbau.bank_account_id);


            l_application_status := 'APP';
            log_message (
                  'Applied Receipt will be created matched on Originator Account '
               || r_cp_stage.originator_account
               || ' for Control '
               || l_control_number
               || ' for Impound TRX Number '
               || l_impound_trx_number
               || ' and Impound Amount for '
               || r_cp_stage.amount,
               3);

            l_match_flag := 'Y';
         EXCEPTION
            WHEN TOO_MANY_ROWS
            THEN
               log_message (
                     'Too Many Rows for Originator Account for '
                  || r_cp_stage.originator_account
                  || ' and impound amount for '
                  || r_cp_stage.amount,
                  3);

               -- Check if client has more than one impound (same amount) and same orginator account
               BEGIN
                  log_message (
                        'Check if there are two impounds for same client '
                     || r_cp_stage.originator_account
                     || ' and impound amount for '
                     || r_cp_stage.amount,
                     3);

                  SELECT DISTINCT
                         ctrl.control_id,
                         ctrl.control_number,
                         ctrl.control_name
                    INTO l_control_id, l_control_number, l_control_name
                    FROM xxmm_cts_impound_trx imp,
                         xxmm_cts_headers cts,
                         xxmm_customer_controls ctrl
                   WHERE     cts.cts_header_id = imp.cts_header_id
                         AND cts.control_id = ctrl.control_id
                         AND imp.impound_bank_account_id =
                                r_cp_stage.bank_account_id
                         AND imp.application_status IN
                                (xxmm_constants.gc_imp_unapplied_status,
                                 xxmm_constants.gc_imp_partial_status)
                         AND imp.status IN
                                (xxmm_constants.gc_validated_status,
                                 xxmm_constants.gc_imp_trx_status_need_val)
                         AND r_cp_stage.amount =
                                  NVL (imp.impound_trx_amount, 0)
                                - NVL (imp.applied_amount, 0)
                                + NVL (imp.adjustment_amount, 0)
                                - NVL (imp.write_off_amount, 0)
                         AND ctrl.control_id IN
                                (SELECT xbau.entity_id
                                   FROM xxmm_bank_accounts xba,
                                        xxmm_bank_account_uses xbau
                                  WHERE     TRUNC (SYSDATE) BETWEEN TRUNC (
                                                                       NVL (
                                                                          xba.effective_start_date,
                                                                          SYSDATE))
                                                                AND TRUNC (
                                                                       NVL (
                                                                          xba.effective_end_date,
                                                                          SYSDATE))
                                        AND TRUNC (SYSDATE) BETWEEN TRUNC (
                                                                       NVL (
                                                                          xbau.effective_start_date,
                                                                          SYSDATE))
                                                                AND TRUNC (
                                                                       NVL (
                                                                          xbau.effective_end_date,
                                                                          SYSDATE))
                                        AND xba.account_number =
                                               r_cp_stage.originator_account
                                        AND xbau.entity_id =
                                               NVL (ctrl.control_id,
                                                    xbau.entity_id)
                                        AND xbau.account_usage_type =
                                               xxmm_constants.gc_org_acc_usage_type
                                        AND xbau.entity_type =
                                               xxmm_constants.gc_entity_type
                                        AND xba.bank_account_id =
                                               xbau.bank_account_id);

                  --  GROUP BY  ctrl.control_id,ctrl.control_number,ctrl.control_name;

                  l_client_orig_match_single := 'Y';
                  l_control_id_single := l_control_id;
                  l_control_number_single := l_control_number;


                  log_message (
                        'Control '
                     || l_control_number
                     || ' has more than one impound for Originator Account for '
                     || r_cp_stage.originator_account
                     || ' and impound amount for '
                     || r_cp_stage.amount,
                     3);
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     l_client_orig_match_single := 'N';
               END;

               -- match by orginator account and control number, if there are multiple orginater account matches
               IF l_client_orig_match_single = 'N'
               THEN
                  BEGIN
                     log_message (
                           'Begin Originator Account match for '
                        || r_cp_stage.originator_account
                        || ' Control Number from file '
                        || r_cp_stage.attribute4
                        || ' and Impound Amount for '
                        || r_cp_stage.amount,
                        3);

                     SELECT imp.impound_trx_id,
                            imp.impound_trx_number,
                            ctrl.control_id,
                            ctrl.control_number,
                            ctrl.control_name,
                            imp.funding_method
                       INTO l_impound_trx_id,
                            l_impound_trx_number,
                            l_control_id,
                            l_control_number,
                            l_control_name,
                            l_funding_method
                       FROM xxmm_cts_impound_trx imp,
                            xxmm_cts_headers cts,
                            xxmm_customer_controls ctrl
                      WHERE     cts.cts_header_id = imp.cts_header_id
                            AND cts.control_id = ctrl.control_id
                            AND imp.impound_bank_account_id =
                                   r_cp_stage.bank_account_id
                            AND imp.application_status IN
                                   (xxmm_constants.gc_imp_unapplied_status,
                                    xxmm_constants.gc_imp_partial_status)
                            AND imp.status IN
                                   (xxmm_constants.gc_validated_status,
                                    xxmm_constants.gc_imp_trx_status_need_val)
                            AND r_cp_stage.amount =
                                     NVL (imp.impound_trx_amount, 0)
                                   - NVL (imp.applied_amount, 0)
                                   + NVL (imp.adjustment_amount, 0)
                                   - NVL (imp.write_off_amount, 0)
                            AND UPPER (
                                   TRIM (
                                      get_control_number_nl_fr (
                                         NVL (r_cp_stage.attribute4,
                                              ctrl.control_number)))) =
                                   ctrl.control_number
                            AND ctrl.control_id IN
                                   (SELECT xbau.entity_id
                                      FROM xxmm_bank_accounts xba,
                                           xxmm_bank_account_uses xbau
                                     WHERE     TRUNC (SYSDATE) BETWEEN TRUNC (
                                                                          NVL (
                                                                             xba.effective_start_date,
                                                                             SYSDATE))
                                                                   AND TRUNC (
                                                                          NVL (
                                                                             xba.effective_end_date,
                                                                             SYSDATE))
                                           AND TRUNC (SYSDATE) BETWEEN TRUNC (
                                                                          NVL (
                                                                             xbau.effective_start_date,
                                                                             SYSDATE))
                                                                   AND TRUNC (
                                                                          NVL (
                                                                             xbau.effective_end_date,
                                                                             SYSDATE))
                                           AND xba.account_number =
                                                  r_cp_stage.originator_account
                                           AND xbau.entity_id =
                                                  NVL (ctrl.control_id,
                                                       xbau.entity_id)
                                           AND xbau.account_usage_type =
                                                  xxmm_constants.gc_org_acc_usage_type
                                           AND xbau.entity_type =
                                                  xxmm_constants.gc_entity_type
                                           AND xba.bank_account_id =
                                                  xbau.bank_account_id);

                     log_message (
                           'Applied Receipt will be created matched on Originator Account '
                        || r_cp_stage.originator_account
                        || ' and matched on Control '
                        || l_control_number
                        || ' for Impound TRX Number '
                        || l_impound_trx_number
                        || ' and Impounnd Amount for '
                        || r_cp_stage.amount,
                        3);
                     l_match_flag := 'Y';
                     l_application_status := 'APP';
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        log_message (
                              'Other Exception for Originator Account for '
                           || r_cp_stage.originator_account
                           || ' Control Number from file '
                           || r_cp_stage.attribute4
                           || ' and impound amount for '
                           || r_cp_stage.amount,
                           3);
                        log_message (SQLERRM, 3);
                        l_match_flag := 'N';
                  -- client name matching can be added as needed.

                  END;
               END IF;
            WHEN NO_DATA_FOUND
            THEN
               log_message (
                     'Originator Account not found for '
                  || r_cp_stage.originator_account
                  || ' and impound amount for '
                  || r_cp_stage.amount,
                  3);

               l_match_flag := 'N';
            WHEN OTHERS
            THEN
               log_message (
                     'Other Exception for Originator Account for '
                  || r_cp_stage.originator_account
                  || ' and impound amount for '
                  || r_cp_stage.amount,
                  3);
               log_message (SQLERRM, 3);

               l_match_flag := 'N';
         END;
      END IF;


      -- Part 3 if there Originator Account match and no Impound match - Create Unapplied Reciept
      IF     l_match_flag = 'N'
         AND l_client_orig_match = 'Y'
         AND l_client_orig_match_single = 'Y'
      THEN
         log_message (
               'Unapplied Receipt will be created for Control '
            || l_control_number_single
            || ' matched on Originator Account '
            || r_cp_stage.originator_account
            || ' unmatched impound amount for '
            || r_cp_stage.amount,
            3);

         l_impound_trx_id := NULL;
         set_funding_method (r_cp_stage.bank_account_id);
         l_funding_method := g_funding_method;
         l_control_id := l_control_id_single;
         l_application_status := 'UNP';
      END IF;

      -- Part 4 if there is a Control number and impound match - Create Applied Reciept
      -- Assume it's UND until a match is found
      IF l_match_flag = 'N' AND l_application_status = 'UND'
      THEN
         BEGIN
            log_message (
                  'Begin Control Number match from file '
               || r_cp_stage.attribute4
               || ' and Impound Amount for '
               || r_cp_stage.amount,
               3);

            SELECT imp.impound_trx_id,
                   imp.impound_trx_number,
                   ctrl.control_id,
                   ctrl.control_number,
                   ctrl.control_name,
                   imp.funding_method
              INTO l_impound_trx_id,
                   l_impound_trx_number,
                   l_control_id,
                   l_control_number,
                   l_control_name,
                   l_funding_method
              FROM xxmm_cts_impound_trx imp,
                   xxmm_cts_headers cts,
                   xxmm_customer_controls ctrl
             WHERE     cts.cts_header_id = imp.cts_header_id
                   AND cts.control_id = ctrl.control_id
                   AND imp.impound_bank_account_id =
                          r_cp_stage.bank_account_id
                   AND imp.application_status IN
                          (xxmm_constants.gc_imp_unapplied_status,
                           xxmm_constants.gc_imp_partial_status)
                   AND imp.status IN
                          (xxmm_constants.gc_validated_status,
                           xxmm_constants.gc_imp_trx_status_need_val)
                   AND r_cp_stage.amount =
                            NVL (imp.impound_trx_amount, 0)
                          - NVL (imp.applied_amount, 0)
                          + NVL (imp.adjustment_amount, 0)
                          - NVL (imp.write_off_amount, 0)
                   AND UPPER (
                          TRIM (
                             get_control_number_nl_fr (
                                r_cp_stage.attribute4
                                   ))) =
                          ctrl.control_number;

            log_message (
                  'Applied Receipt for Control Number match for '
               || l_control_number
               || ' and Impound Amount for '
               || r_cp_stage.amount,
               3);

            l_match_flag := 'Y';
            l_application_status := 'APP';
         EXCEPTION

            WHEN OTHERS
            THEN
               log_message (
                     'Other Exception for Control Number match from file '
                  || r_cp_stage.attribute4
                  || ' and impound amount for '
                  || r_cp_stage.amount,
                  3);
               log_message (SQLERRM, 3);
               l_match_flag := 'N';
         END;
      END IF;

      -- Part 5 if there is a Control number match only - Create unapplied Reciept
      -- Assume it's UND until tha match is found
      IF l_match_flag = 'N' AND l_application_status = 'UND'
      THEN
         BEGIN
            log_message ('Begin Control Match for ' || r_cp_stage.attribute4,
                         3);

            SELECT ctrl.control_id, ctrl.control_number, ctrl.control_name
              INTO l_control_id, l_control_number, l_control_name
              FROM xxmm_customer_controls ctrl
             WHERE   (
                          TRIM (
                             get_control_number_nl_fr (
                                r_cp_stage.attribute4
                                   ))) =
                      ctrl.control_number;

            log_message (
                  'Unapplied Receipt for Control '
               || l_control_number
               || ' matched by Control '
               || ' for amount '
               || r_cp_stage.amount,
               3);

            l_application_status := 'UNP';
            l_match_flag := 'N';
            l_impound_trx_id := NULL;

            set_funding_method (r_cp_stage.bank_account_id);
            l_funding_method := g_funding_method;
         EXCEPTION
            WHEN OTHERS
            THEN
               log_message (
                     'Other Exception for Control Match for '
                  || r_cp_stage.attribute4,
                  3);
               log_message (SQLERRM, 3);
         END;
      END IF;

      -->> START George Felian   17-JUL-2020      FP68493  - no cient name matching when too many row for org account
      -- Dont do any control name matching when more than one client uses same an originator accoutn
      -- This causes wrong control to be assigned  when a family have contols have same or similar names
      IF l_too_many_orig  = 'Y'
      AND l_application_status = 'UND' THEN
        l_application_status := 'DUP';
                          log_message (
                        'Originator Acccount  '
                        || r_cp_stage.originator_account
                        ||' belongs to more than one control for amount  '
                     || r_cp_stage.amount,
                     3);
      END IF;
       --<< END George Felian   17-JUL-2020      FP68493  - no cient name matching whentoo many row for org account

      -- Part 6 if there is a Control name and impound match - Create Applied Reciept
      -- Assume it's UND until a match is found

      -- Exact control name match and impound amount
      IF     l_match_flag = 'N'
         AND l_application_status = 'UND'
         AND l_too_many_impounds = 'N'
      THEN
         log_message (
               'Begin Control Name match from file '
            || r_cp_stage.bank_reference_no
            || ' and Impound Amount for '
            || r_cp_stage.amount,
            3);

         BEGIN
            SELECT imp.impound_trx_id,
                   imp.impound_trx_number,
                   ctrl.control_id,
                   ctrl.control_number,
                   ctrl.control_name,
                   imp.funding_method
              INTO l_impound_trx_id,
                   l_impound_trx_number,
                   l_control_id,
                   l_control_number,
                   l_control_name,
                   l_funding_method
              FROM xxmm_cts_impound_trx imp,
                   xxmm_cts_headers cts,
                   xxmm_customer_controls ctrl
             WHERE     cts.cts_header_id = imp.cts_header_id
                   AND cts.control_id = ctrl.control_id
                   AND imp.impound_bank_account_id =
                          r_cp_stage.bank_account_id
                   AND imp.application_status IN
                          (xxmm_constants.gc_imp_unapplied_status,
                           xxmm_constants.gc_imp_partial_status)
                   AND imp.status IN
                          (xxmm_constants.gc_validated_status,
                           xxmm_constants.gc_imp_trx_status_need_val)
                   AND r_cp_stage.amount =
                            NVL (imp.impound_trx_amount, 0)
                          - NVL (imp.applied_amount, 0)
                          + NVL (imp.adjustment_amount, 0)
                          - NVL (imp.write_off_amount, 0)
                   AND NVL (UPPER (r_cp_stage.bank_reference_no), 'NO_MATCH') =
                          UPPER (ctrl.control_name);


            l_match_flag := 'Y';
            l_application_status := 'APP';

            log_message (
                  'Applied Receipt for Client Name match for '
               || l_control_name
               || ' based on exact match for Control Number for '
               || l_control_number
               || ' for Impound TRX Number '
               || l_impound_trx_number
               || ' and Impound Amount for '
               || r_cp_stage.amount,
               3);
         EXCEPTION
            WHEN TOO_MANY_ROWS
            THEN
               l_too_many_impounds := 'Y';
               log_message (
                     ' Too Many Impounds found for Exact Client Name match from file '
                  || r_cp_stage.bank_reference_no
                  || ' and Impound Amount for '
                  || r_cp_stage.amount,
                  3);
            WHEN OTHERS
            THEN
               -- contine with renaing client name/impound matching
               NULL;
         END;
      END IF;

      -- Remove special charcters from client name and check for impound
      IF     l_match_flag = 'N'
         AND l_application_status = 'UND'
         AND l_too_many_impounds = 'N'
      THEN
         BEGIN
            SELECT imp.impound_trx_id,
                   imp.impound_trx_number,
                   ctrl.control_id,
                   ctrl.control_number,
                   ctrl.control_name,
                   imp.funding_method
              INTO l_impound_trx_id,
                   l_impound_trx_number,
                   l_control_id,
                   l_control_number,
                   l_control_name,
                   l_funding_method
              FROM xxmm_cts_impound_trx imp,
                   xxmm_cts_headers cts,
                   xxmm_customer_controls ctrl
             WHERE     cts.cts_header_id = imp.cts_header_id
                   AND cts.control_id = ctrl.control_id
                   AND imp.impound_bank_account_id =
                          r_cp_stage.bank_account_id
                   AND imp.application_status IN
                          (xxmm_constants.gc_imp_unapplied_status,
                           xxmm_constants.gc_imp_partial_status)
                   AND imp.status IN
                          (xxmm_constants.gc_validated_status,
                           xxmm_constants.gc_imp_trx_status_need_val)
                   AND r_cp_stage.amount =
                            NVL (imp.impound_trx_amount, 0)
                          - NVL (imp.applied_amount, 0)
                          + NVL (imp.adjustment_amount, 0)
                          - NVL (imp.write_off_amount, 0)
                    AND NVL (
                      xxmm_create_receipts.clean_special_chars (
                         UPPER (REPLACE(r_cp_stage.bank_reference_no,' ',''))),
                      'NO_MATCH') =
                      xxmm_create_receipts.clean_special_chars (
                         UPPER (replace(ctrl.control_name,' ','')));



            l_match_flag := 'Y';
            l_application_status := 'APP';

            log_message (
                  'Applied Receipt Client Name match for '
               || l_control_name
               || ' based on removing special for Control Number for '
               || l_control_number
               || ' for Impound TRX Number '
               || l_impound_trx_number
               || ' and Impound Amount for '
               || r_cp_stage.amount,
               3);
         EXCEPTION
            WHEN TOO_MANY_ROWS
            THEN
               l_too_many_impounds := 'Y';
               log_message (
                     'Too Many Impounds found for Special Character Client Name match from file '
                  || r_cp_stage.bank_reference_no
                  || ' and Impound Amount for '
                  || r_cp_stage.amount,
                  3);
            WHEN OTHERS
            THEN
               -- contine with renaing client name/impound matching
               NULL;
         END;
      END IF;

      -- client name based on name exclusion and impound amount
      IF     l_match_flag = 'N'
         AND l_application_status = 'UND'
         AND l_too_many_impounds = 'N'
      THEN
         BEGIN
            SELECT imp.impound_trx_id,
                   imp.impound_trx_number,
                   ctrl.control_id,
                   ctrl.control_number,
                   ctrl.control_name,
                   imp.funding_method
              INTO l_impound_trx_id,
                   l_impound_trx_number,
                   l_control_id,
                   l_control_number,
                   l_control_name,
                   l_funding_method
              FROM xxmm_cts_impound_trx imp,
                   xxmm_cts_headers cts,
                   xxmm_customer_controls ctrl
             WHERE     cts.cts_header_id = imp.cts_header_id
                   AND cts.control_id = ctrl.control_id
                   AND imp.impound_bank_account_id =
                          r_cp_stage.bank_account_id
                   AND imp.application_status IN
                          (xxmm_constants.gc_imp_unapplied_status,
                           xxmm_constants.gc_imp_partial_status)
                   AND imp.status IN
                          (xxmm_constants.gc_validated_status,
                           xxmm_constants.gc_imp_trx_status_need_val)
                   AND r_cp_stage.amount =
                            NVL (imp.impound_trx_amount, 0)
                          - NVL (imp.applied_amount, 0)
                          + NVL (imp.adjustment_amount, 0)
                          - NVL (imp.write_off_amount, 0)
                   AND NVL (
                          xxmm_create_receipts.strip_control_name (
                             xxmm_create_receipts.clean_special_chars (
                                UPPER (r_cp_stage.bank_reference_no))),
                          'NO_MATCH') =
                          xxmm_create_receipts.strip_control_name (
                             xxmm_create_receipts.clean_special_chars (
                                UPPER (ctrl.control_name)));


            l_match_flag := 'Y';
            l_application_status := 'APP';

            log_message (
                  'Applied Receipt for Client Name match for '
               || l_control_name
               || ' based on Name Exclusion for Control Number for '
               || l_control_number
               || ' for Impound TRX Number '
               || l_impound_trx_number
               || ' and Impound Amount for '
               || r_cp_stage.amount,
               3);
         EXCEPTION
            WHEN TOO_MANY_ROWS
            THEN
               l_too_many_impounds := 'Y';
               log_message (
                     ' Too Many Impounds found for Name Exclusion for Client Name match from file '
                  || r_cp_stage.bank_reference_no
                  || ' and Impound Amount for '
                  || r_cp_stage.amount,
                  3);
            WHEN OTHERS
            THEN
               NULL;
         END;
      END IF;

      -- client name based on wildcard and impound amount
      IF     l_match_flag = 'N'
         AND l_application_status = 'UND'
         AND l_too_many_impounds = 'N'
      THEN
         BEGIN
            SELECT imp.impound_trx_id,
                   imp.impound_trx_number,
                   ctrl.control_id,
                   ctrl.control_number,
                   ctrl.control_name,
                   imp.funding_method
              INTO l_impound_trx_id,
                   l_impound_trx_number,
                   l_control_id,
                   l_control_number,
                   l_control_name,
                   l_funding_method
              FROM xxmm_cts_impound_trx imp,
                   xxmm_cts_headers cts,
                   xxmm_customer_controls ctrl
             WHERE     cts.cts_header_id = imp.cts_header_id
                   AND cts.control_id = ctrl.control_id
                   AND imp.impound_bank_account_id =
                          r_cp_stage.bank_account_id
                   AND imp.application_status IN
                          (xxmm_constants.gc_imp_unapplied_status,
                           xxmm_constants.gc_imp_partial_status)
                   AND imp.status IN
                          (xxmm_constants.gc_validated_status,
                           xxmm_constants.gc_imp_trx_status_need_val)
                   AND r_cp_stage.amount =
                            NVL (imp.impound_trx_amount, 0)
                          - NVL (imp.applied_amount, 0)
                          + NVL (imp.adjustment_amount, 0)
                          - NVL (imp.write_off_amount, 0)
                   AND xxmm_create_receipts.strip_control_name (
                          xxmm_create_receipts.clean_special_chars (
                             UPPER (ctrl.control_name))) LIKE
                             '%'
                          || NVL (
                                xxmm_create_receipts.strip_control_name (
                                   xxmm_create_receipts.clean_special_chars (
                                      UPPER (r_cp_stage.bank_reference_no))),
                                'NO_MATCH')
                          || '%';


            l_match_flag := 'Y';
            l_application_status := 'APP';

            log_message (
                  'Applied Receipt for Client Name match for '
               || l_control_name
               || ' based on Wildcard match for Control Number for '
               || l_control_number
               || ' for Impound TRX Number '
               || l_impound_trx_number
               || ' and Impound Amount for '
               || r_cp_stage.amount,
               3);
         EXCEPTION
            WHEN TOO_MANY_ROWS
            THEN
               l_too_many_impounds := 'Y';
               l_match_flag := 'N';
               log_message (
                     ' Too Many Impounds found for Wildcard match for  Client Name match from file '
                  || r_cp_stage.bank_reference_no
                  || ' and Impound Amount for '
                  || r_cp_stage.amount,
                  3);
            WHEN OTHERS
            THEN
             log_message (
                  'No Client Name match for '
               || r_cp_stage.bank_reference_no
               || ' and impound match for '
               || r_cp_stage.amount,
               3);
         END;
      END IF;


      -- Part 7 if same client has two or more impounds with the same amount - make it unapplied.
      --assume to be unidentifed until match found;
      IF l_match_flag = 'N'
      AND l_application_status = 'UND'
      AND l_too_many_impounds = 'Y'
      THEN
         log_message (
               'Begin Check if Multiple Impounds belong to same Client based Control Name match from file '
            || r_cp_stage.bank_reference_no
            || ' for Amount '
            || r_cp_stage.amount,
            3);

         BEGIN
           SELECT  DISTINCT ctrl.control_id,
                   ctrl.control_number,
                   ctrl.control_name
              INTO l_control_id,
                   l_control_number,
                   l_control_name
              FROM xxmm_cts_impound_trx imp,
                   xxmm_cts_headers cts,
                   xxmm_customer_controls ctrl
             WHERE     cts.cts_header_id = imp.cts_header_id
                   AND cts.control_id = ctrl.control_id
                   AND imp.impound_bank_account_id =
                          r_cp_stage.bank_account_id
                   AND imp.application_status IN
                          (xxmm_constants.gc_imp_unapplied_status,
                           xxmm_constants.gc_imp_partial_status)
                   AND imp.status IN
                          (xxmm_constants.gc_validated_status,
                           xxmm_constants.gc_imp_trx_status_need_val)
                   AND r_cp_stage.amount =
                            NVL (imp.impound_trx_amount, 0)
                          - NVL (imp.applied_amount, 0)
                          + NVL (imp.adjustment_amount, 0)
                          - NVL (imp.write_off_amount, 0)
                   AND xxmm_create_receipts.strip_control_name (
                          xxmm_create_receipts.clean_special_chars (
                             UPPER (ctrl.control_name))) LIKE
                             '%'
                          || NVL (
                                xxmm_create_receipts.strip_control_name (
                                   xxmm_create_receipts.clean_special_chars (
                                      UPPER (r_cp_stage.bank_reference_no))),
                                'NO_MATCH')
                          || '%';


            l_match_flag := 'N';
            l_application_status := 'UNP';
            set_funding_method (r_cp_stage.bank_account_id);
            l_funding_method := g_funding_method;

            log_message (
                  'Unapplied Receipt for Multiple Impound Amounts for same Client based on Client Name match for '
               || l_control_name
               || ' for Control Number for '
               || l_control_number
               || ' and Amount for '
               || r_cp_stage.amount,
               3);
         EXCEPTION
            WHEN OTHERS
            THEN
     log_message (
               'When Other Exception for Multiple Impounds belong to same Client based Control Name match from file '
            || r_cp_stage.bank_reference_no
            || ' for Amount '
            || r_cp_stage.amount,
            3);
            log_message (SQLERRM, 3);

         END;
      END IF;


      -- Part 8 - client name match -- make Unapplied
      --assume to be unidentifed until match found;

      -- IF exact control name match make Unapplied
      IF l_match_flag = 'N' AND l_application_status = 'UND'
      THEN
         BEGIN
            SELECT ctrl.control_id, ctrl.control_number, ctrl.control_name
              INTO l_control_id, l_control_number, l_control_name
              FROM xxmm_customer_controls ctrl
             WHERE NVL (UPPER (r_cp_stage.bank_reference_no), 'NO_MATCH') =
                      UPPER (ctrl.control_name);


            l_match_flag := 'N';
            l_application_status := 'UNP';
            set_funding_method (r_cp_stage.bank_account_id);
            l_funding_method := g_funding_method;

            log_message (
                  'Unapplied Reciept for Client Name match for '
               || l_control_name
               || ' based on exact match for Control Number for '
               || l_control_number
               || ' and Amount for '
               || r_cp_stage.amount,
               3);
         EXCEPTION
            WHEN OTHERS
            THEN
                log_message ( '
                When Other Exception Client Name match for '
               || r_cp_stage.bank_reference_no
               || 'based on exact match for '
               || r_cp_stage.amount,
               3);
         END;
      END IF;

      -- Remove any special charcters from client name make Unapplied
      IF l_match_flag = 'N' AND l_application_status = 'UND'
      THEN
         log_message (
               'Begin Control Name match from file '
            || r_cp_stage.bank_reference_no
            || ' for Amount '
            || r_cp_stage.amount,
            3);

         BEGIN
            SELECT ctrl.control_id, ctrl.control_number, ctrl.control_name
              INTO l_control_id, l_control_number, l_control_name
              FROM xxmm_customer_controls ctrl
            WHERE NVL (
                      xxmm_create_receipts.clean_special_chars (
                         UPPER (REPLACE(r_cp_stage.bank_reference_no,' ',''))),
                      'NO_MATCH') =
                      xxmm_create_receipts.clean_special_chars (
                         UPPER (replace(ctrl.control_name,' ','')));


            l_match_flag := 'N';
            l_application_status := 'UNP';
            set_funding_method (r_cp_stage.bank_account_id);
            l_funding_method := g_funding_method;

            log_message (
                  'Unapplied Reciept for Client Name match for '
               || l_control_name
               || ' based on special character for Control Number for '
               || l_control_number
               || ' and Amount for '
               || r_cp_stage.amount,
               3);
         EXCEPTION
            WHEN OTHERS
            THEN
               -- contine with renaing client name/matching
               NULL;
              log_message ( '
                based on special character for '
               || r_cp_stage.bank_reference_no
               || ' based on exact name exclusion for '
               || r_cp_stage.amount,
               3);

         END;
      END IF;


      -- client name based on name exclusion make Unapplied
      IF l_match_flag = 'N' AND l_application_status = 'UND'
      THEN
         BEGIN
            SELECT ctrl.control_id, ctrl.control_number, ctrl.control_name
              INTO l_control_id, l_control_number, l_control_name
              FROM xxmm_customer_controls ctrl
             WHERE NVL (
                      xxmm_create_receipts.strip_control_name (
                         xxmm_create_receipts.clean_special_chars (
                            UPPER (r_cp_stage.bank_reference_no))),
                      'NO_MATCH') =
                      xxmm_create_receipts.strip_control_name (
                         xxmm_create_receipts.clean_special_chars (
                            UPPER (ctrl.control_name)));


            l_match_flag := 'N';
            l_application_status := 'UNP';
            set_funding_method (r_cp_stage.bank_account_id);
            l_funding_method := g_funding_method;

            log_message (
                  'Unapplied Reciept for Client Name match for '
               || l_control_name
               || ' based on exact name exclusion for Control Number for '
               || l_control_number
               || ' and Amount for '
               || r_cp_stage.amount,
               3);
         EXCEPTION

            WHEN OTHERS
            THEN

                log_message ( '
                When Other Exception Client Name match for '
               || r_cp_stage.bank_reference_no
               || ' based on exact name exclusion for '
               || r_cp_stage.amount,
               3);

         END;
      END IF;

      -- client name based on wildcard make Unapplied
      IF l_match_flag = 'N' AND l_application_status = 'UND'
      THEN
         BEGIN
            SELECT ctrl.control_id, ctrl.control_number, ctrl.control_name
              INTO l_control_id, l_control_number, l_control_name
              FROM xxmm_customer_controls ctrl
             WHERE xxmm_create_receipts.strip_control_name (
                      xxmm_create_receipts.clean_special_chars (
                         UPPER (ctrl.control_name))) LIKE
                         '%'
                      || NVL (
                            xxmm_create_receipts.strip_control_name (
                               xxmm_create_receipts.clean_special_chars (
                                  UPPER (r_cp_stage.bank_reference_no))),
                            'NO_MATCH')
                      || '%';


            l_match_flag := 'N';
            l_application_status := 'UNP';
            set_funding_method (r_cp_stage.bank_account_id);
            l_funding_method := g_funding_method;

            LOG_MESSAGE (
                  'Unapplied Reciept for Client Name match for '
               || L_CONTROL_NAME
               || ' based on wildcard for Control Number for '
               || L_CONTROL_NUMBER
               || ' and Amount for '
               || R_CP_STAGE.AMOUNT,
               3);
         EXCEPTION
            WHEN TOO_MANY_ROWS
            THEN

               log_message ( '
                When Too Many Rows Exception Client Name match for '
               || r_cp_stage.bank_reference_no
               || ' based on wildcard search for Amount for '
               || r_cp_stage.amount,
               3);

            WHEN OTHERS
            THEN
                log_message ( '
                When Other Exception Client Name match for '
               || r_cp_stage.bank_reference_no
               || ' based on wildcard search for Amount for '
               || r_cp_stage.amount,
               3);
         END;
      END IF;

      -- Part 9 - If receipt is still unidentified...
      IF l_application_status = 'UND'
         -->> START George Felian   17-JUL-2020      FP68493  - no cient name matching whentoo many row for org account
       OR  l_application_status = 'DUP'
         -->> END George Felian   17-JUL-2020      FP68493  - no cient name matching whentoo many row for org account
      THEN
         l_control_id := NULL;
         l_match_flag := 'N';
         set_funding_method (r_cp_stage.bank_account_id);
         l_funding_method := g_funding_method;
         log_message (
               'Unidentified Receipt will be created  '
            || r_cp_stage.originator_account
            || ' for attribute4 '
            || r_cp_stage.attribute4
            || ' and bank_reference_no for '
            || r_cp_stage.BANK_REFERENCE_NO
            || ' and amount of '
            || r_cp_stage.amount,
            3);
      END IF;


      UPDATE xxmm_itd_cp_receipt_stag
         SET match_flag = l_match_flag,
             attribute6 = l_funding_method,
             attribute7 = l_control_id,
             attribute8 = l_impound_trx_id
       WHERE ROWID = r_cp_stage.ROWID;
   END LOOP;

   log_message (
         'Ending update_itd_stag_match_flag_uk for inbound_file_id: '
      || TO_CHAR (p_inbound_file_id));
EXCEPTION
   WHEN OTHERS
   THEN
      g_err_msg :=
            'OTHER EXCEPTION in procedure update_itd_stag_match_flag_uk , the error text is : '
         || SQLERRM;
      log_message (g_err_msg);
      log_file (g_err_msg);
      log_error (g_err_msg, xxmm_constants.msg_type_error);

      raise_application_error (-20010, g_err_msg);
END update_itd_stag_match_flag_uk;
    ----------------------------------------------------------------------------------
    --
    -- Procedure:     CONFIRM_BATCH
    --
    --
    --
    -- This procedure confirm receipt batches and receipts, and create account entries
    --
    --+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    --
    --  Created By        Date         Description
    --   Karen Jiang     June 2,2014  PWR A-10-1009
    -----------------------------------------------------------------------------------

    PROCEDURE confirm_batch (p_receipt_batch_id NUMBER)
    IS
        l_creation_date       DATE DEFAULT NULL;
        l_created_by          NUMBER DEFAULT NULL;
        l_last_update_date    DATE DEFAULT NULL;
        l_last_updated_by     NUMBER DEFAULT NULL;
        l_last_update_login   NUMBER DEFAULT NULL;


        l_code                VARCHAR2 (100) DEFAULT NULL;
        l_flag                BOOLEAN DEFAULT TRUE;

        l_text                VARCHAR2 (2000) DEFAULT NULL;
        l_err_code            VARCHAR2 (0100) DEFAULT NULL;
        l_err_msg             VARCHAR2 (2000) DEFAULT NULL;
        l_trx_event_id        NUMBER DEFAULT NULL;
        l_cnt                 NUMBER DEFAULT NULL;
        l_applied_amount      NUMBER DEFAULT NULL;

        e_confirm             EXCEPTION;
        e_acct_api            EXCEPTION;

        CURSOR c_rec_batch (
            p_batch_id   IN xxmm_receipt_batches.receipt_batch_id%TYPE)
        IS
                SELECT *
                  FROM xxmm_receipt_batches
                 WHERE receipt_batch_id = p_batch_id
            FOR UPDATE OF status NOWAIT;

        r_rec_batch           c_rec_batch%ROWTYPE;

        CURSOR c_rec (
            p_batch_id   IN xxmm_receipt_batches.receipt_batch_id%TYPE)
        IS
                SELECT *
                  FROM xxmm_receipts
                 WHERE receipt_batch_id = p_batch_id
            FOR UPDATE OF status NOWAIT;
    BEGIN
        log_message (
               'Confirming receipt batch for batch_id: '
            || TO_CHAR (p_receipt_batch_id),
            1);


        xxmm_utilities.populate_who_insert (l_creation_date,
                                            l_created_by,
                                            l_last_update_date,
                                            l_last_updated_by,
                                            l_last_update_login);

        OPEN c_rec_batch (p_receipt_batch_id);

        FETCH c_rec_batch INTO r_rec_batch;

        CLOSE c_rec_batch;


        IF NOT xxmm_receipt_batches_h.update_row (
                   r_rec_batch.receipt_batch_id,
                   r_rec_batch.receipt_batch_type,
                   r_rec_batch.receipt_batch_number,
                   r_rec_batch.receipt_batch_name,
                   r_rec_batch.receipt_batch_date,
                   r_rec_batch.country,
                   r_rec_batch.funding_method,
                   xxmm_constants.gc_rec_batch_status_confirm,
                   r_rec_batch.remittance_due_date,
                   r_rec_batch.receipt_currency,
                   r_rec_batch.impound_currency,
                   r_rec_batch.bank_acc_id_intended_stlmt,
                   r_rec_batch.bank_acc_id_final_stlmt,
                   r_rec_batch.bank_acc_id_concentration,
                   r_rec_batch.adp_exch_rate,
                   r_rec_batch.attribute_category,
                   r_rec_batch.attribute1,
                   r_rec_batch.attribute2,
                   r_rec_batch.attribute3,
                   r_rec_batch.attribute4,
                   r_rec_batch.attribute5,
                   r_rec_batch.attribute6,
                   r_rec_batch.attribute7,
                   r_rec_batch.attribute8,
                   r_rec_batch.attribute9,
                   r_rec_batch.attribute10,
                   r_rec_batch.attribute11,
                   r_rec_batch.attribute12,
                   r_rec_batch.attribute13,
                   r_rec_batch.attribute14,
                   r_rec_batch.attribute15,
                   r_rec_batch.org_id,
                   r_rec_batch.version,
                   --Ranjtiha | 20_aug| concurrent_requets_id is not getting populated for CP receipt batches ansd receipts
                   -- since its nullfied here.
                   --NULL, -- Concurrent_request_id
                   r_rec_batch.concurrent_request_id,
                   --Ranjtiha | 20_aug
                   l_last_update_date,
                   l_last_updated_by,
                   l_last_update_login,
                   l_creation_date,
                   l_created_by,
                   r_rec_batch.adp_exch_rate_type,
                   r_rec_batch.comments,
                   l_code,
                   l_text)
        THEN
            RAISE e_confirm;
        END IF;

        FOR r_rec IN c_rec (p_receipt_batch_id)
        LOOP
            IF r_rec.application_status IN
                   (xxmm_constants.gc_rec_app_status_unidentified,
                    xxmm_constants.gc_rec_app_status_unapply)
            THEN
                l_applied_amount := 0;
            ELSE
                l_applied_amount := r_rec.applied_amount;
            END IF;

            IF NOT xxmm_receipts_h.update_row (
                       r_rec.receipt_batch_id,
                       r_rec.receipt_id,
                       r_rec.control_id,
                       r_rec.receipt_type,
                       r_rec.receipt_number,
                       r_rec.receipt_date,
                       r_rec.receipt_currency,
                       r_rec.receipt_amount,
                       l_applied_amount,
                       r_rec.receipt_due_date,
                       r_rec.input_source,
                       xxmm_constants.gc_receipt_status_confirm,
                       r_rec.application_status,
                       r_rec.bank_acc_id_final_stlmt,
                       r_rec.reversal_date,
                       r_rec.reversed_by,
                       r_rec.reversal_reason,
                       r_rec.comments,
                       r_rec.bank_statement_line_id,
                       r_rec.outbound_file_id,
                       r_rec.spread_tier,
                       r_rec.spread_rate,
                       r_rec.version,
                       r_rec.attribute_category,
                       r_rec.attribute1,
                       r_rec.attribute2,
                       r_rec.attribute3,
                       r_rec.attribute4,
                       r_rec.attribute5,
                       r_rec.attribute6,
                       r_rec.attribute7,
                       r_rec.attribute8,
                       r_rec.attribute9,
                       r_rec.attribute10,
                       r_rec.attribute11,
                       r_rec.attribute12,
                       r_rec.attribute13,
                       r_rec.attribute14,
                       r_rec.attribute15,
                       --Ranjtiha | 20_aug| concurrent_requets_id is not getting populated for CP receipt batches ansd receipts
                       -- since its nullfied here.
                       --NULL, -- Concurrent_request_id
                       r_rec.concurrent_request_id,
                       --Ranjtiha | 20_aug
                       r_rec.org_id,
                       l_last_update_date,
                       l_last_updated_by,
                       l_last_update_login,
                       r_rec.creation_date,
                       r_rec.created_by,
                       r_rec.trace_number,
                       r_rec.fun_receipt_amount,
                       r_rec.control_exch_rate,
                       r_rec.fun_spread_amount,
                       r_rec.maturity_date,
                       r_rec.cancelled_date,
                       r_rec.description,
                       r_rec.ack_flag,
                       r_rec.control_account_name,
                       r_rec.control_bank,
                       r_rec.control_branch,
                       r_rec.control_account,
                       r_rec.control_swift_bic,
                       r_rec.accounted_flag,
                       r_rec.fun_currency,
                       r_rec.write_off_amount,
                       r_rec.accounted_flag_spread,
                       r_rec.recon_status,
                       r_rec.write_off_refund_reason,
                       r_rec.recon_amount,
                       r_rec.receipt_category,
                       r_rec.file_group_number,
                       r_rec.file_group_sequence,
                       r_rec.reversal_rate,
                       r_rec.reversal_gain_loss_amt,
                       r_rec.approval_submitted_by,
                       l_code,
                       l_text)
            THEN
                RAISE e_confirm;
            END IF;
        END LOOP;


        l_cnt := 0;

        SELECT COUNT (*)
          INTO l_cnt
          FROM xxmm_receipts
         WHERE     receipt_batch_id = p_receipt_batch_id
               AND status <> xxmm_constants.gc_receipt_status_created;



        IF NVL (l_cnt, 0) > 0
        THEN
            l_err_code := '0';
            l_err_msg := NULL;
            log_file (
                   'Creating Account for receipt batch for batch_id: '
                || TO_CHAR (p_receipt_batch_id));



            xxmm_accounting_api_pub.create_acct (
                errbuf            => l_err_msg,
                retcode           => l_err_code,
                p_source          => 'RECEIPT_WB',
                p_trx_event       => 'RCT_BATCH_CONFIRM',
                p_trx_type        => 'RCT_BATCH',
                p_trx_id          => p_receipt_batch_id,
                p_trx_event_id    => l_trx_event_id,
                p_trx_sub_event   => 'RCT_BATCH_CONFIRM');


            IF NVL (l_err_code, 0) <> 0                --Functional Issue 2000
            --OR  L_ERR_MSG IS NOT NULL
                                                                            --
            THEN
                RAISE e_acct_api;
            END IF;
        END IF;
    EXCEPTION
        WHEN e_confirm
        THEN
            g_err_msg :=
                   'Error occured in XXMM_ACCOUNTING_API_PUB.CREATE_ACCT, the error text is : '
                || l_err_msg;
            log_file (g_err_msg);
            log_error (g_err_msg, xxmm_constants.msg_type_error);

            raise_application_error (-20023, g_err_msg);
        WHEN e_acct_api
        THEN
            g_err_msg :=
                   'Error occured in XXMM_ACCOUNTING_API_PUB.CREATE_ACCT, the error text is : '
                || l_err_msg;
            log_file (g_err_msg);
            log_error (g_err_msg, xxmm_constants.msg_type_error);

            raise_application_error (-20023, g_err_msg);
        WHEN OTHERS
        THEN
            g_err_msg :=
                   'OTHER EXCEPTION in procedure CONFIRM_BATCH, the error text is : '
                || SQLERRM;
            log_message (g_err_msg);
            log_file (g_err_msg);
            log_error (g_err_msg, xxmm_constants.msg_type_error);

            raise_application_error (-20010, g_err_msg);
    END confirm_batch;



    ----------------------------------------------------------------------------------
    --
    -- proecdure:     create_apply_conf_rec
    --
    -- inputs:        p_inbound_file_id number
    --
    --
    -- this procedure is IMMS Intraday Create Automatic Receipts Batches
    --Create receipt batches and receipts, apply receipts and confirm receipt batches and receipts
    --+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    --  Created by         Date         description
    --  KAREN JIANG      Jun2,2014     PWR A-10-1009
    --  modified by        date         description
    --
    -----------------------------------------------------------------------------------

   PROCEDURE create_apply_conf_rec (errbuf              OUT VARCHAR2,
                                     retcode             OUT VARCHAR2,
                                     p_inbound_file_id       NUMBER)
    IS
        CURSOR c_match_batch
        IS
            SELECT DISTINCT bank_account_id,
                            currency_code,
                            country,
                            match_flag
              FROM xxmm_itd_cp_receipt_stag xicrs
             WHERE inbound_file_id = p_inbound_file_id AND match_flag = 'Y';

        -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 || Added the cursors to get the transactions for NL, FR
        CURSOR c_match_batch_cp_nsf (
            p_funding_method    NUMBER)
        IS
            SELECT DISTINCT bank_account_id,
                            currency_code,
                            country,
                            match_flag
              FROM xxmm_itd_cp_receipt_stag xicrs
             WHERE     inbound_file_id = p_inbound_file_id
                   AND match_flag = 'Y'
                   AND attribute6 = p_funding_method;

        --<< PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 || Added the cursors to get the transactions for NL, FR

        CURSOR c_match (
            p_bank_account_id    NUMBER,
            p_currency_code      VARCHAR2,
            p_country            VARCHAR2)
        IS
            SELECT ROWID, xicrs.*
              FROM xxmm_itd_cp_receipt_stag xicrs
             WHERE     inbound_file_id = p_inbound_file_id
                   AND bank_account_id = p_bank_account_id
                   AND currency_code = p_currency_code
                   AND country = p_country
                   AND match_flag = 'Y';

        -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 || Added the cursors to get the transactions for NL, FR
        CURSOR c_match_cp_nsf (
            p_bank_account_id    NUMBER,
            p_currency_code      VARCHAR2,
            p_country            VARCHAR2,
            p_funding_method     NUMBER)
        IS
            SELECT ROWID, xicrs.*
              FROM xxmm_itd_cp_receipt_stag xicrs
             WHERE     inbound_file_id = p_inbound_file_id
                   AND bank_account_id = p_bank_account_id
                   AND currency_code = p_currency_code
                   AND country = p_country
                   AND match_flag = 'Y'
                   AND attribute6 = p_funding_method;

        --<< PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 || Added the cursors to get the transactions for NL, FR



        CURSOR c_no_match_batch
        IS
            SELECT DISTINCT bank_account_id,
                            currency_code,
                            country,
                            match_flag
              FROM xxmm_itd_cp_receipt_stag xicrs
             WHERE inbound_file_id = p_inbound_file_id AND match_flag = 'N';

        CURSOR c_no_match (
            p_bank_account_id    NUMBER,
            p_currency_code      VARCHAR2,
            p_country            VARCHAR2)
        IS
            SELECT ROWID, xicrs.*
              FROM xxmm_itd_cp_receipt_stag xicrs
             WHERE     inbound_file_id = p_inbound_file_id
                   AND bank_account_id = p_bank_account_id
                   AND currency_code = p_currency_code
                   AND country = p_country
                   AND match_flag = 'N';

        CURSOR c_imp_match_detail (
            p_amount               NUMBER,
            p_account_number       VARCHAR2,
            p_bank_reference_no    VARCHAR2)
        IS
            SELECT imp.impound_trx_id,
                   imp.impound_trx_currency,
                   imp.impound_due_date,
                   ctrl.control_id,
                   ctrl.input_source
              FROM xxmm_cts_impound_trx imp,
                   xxmm_cts_headers cts,
                   xxmm_customer_controls ctrl
             WHERE     p_amount =
                             NVL (imp.impound_trx_amount, 0)
                           - NVL (imp.applied_amount, 0)
                           + NVL (imp.adjustment_amount, 0)
                           - NVL (imp.write_off_amount, 0)
                   AND imp.application_status IN
                           (xxmm_constants.gc_imp_unapplied_status,
                            xxmm_constants.gc_imp_partial_status)
                   AND imp.status = xxmm_constants.gc_validated_status
                   AND p_account_number =
                           imp.impound_branch || imp.impound_account
                   AND cts.cts_header_id = imp.cts_header_id
                   AND cts.control_id = ctrl.control_id
                   --
                   -- End Naeem 18-NOV-2014
                   --
                   --AND (   p_bank_reference_no LIKE
                   --           '%' || ctrl.control_number || '%'
                   AND (   extract_control_number_name (p_bank_reference_no,
                                                        'NUMBER') =
                               ctrl.control_number
                        --
                        -- End Naeem 18-NOV-2014
                        --
                        --
                        -- Start Naeem 18-DEC-2014
                        --
                        --                     OR upper(p_bank_reference_no) LIKE
                        --                           '%' || upper(ctrl.control_name) || '%'
                        --
                        --  End  Naeem 18-DEC-2014
                        --
                        OR extract_control_name (UPPER (p_bank_reference_no)) LIKE
                               '%' || ctrl.control_name || '%'
                        OR UPPER (ctrl.control_name) LIKE
                                  '%'
                               || extract_control_name (
                                      UPPER (p_bank_reference_no))
                               || '%'
                        OR xxmm_create_receipts.strip_control_name (
                               xxmm_utilities.clean_special_chars (
                                   extract_control_name (
                                       UPPER (p_bank_reference_no)))) LIKE
                                  '%'
                               || xxmm_create_receipts.strip_control_name (
                                      xxmm_utilities.clean_special_chars (
                                          UPPER (ctrl.control_name)))
                               || '%'
                        OR xxmm_create_receipts.strip_control_name (
                               xxmm_utilities.clean_special_chars (
                                   UPPER (ctrl.control_name))) LIKE
                                  '%'
                               || xxmm_create_receipts.strip_control_name (
                                      xxmm_utilities.clean_special_chars (
                                          extract_control_name (
                                              UPPER (p_bank_reference_no))))
                               || '%')
            FOR UPDATE
                SKIP LOCKED;

        -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 || Added the cursors to get the transactions for NL, FR
        CURSOR c_imp_match_detail_cp_nsf_org (
            p_amount                NUMBER,
            p_bank_account_id       VARCHAR2,
            p_org_account_number    VARCHAR2,
            p_funding_method        NUMBER)
        IS
            SELECT imp.impound_trx_id,
                   imp.impound_trx_currency,
                   /*  -->> FP 64978 || Arun Bacha || June 2016 || Removing the impound due date as value date is passed as receipt maturity date
                   imp.impound_due_date,
                   --<< FP  64978|| Arun Bacha || June 2016 || Removing the impound due date as value date is passed as receipt maturity date */
                   ctrl.control_id,
                   ctrl.input_source,
                   cts.cts_header_id
              FROM xxmm_cts_impound_trx imp,
                   xxmm_cts_headers cts,
                   xxmm_customer_controls ctrl
             WHERE     p_amount =
                             NVL (imp.impound_trx_amount, 0)
                           - NVL (imp.applied_amount, 0)
                           + NVL (imp.adjustment_amount, 0)
                           - NVL (imp.write_off_amount, 0)
                   AND imp.application_status IN
                           (xxmm_constants.gc_imp_unapplied_status,
                            xxmm_constants.gc_imp_partial_status)
                   AND imp.status IN
                           (xxmm_constants.gc_validated_status,
                            xxmm_constants.gc_imp_trx_status_need_val)
                   AND imp.funding_method = p_funding_method
                   AND imp.impound_bank_account_id = p_bank_account_id
                   AND cts.cts_header_id = imp.cts_header_id
                   AND cts.control_id = ctrl.control_id
                   -->>FP64945  || Arun Bacha || MAY 2016 || Added a new parameter to the function to check whether the ORG account exists for the control and tp to match the control number when muliple control numbers are found
        --->>> Start FP-66895 07-OCT-2019 Muhammad -- to filter Impounds for that particulart Originator Account.
--                   AND xxmm_create_receipts.get_org_unique_control_id (
--                           p_org_account_number,
--                           ctrl.control_id) = ctrl.control_id
                   AND cts.control_id in (SELECT xbau.entity_id
                                          --INTO l_control_id
                                            FROM xxmm_bank_accounts xba, xxmm_bank_account_uses xbau
                                           WHERE     (   xba.account_number = p_org_account_number --<<START  George Felian 28-JUN-2016 PWR EU-15-600 US477483 Start
                                                    OR DECODE (
                                                           g_check_sort_code,
                                                           'Y', REPLACE (
                                                                    SUBSTR (xba.account_name,
                                                                            INSTR (xba.account_name, ' ', 1)),
                                                                    ' ',
                                                                    ''),
                                                           '@@@@') = p_org_account_number) -->><END  George Felian 28-JUN-2016 PWR EU-15-600 US477483
                                             AND xbau.entity_id = NVL (ctrl.control_id, xbau.entity_id)
                                             AND xbau.account_usage_type = xxmm_constants.gc_org_acc_usage_type
                                             AND xbau.entity_type = xxmm_constants.gc_entity_type
                                             AND xba.bank_account_id = xbau.bank_account_id)
        --->>> End FP-66895 07-OCT-2019 Muhammad -- to filter Impounds for that particulart Originator Account.
            --   p_org_account_number) = ctrl.control_id
            -->>FP64945  || Arun Bacha || MAY 2016 || commented  the below  to chech the match with the ORG Account
            /*
            UPPER (
                                       TRIM (get_control_number_nl_fr (p_control_number,ctrl.control_number))) =

                                       UPPER (TRIM (ctrl.control_number))

                                 OR NVL (UPPER (p_bank_reference_no), 'NO_MATCH') LIKE
                                       '%' || UPPER (ctrl.control_name) || '%'
                                 OR UPPER (ctrl.control_name) LIKE
                                          '%'
                                       || NVL (UPPER (p_bank_reference_no), 'NO_MATCH')
                                       || '%'
                                 OR NVL (
                                       xxmm_create_receipts.strip_control_name (
                                          clean_special_chars (
                                             UPPER (p_bank_reference_no))),
                                       'NO_MATCH') LIKE
                                          '%'
                                       || xxmm_create_receipts.strip_control_name (
                                             clean_special_chars (
                                                UPPER (ctrl.control_name)))
                                       || '%'
                                 OR xxmm_create_receipts.strip_control_name (
                                       clean_special_chars (UPPER (ctrl.control_name))) LIKE
                                          '%'
                                       || NVL (
                                             xxmm_create_receipts.strip_control_name (
                                                clean_special_chars (
                                                   UPPER (p_bank_reference_no))),
                                             'NO_MATCH')
                                       || '%')
                   --<<FP64945  || Arun Bacha || MAY 2016 || commented  the below  to chech the match with the ORG Account                               */
            FOR UPDATE
                SKIP LOCKED;

        -->>FP64945  || Arun Bacha || MAY 2016 || Added  the below  to chech the match with the control name and number
        CURSOR c_imp_match_detail_cp_nsf (
            p_amount                NUMBER,
            p_bank_account_id       VARCHAR2,
            p_org_account_number    VARCHAR2,
            p_bank_reference_no     VARCHAR2,
            p_control_number        VARCHAR2,
            p_funding_method        NUMBER)
        IS
            SELECT imp.impound_trx_id,
                   imp.impound_trx_currency,
                   /*  -->> FP 64978  || Arun Bacha || June 2016 || Removing the impound due date as value date is passed as receipt maturity date
                    imp.impound_due_date,
                 --<< FP  64978|| Arun Bacha || June 2016 || Removing the impound due date as value date is passed as receipt maturity date */
                   ctrl.control_id,
                   ctrl.input_source,
                   cts.cts_header_id
              FROM xxmm_cts_impound_trx imp,
                   xxmm_cts_headers cts,
                   xxmm_customer_controls ctrl
             WHERE     p_amount =
                             NVL (imp.impound_trx_amount, 0)
                           - NVL (imp.applied_amount, 0)
                           + NVL (imp.adjustment_amount, 0)
                           - NVL (imp.write_off_amount, 0)
                   AND imp.application_status IN
                           (xxmm_constants.gc_imp_unapplied_status,
                            xxmm_constants.gc_imp_partial_status)
                   AND imp.status IN
                           (xxmm_constants.gc_validated_status,
                            xxmm_constants.gc_imp_trx_status_need_val)
                   AND imp.funding_method = p_funding_method
                   AND imp.impound_bank_account_id = p_bank_account_id
                   AND cts.cts_header_id = imp.cts_header_id
                   AND cts.control_id = ctrl.control_id
                   -->> FP64945    || Arun Bacha || MAY 2016 || Added a new parameter to the function to check whether the ORG account exists for the control and tp to match the control number when muliple control numbers are found
                   AND (   UPPER (
                               TRIM (
                                   get_control_number_nl_fr (
                                       p_control_number,
                                       ctrl.control_number))) =
                               -->> FP64945   || Arun Bacha || MAY 2016 || Added a new parameter to the function to check whether the ORG account exists for the control and tp to match the control number when muliple control numbers are found
                               UPPER (TRIM (ctrl.control_number))
                        OR NVL (UPPER (p_bank_reference_no), 'NO_MATCH') LIKE
                               '%' || UPPER (ctrl.control_name) || '%'
                        OR UPPER (ctrl.control_name) LIKE
                                  '%'
                               || NVL (UPPER (p_bank_reference_no),
                                       'NO_MATCH')
                               || '%'
                        OR NVL (
                               xxmm_create_receipts.strip_control_name (
                                   clean_special_chars (
                                       UPPER (p_bank_reference_no))),
                               'NO_MATCH') LIKE
                                  '%'
                               || xxmm_create_receipts.strip_control_name (
                                      clean_special_chars (
                                          UPPER (ctrl.control_name)))
                               || '%'
                        OR xxmm_create_receipts.strip_control_name (
                               clean_special_chars (
                                   UPPER (ctrl.control_name))) LIKE
                                  '%'
                               || NVL (
                                      xxmm_create_receipts.strip_control_name (
                                          clean_special_chars (
                                              UPPER (p_bank_reference_no))),
                                      'NO_MATCH')
                               || '%')
            FOR UPDATE
                SKIP LOCKED;


        --->>> Start FP-66895 07-OCT-2019 Muhammad -- to filter Impounds for that particulart Originator Account.
        CURSOR c_imp_match_detail_cp_nsf_orig (
            p_amount                NUMBER,
            p_bank_account_id       VARCHAR2,
            p_org_account_number    VARCHAR2,
            p_bank_reference_no     VARCHAR2,
            p_control_number        VARCHAR2,
            p_funding_method        NUMBER)
        IS
            SELECT imp.impound_trx_id,
                   imp.impound_trx_currency,
                   /*  -->> FP 64978  || Arun Bacha || June 2016 || Removing the impound due date as value date is passed as receipt maturity date
                    imp.impound_due_date,
                 --<< FP  64978|| Arun Bacha || June 2016 || Removing the impound due date as value date is passed as receipt maturity date */
                   ctrl.control_id,
                   ctrl.input_source,
                   cts.cts_header_id
              FROM xxmm_cts_impound_trx imp,
                   xxmm_cts_headers cts,
                   xxmm_customer_controls ctrl
             WHERE     p_amount =
                             NVL (imp.impound_trx_amount, 0)
                           - NVL (imp.applied_amount, 0)
                           + NVL (imp.adjustment_amount, 0)
                           - NVL (imp.write_off_amount, 0)
                   AND imp.application_status IN
                           (xxmm_constants.gc_imp_unapplied_status,
                            xxmm_constants.gc_imp_partial_status)
                   AND imp.status IN
                           (xxmm_constants.gc_validated_status,
                            xxmm_constants.gc_imp_trx_status_need_val)
                   AND imp.funding_method = p_funding_method
                   AND imp.impound_bank_account_id = p_bank_account_id
                   AND cts.cts_header_id = imp.cts_header_id
                   AND cts.control_id = ctrl.control_id
                   -->> FP64945    || Arun Bacha || MAY 2016 || Added a new parameter to the function to check whether the ORG account exists for the control and tp to match the control number when muliple control numbers are found
                   AND (   UPPER (
                               TRIM (
                                   get_control_number_nl_fr (
                                       p_control_number,
                                       ctrl.control_number))) =
                               -->> FP64945   || Arun Bacha || MAY 2016 || Added a new parameter to the function to check whether the ORG account exists for the control and tp to match the control number when muliple control numbers are found
                               UPPER (TRIM (ctrl.control_number))
                        OR NVL (UPPER (p_bank_reference_no), 'NO_MATCH') LIKE
                               '%' || UPPER (ctrl.control_name) || '%'
                        OR UPPER (ctrl.control_name) LIKE
                                  '%'
                               || NVL (UPPER (p_bank_reference_no),
                                       'NO_MATCH')
                               || '%'
                        OR NVL (
                               xxmm_create_receipts.strip_control_name (
                                   clean_special_chars (
                                       UPPER (p_bank_reference_no))),
                               'NO_MATCH') LIKE
                                  '%'
                               || xxmm_create_receipts.strip_control_name (
                                      clean_special_chars (
                                          UPPER (ctrl.control_name)))
                               || '%'
                        OR xxmm_create_receipts.strip_control_name (
                               clean_special_chars (
                                   UPPER (ctrl.control_name))) LIKE
                                  '%'
                               || NVL (
                                      xxmm_create_receipts.strip_control_name (
                                          clean_special_chars (
                                              UPPER (p_bank_reference_no))),
                                      'NO_MATCH')
                               || '%')
                          and exists (select 1
                                        from xxmm_bank_accounts xba,
                                             xxmm_bank_account_uses xbu
                                       where xba.bank_account_id = xbu.bank_account_id
                                         and xba.account_number = p_org_account_number)
                          --and rownum = 1
            FOR UPDATE
                SKIP LOCKED;
        --->>> End FP-66895 07-OCT-2019 Muhammad -- to filter Impounds for that particulart Originator Account.

        --<<FP64945  || Arun Bacha || MAY 2016 || Added  the below  to chech the match with the control name and number
        --<< PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 || Added the cursors to get the transactions for NL, FR
        l_match_count            NUMBER;
        l_no_match_count         NUMBER;
        l_bank_account           VARCHAR2 (200);
        l_impound_trx_id         xxmm_cts_impound_trx.impound_trx_id%TYPE;
        l_impound_trx_currency   xxmm_cts_impound_trx.impound_trx_currency%TYPE;
        l_impound_due_date       xxmm_cts_impound_trx.impound_due_date%TYPE;
        l_control_id             xxmm_customer_controls.control_id%TYPE;
        -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 || added a variable to fetch control name while creating unmatched receipts
        l_control_name           xxmm_customer_controls.control_name%TYPE;
        --<< PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 || added a variable to fetch control name while creating unmatched receipts
        l_input_source           xxmm_customer_controls.input_source%TYPE;
        l_cts_header_id          xxmm_cts_headers.cts_header_id%TYPE;
        e_no_match_detail        EXCEPTION;

        l_ctrl_number            VARCHAR2 (30) := NULL;
        l_country                xxmm_lookups_v.lookup_code%TYPE := NULL;
        lc_attribute3   CONSTANT xxmm_lookups_v.attribute3%TYPE
                                     := 'ATTRIBUTE3' ;
    BEGIN
        g_intraday_flag := 'Y';
        --  g_clt_sysdate := SYSDATE;
        g_srv_sysdate := SYSDATE;
        g_spread_tier := NULL;
        g_spread_rate := NULL;

        -->>Project G'Day | Ranjitha | 4-APR-2016 | Setting the Client timezone based on country lookup
        -- Set client time zone
        log_message ('Setting the Client Time Zone ', 3);
        --log_file ('MIQ Setting the Client Time Zone ');


        l_country :=
            xxmm_lookup_utilities.get_lookup_default_values (
                'NULL',
                xxmm_constants.gc_input_source_lt).attribute5;
        log_message ('Country is: ' || l_country,3);
        --log_file ('MIQ Country is: ' || l_country);
        xxmm_timezones.set_client_timezone (
            NVL (xxmm_lookup_utilities.get_code_attribute (
                     p_source_value         => NULL,
                     p_type                 => xxmm_constants.gc_country_lt,
                     p_code                 => l_country,
                     p_attribute_category   => xxmm_constants.gc_country_lt,
                     p_attribute            => lc_attribute3),
                 439));


        --<< Project G'Day | Ranjitha | 4-APR-2016 | Setting the Client timezone based on country lookup

        --create receipt batch with match impounds

        -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||Added the condition to change the direction of flow based on the Country
        IF NOT xxmm_lookup_utilities.lookup_code_exist (
                   NULL,
                   xxmm_constants.gc_err_code_lt,
                   g_itd_rct)
        THEN
            --<<  PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||Added the condition to change the direction of flow based on the Country
            update_itd_stag_match_flag (p_inbound_file_id);
            xxmm_utilities.populate_who_insert (g_creation_date,
                                                g_created_by,
                                                g_last_update_date,
                                                g_last_updated_by,
                                                g_last_update_login);

            log_file('ITD NOT xxmm_lookup_utilities.lookup_code_exist');
            log_message (
                   ' Starting create_apply_conf_rec for inbound_file_id: '
                || TO_CHAR (p_inbound_file_id),
                3);


            log_message ('Starting to create matched receipt batches ',3);

            FOR r_match_batch IN c_match_batch
            LOOP
                g_funding_method := xxmm_constants.gc_credit_push_fund_meth;
                get_fm_attributes (g_funding_method);

                log_file ('r_match_batch .....c_match_batch');
                SELECT COUNT (1)
                  INTO l_match_count
                  FROM xxmm_itd_cp_receipt_stag
                 WHERE     inbound_file_id = p_inbound_file_id
                       AND bank_account_id = r_match_batch.bank_account_id
                       AND currency_code = r_match_batch.currency_code
                       AND country = r_match_batch.country
                       AND r_match_batch.match_flag = 'Y';

                insert_receipt_batch (
                    g_funding_method,
                    -->>Project G'Day | Ranjitha | 6-APR-2016 | Remit Presentation date should be baseed on OU timezone and only Date
                    --   SYSDATE,
                    TRUNC (g_clt_sysdate),
                    --<<Project G'Day | Ranjitha | 6-APR-2016 | Remit Presentation date should be baseed on OU timezone and only Date
                    -->>Ctiibank - Batch Header Currency for ADP's Credit Push  NSF Account - Receipt Batch Workbench, jwu
                    --r_match_batch.currency_code,
                    NVL (
                        xxmm_bank_utilities.get_account_currency (
                            r_match_batch.bank_account_id),
                        r_match_batch.currency_code),
                    --<<Ctiibank - Batch Header Currency for ADP's Credit Push  NSF Account - Receipt Batch Workbench
                    r_match_batch.currency_code,
                    1,
                    r_match_batch.bank_account_id,
                    r_match_batch.bank_account_id,
                    r_match_batch.country,
                    'Y',
                    l_match_count);

                log_message (
                       ' Starting to get bank account detail for bank account id:  '
                    || TO_CHAR (r_match_batch.bank_account_id),
                    3);

                SELECT TRIM (xbb.bank_number),
                       TRIM (xbb.bank_branch_number),
                       TRIM (xba.account_number),
                          TRIM (xbb.bank_number)
                       || ' '
                       || TRIM (xbb.bank_branch_number)
                       || ' '
                       || TRIM (xba.account_number)
                  INTO g_bank_number,
                       g_branch_number,
                       g_account_number,
                       l_bank_account
                  FROM xxmm_bank_accounts xba, xxmm_bank_branches xbb
                 WHERE     xba.bank_account_id =
                               r_match_batch.bank_account_id
                       AND xbb.bank_branch_id = xba.bank_branch_id;


                g_country := r_match_batch.country;

                log_message ('Starting to create matched receipts ',3);

                FOR r_match
                    IN c_match (r_match_batch.bank_account_id,
                                r_match_batch.currency_code,
                                r_match_batch.country)
                LOOP
                    log_file('r_match........c_match');

                    l_impound_trx_id := NULL;
                    l_impound_trx_currency := NULL;
                    l_impound_due_date := NULL;
                    l_control_id := NULL;
                    l_input_source := NULL;

                    BEGIN
                        OPEN c_imp_match_detail (r_match.amount,
                                                 r_match.account_number,
                                                 r_match.bank_reference_no);

                        FETCH c_imp_match_detail
                            INTO l_impound_trx_id,
                                 l_impound_trx_currency,
                                 l_impound_due_date,
                                 l_control_id,
                                 l_input_source;

                        IF    c_imp_match_detail%NOTFOUND
                           OR c_imp_match_detail%ROWCOUNT > 1
                        THEN
                            CLOSE c_imp_match_detail;

                            RAISE e_no_match_detail;
                        END IF;

                        CLOSE c_imp_match_detail;



                    log_file('Matched impound found id is  '|| l_impound_trx_id);

                        log_message (
                               'Matched impound found id is  '
                            || l_impound_trx_id,
                            3);

                        ---create receipts and impound application
                        insert_receipts (l_impound_trx_id,
                                         l_control_id,
                                         r_match.as_of_date,
                                         l_impound_due_date,
                                         r_match.currency_code,
                                         l_impound_trx_currency,
                                         r_match.amount,
                                         g_funding_method,
                                         r_match.country,
                                         l_input_source,
                                         g_spread_tier,
                                         g_spread_rate,
                                         TRUE,
                                         r_match.bank_account_id);



                        update_impound_trx (l_impound_trx_id,
                                            NVL (r_match.amount, 0));

                        UPDATE xxmm_itd_cp_receipt_stag
                           SET receipt_batch_id = g_batch_id
                         WHERE ROWID = r_match.ROWID;

                        log_message ('Matched impound receipt created......',
                                     3);

                        log_message (
                               'match org '
                            || r_match.originator_account
                            || ' '
                            || l_control_id
                            || ' '
                            || r_match.attribute5,
                            1);
                        log_file (
                               'match originator Account : '
                            || r_match.originator_account
                            || ' Control ID : '
                            || l_control_id
                            || ' '
                            || r_match.attribute5,
                            1);
                    EXCEPTION
                        WHEN e_no_match_detail
                        THEN
                            UPDATE xxmm_itd_cp_receipt_stag
                               SET match_flag = 'N'
                             WHERE ROWID = r_match.ROWID;

                            log_message (
                                   'Update flag to N for record with no matching impound information: '
                                || TO_CHAR (SQL%ROWCOUNT));
                    END;
                END LOOP;

                confirm_batch (g_batch_id);
            END LOOP;
        -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||Added the condition to change the direction of flow based on the Country
        ELSIF xxmm_lookup_utilities.lookup_code_exist (
                  NULL,
                  xxmm_constants.gc_err_code_lt,
                  g_itd_rct)
        THEN
            log_file (
                   '********** ELSIF create_apply_conf_rec for inbound_file_id: '
                || TO_CHAR (p_inbound_file_id)
                );

            g_funding_method := xxmm_constants.gc_credit_push_fund_meth;
            update_itd_stag_match_flag (p_inbound_file_id);
            xxmm_utilities.populate_who_insert (g_creation_date,
                                                g_created_by,
                                                g_last_update_date,
                                                g_last_updated_by,
                                                g_last_update_login);

            -->>Project G'day |  Ranjitha | 4-APR-2016 | Log message displays sysdate, converting into client timezone
            /*  log_file (
                    TO_CHAR (SYSDATE, 'DD-MON-RRRR HH24:MI:SS')
                 || '--XXMM=>Starting create_apply_conf_rec for inbound_file_id: '
                 || TO_CHAR (p_inbound_file_id));
                 */
            log_message (
                   'Starting create_apply_conf_rec for inbound_file_id: '
                || TO_CHAR (p_inbound_file_id),
                3);

            log_message (
                'Starting to create matched receipt batches for Credit Push',
                3);

            FOR r_match_batch_cp IN c_match_batch_cp_nsf (g_funding_method)
            LOOP
                get_fm_attributes (g_funding_method);

                log_file('r_match_batch_cp ......c_match_batch_cp_nsf');
                SELECT COUNT (1)
                  INTO l_match_count
                  FROM xxmm_itd_cp_receipt_stag
                 WHERE     inbound_file_id = p_inbound_file_id
                       AND bank_account_id = r_match_batch_cp.bank_account_id
                       AND currency_code = r_match_batch_cp.currency_code
                       AND country = r_match_batch_cp.country
                       AND r_match_batch_cp.match_flag = 'Y'
                       AND attribute6 =
                               xxmm_constants.gc_credit_push_fund_meth;

                insert_receipt_batch (
                    g_funding_method,
                    -->>Project G'Day | Ranjitha | 6-APR-2016 | Remit Presentation date should be baseed on OU timezone and only Date
                    --   SYSDATE,
                    TRUNC (g_clt_sysdate),
                    --<<Project G'Day | Ranjitha | 6-APR-2016 | Remit Presentation date should be baseed on OU timezone and only Date


                    -->>Ctiibank - Batch Header Currency for ADP's Credit Push  NSF Account - Receipt Batch Workbench, jwu
                    --r_match_batch_cp.currency_code,
                    NVL (
                        xxmm_bank_utilities.get_account_currency (
                            r_match_batch_cp.bank_account_id),
                        r_match_batch_cp.currency_code),
                    --<<Ctiibank - Batch Header Currency for ADP's Credit Push  NSF Account - Receipt Batch Workbench

                    r_match_batch_cp.currency_code,
                    1,
                    r_match_batch_cp.bank_account_id,
                    r_match_batch_cp.bank_account_id,
                    r_match_batch_cp.country,
                    'Y',
                    l_match_count);

                log_message (
                       'Starting to get bank account detail for bank account id:  '
                    || TO_CHAR (r_match_batch_cp.bank_account_id),
                    3);

                SELECT TRIM (xbb.bank_number),
                       TRIM (xbb.bank_branch_number),
                       TRIM (xba.account_number),
                          TRIM (xbb.bank_number)
                       || ' '
                       || TRIM (xbb.bank_branch_number)
                       || ' '
                       || TRIM (xba.account_number)
                  INTO g_bank_number,
                       g_branch_number,
                       g_account_number,
                       l_bank_account
                  FROM xxmm_bank_accounts xba, xxmm_bank_branches xbb
                 WHERE     xba.bank_account_id =
                               r_match_batch_cp.bank_account_id
                       AND xbb.bank_branch_id = xba.bank_branch_id;


                g_country := r_match_batch_cp.country;

                log_message ('Starting to create matched receipts ', 1);
                log_file ('Starting to create matched receipts ');

                FOR r_match_cp
                    IN c_match_cp_nsf (r_match_batch_cp.bank_account_id,
                                       r_match_batch_cp.currency_code,
                                       r_match_batch_cp.country,
                                       g_funding_method)
                LOOP
                log_file('r_match_cp ......c_match_cp_nsf');

                    l_impound_trx_id := NULL;
                    l_impound_trx_currency := NULL;
                    l_impound_due_date := NULL;
                    l_control_id := NULL;
                    l_input_source := NULL;
                    l_cts_header_id := NULL;

                    BEGIN
                        OPEN c_imp_match_detail_cp_nsf_org (r_match_cp.amount,
                                                            r_match_cp.bank_account_id,
                                                            r_match_cp.originator_account,
                                                            g_funding_method);

                        FETCH c_imp_match_detail_cp_nsf_org
                            INTO l_impound_trx_id,
                                 l_impound_trx_currency,
                                 /*  -->> FP 64978  || Arun Bacha || June 2016 || Removing the impound due date as value date is passed as receipt maturity date
                                     l_impound_due_date,
                                  --<< FP  64978|| Arun Bacha || June 2016 || Removing the impound due date as value date is passed as receipt maturity date */
                                 l_control_id,
                                 l_input_source,
                                 l_cts_header_id;

                        IF    c_imp_match_detail_cp_nsf_org%NOTFOUND
                        --->>> Start FP-66895 07-OCT-2019 Muhammad -- to filter Impounds for that particulart Originator Account.
                        --OR    c_imp_match_detail_cp_nsf_org%ROWCOUNT > 1
                        --->>> End FP-66895 07-OCT-2019 Muhammad -- to filter Impounds for that particulart Originator Account.
                        THEN
                            -->>FP64945    || Arun Bacha || MAY 2016 || Added  the below  to chech the match with the control name and number when couldnt with ORG account
                            log_file('No Data Found');

                            CLOSE c_imp_match_detail_cp_nsf_org;

                            /* RAISE e_no_match_detail; */
                            OPEN c_imp_match_detail_cp_nsf (r_match_cp.amount,
                                                            r_match_cp.bank_account_id,
                                                            r_match_cp.originator_account,
                                                            r_match_cp.bank_reference_no,
                                                            r_match_cp.attribute4,
                                                            g_funding_method);

                            FETCH c_imp_match_detail_cp_nsf
                                INTO l_impound_trx_id,
                                     l_impound_trx_currency,
                                     /*  -->> FP 64978 || Arun Bacha || June 2016 || Removing the impound due date as value date is passed as receipt maturity date
                                  l_impound_due_date,
                                    --<< FP  64978 || Arun Bacha || June 2016 || Removing the impound due date as value date is passed as receipt maturity date */
                                     l_control_id,
                                     l_input_source,
                                     l_cts_header_id;

                            IF    c_imp_match_detail_cp_nsf%NOTFOUND
                               OR c_imp_match_detail_cp_nsf%ROWCOUNT > 1
                            THEN
                                CLOSE c_imp_match_detail_cp_nsf;

                                RAISE e_no_match_detail;
                            END IF;

                            CLOSE c_imp_match_detail_cp_nsf;

                        --->>> Start FP-66895 07-OCT-2019 Muhammad -- to filter Impounds for that particulart Originator Account.
                        ELSIF  c_imp_match_detail_cp_nsf_org%ROWCOUNT > 1
                        THEN
                            log_file('Too Many Rows');

                            -->>FP64945    || Arun Bacha || MAY 2016 || Added  the below  to chech the match with the control name and number when couldnt with ORG account
                            CLOSE c_imp_match_detail_cp_nsf_org;

                            /* RAISE e_no_match_detail; */
                            OPEN c_imp_match_detail_cp_nsf_orig (r_match_cp.amount,
                                                            r_match_cp.bank_account_id,
                                                            r_match_cp.originator_account,
                                                            r_match_cp.bank_reference_no,
                                                            r_match_cp.attribute4,
                                                            g_funding_method);

                            FETCH c_imp_match_detail_cp_nsf_orig
                                INTO l_impound_trx_id,
                                     l_impound_trx_currency,
                                     /*  -->> FP 64978 || Arun Bacha || June 2016 || Removing the impound due date as value date is passed as receipt maturity date
                                  l_impound_due_date,
                                    --<< FP  64978 || Arun Bacha || June 2016 || Removing the impound due date as value date is passed as receipt maturity date */
                                     l_control_id,
                                     l_input_source,
                                     l_cts_header_id;
                             XXMM_UTILITIES.PUT_LINE_LOG('Procedure CREATE_APPLY_CONF_REC '
                                                        ||'l_impound_trx_id:'||l_impound_trx_id||','
                                                        ||'l_impound_trx_currency:'||l_impound_trx_currency||','
                                                        ||'l_control_id:'||l_control_id||','
                                                        ||'l_input_source:'||l_input_source||','
                                                        ||'l_cts_header_id:'||l_cts_header_id);

                            IF    c_imp_match_detail_cp_nsf_orig%NOTFOUND
                               OR c_imp_match_detail_cp_nsf_orig%ROWCOUNT > 1
                            THEN
                                CLOSE c_imp_match_detail_cp_nsf_orig;

                                RAISE e_no_match_detail;
                            END IF;

                            CLOSE c_imp_match_detail_cp_nsf_orig;
                        --->>> End FP-66895 07-OCT-2019 Muhammad -- to filter Impounds for that particulart Originator Account.
                        ELSE
                            CLOSE c_imp_match_detail_cp_nsf_org;
                        END IF;

                        --<<FP64945 || Arun Bacha || MAY 2016 || Added  the below  to chech the match with the control name and number when couldnt with ORG account



                        log_file (
                               'Matched impound found id is  '
                            || l_impound_trx_id);

                        -->> US US812543 || 09-SEP-2017 || Arun Bacha || added the code to store the ORG account details in the receipts table

                        g_control_bank := r_match_cp.swift_bic;
                        g_control_branch := r_match_cp.swift_bic;
                        g_control_account := r_match_cp.originator_account;
                        g_control_swift_bic := r_match_cp.swift_bic;

                        -->> US US812543 || 09-SEP-2017 || Arun Bacha || added the code to store the ORG account details in the receipts table

                        ---create receipts and impound application
                        insert_receipts (l_impound_trx_id,
                                         l_control_id,
                                         r_match_cp.as_of_date,
                                         /*  -->> FP 64978 || Arun Bacha || June 2016 || Removing the impound due date as value date is passed as receipt maturity date
                                                              l_impound_due_date, */
                                         r_match_cp.as_of_date,
                                         --<< FP 64978  || Arun Bacha || June 2016 || Removing the impound due date as value date is passed as receipt maturity date
                                         r_match_cp.currency_code,
                                         l_impound_trx_currency,
                                         r_match_cp.amount,
                                         g_funding_method,
                                         r_match_cp.country,
                                         l_input_source,
                                         g_spread_tier,
                                         g_spread_rate,
                                         TRUE,
                                         r_match_cp.bank_account_id);



                        update_impound_trx (l_impound_trx_id,
                                            NVL (r_match_cp.amount, 0));

                        UPDATE xxmm_itd_cp_receipt_stag
                           SET receipt_batch_id = g_batch_id
                         WHERE ROWID = r_match_cp.ROWID;

                        log_message ('Matched impound receipt created......',
                                     3);

                        log_message (
                               'match org '
                            || r_match_cp.originator_account
                            || ' '
                            || l_control_id
                            || ' '
                            || r_match_cp.attribute5,
                            1);
                        log_file (
                               'match originator Account : '
                            || r_match_cp.originator_account
                            || ' Control ID : '
                            || l_control_id
                            || ' '
                            || r_match_cp.attribute5,
                            1);
                        -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||  Calling the Function to check whether the ORG account matches with one in IMMS and if not, insert the details into GTT table which is used while reporting exclusions
                        match_org_control (r_match_cp.originator_account,
                                           l_control_id);

                        --<< PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||  Calling the Function to check whether the ORG account matches with one in IMMS and if not, insert the details into GTT table which is used while reporting exclusions
                        -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||  Calling the Function to check for Risk Review hold and if any, the remove the Hold if it is placed by production
                        IF xxmm_lookup_utilities.lookup_code_exist (
                               NULL,
                               g_org_acc_exclsn_rpt_lookup,
                               g_org_risk_tier_hol_rel)
                        THEN
                            -->> Project G'day | Ranjitha | 26-APR-2016| Need to release hold at Impound level only for AUS. And hence passing Impound TRX ID as parameter
                            --rel_risk_hold (l_cts_header_id);
                            rel_risk_hold (l_cts_header_id, l_impound_trx_id);
                        --<< Project G'day | Ranjitha | 26-APR-2016| Need to release hold at Impound level only for AUS. And hence passing Impound TRX ID as parameter
                        END IF;
                    --<< PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||  Calling the Function to check for Risk Review hold and if any, the remove the Hold if it is placed by production
                    EXCEPTION
                        WHEN e_no_match_detail
                        THEN
                            UPDATE xxmm_itd_cp_receipt_stag
                               SET match_flag = 'N', attribute6 = NULL
                             WHERE ROWID = r_match_cp.ROWID;

                            log_message (
                                   'Update flag to N for record with no matching impound information: '
                                || TO_CHAR (SQL%ROWCOUNT),
                                1);
                    END;
                END LOOP;

                confirm_batch (g_batch_id);
            END LOOP;



            log_message (
                'Starting to create matched receipt batches for NSF',
                1);

            g_funding_method := xxmm_constants.gc_nsfr_fund_meth;
            update_itd_stag_match_flag (p_inbound_file_id);


            FOR r_match_batch_nsf IN c_match_batch_cp_nsf (g_funding_method)
            LOOP
                get_fm_attributes (g_funding_method);

                log_file('r_match_batch_nsf ......c_match_batch_cp_nsf');


                SELECT COUNT (1)
                  INTO l_match_count
                  FROM xxmm_itd_cp_receipt_stag
                 WHERE     inbound_file_id = p_inbound_file_id
                       AND bank_account_id =
                               r_match_batch_nsf.bank_account_id
                       AND currency_code = r_match_batch_nsf.currency_code
                       AND country = r_match_batch_nsf.country
                       AND r_match_batch_nsf.match_flag = 'Y'
                       AND attribute6 = xxmm_constants.gc_nsfr_fund_meth;

                insert_receipt_batch (
                    g_funding_method,
                    -->>Project G'Day | Ranjitha | 6-APR-2016 | Remit Presentation date should be baseed on OU timezone and only Date
                    --   SYSDATE,
                    TRUNC (g_clt_sysdate),
                    --<<Project G'Day | Ranjitha | 6-APR-2016 | Remit Presentation date should be baseed on OU timezone and only Date


                    -->>Ctiibank - Batch Header Currency for ADP's Credit Push  NSF Account - Receipt Batch Workbench, jwu
                    --r_match_batch_nsf.currency_code,
                    NVL (
                        xxmm_bank_utilities.get_account_currency (
                            r_match_batch_nsf.bank_account_id),
                        r_match_batch_nsf.currency_code),
                    --<<Ctiibank - Batch Header Currency for ADP's Credit Push  NSF Account - Receipt Batch Workbench

                    r_match_batch_nsf.currency_code,
                    1,
                    r_match_batch_nsf.bank_account_id,
                    r_match_batch_nsf.bank_account_id,
                    r_match_batch_nsf.country,
                    'Y',
                    l_match_count);

                log_message (
                       'Starting to get bank account detail for bank account id:  '
                    || TO_CHAR (r_match_batch_nsf.bank_account_id),
                    1);

                SELECT TRIM (xbb.bank_number),
                       TRIM (xbb.bank_branch_number),
                       TRIM (xba.account_number),
                          TRIM (xbb.bank_number)
                       || ' '
                       || TRIM (xbb.bank_branch_number)
                       || ' '
                       || TRIM (xba.account_number)
                  INTO g_bank_number,
                       g_branch_number,
                       g_account_number,
                       l_bank_account
                  FROM xxmm_bank_accounts xba, xxmm_bank_branches xbb
                 WHERE     xba.bank_account_id =
                               r_match_batch_nsf.bank_account_id
                       AND xbb.bank_branch_id = xba.bank_branch_id;


                g_country := r_match_batch_nsf.country;

                log_message ('Starting to create matched receipts ', 1);

                FOR r_match_nsf
                    IN c_match_cp_nsf (r_match_batch_nsf.bank_account_id,
                                       r_match_batch_nsf.currency_code,
                                       r_match_batch_nsf.country,
                                       g_funding_method)
                LOOP

                    log_file('r_match_nsf.............c_match_cp_nsf');

                    l_impound_trx_id := NULL;
                    l_impound_trx_currency := NULL;
                    l_impound_due_date := NULL;
                    l_control_id := NULL;
                    l_input_source := NULL;
                    l_cts_header_id := NULL;

                    BEGIN
                        OPEN c_imp_match_detail_cp_nsf_org (r_match_nsf.amount,
                                                            r_match_nsf.bank_account_id,
                                                            r_match_nsf.originator_account,
                                                            g_funding_method);

                        FETCH c_imp_match_detail_cp_nsf_org
                            INTO l_impound_trx_id,
                                 l_impound_trx_currency,
                                 /*  -->> FP 64978 || Arun Bacha || June 2016 || Removing the impound due date as value date is passed as receipt maturity date
                                 l_impound_due_date,
                        --<< FP  64978 || Arun Bacha || June 2016 || Removing the impound due date as value date is passed as receipt maturity date */
                                 l_control_id,
                                 l_input_source,
                                 l_cts_header_id;


                        IF    c_imp_match_detail_cp_nsf_org%NOTFOUND
                           OR c_imp_match_detail_cp_nsf_org%ROWCOUNT > 1
                        THEN
                            -->> FP64945   || Arun Bacha || MAY 2016 || Added  the below  to chech the match with the control name and number when couldnt with ORG account
                            CLOSE c_imp_match_detail_cp_nsf_org;

                            /*RAISE e_no_match_detail; */
                            OPEN c_imp_match_detail_cp_nsf (r_match_nsf.amount,
                                                            r_match_nsf.bank_account_id,
                                                            r_match_nsf.originator_account,
                                                            r_match_nsf.bank_reference_no,
                                                            r_match_nsf.attribute4,
                                                            g_funding_method);

                            FETCH c_imp_match_detail_cp_nsf
                                INTO l_impound_trx_id,
                                     l_impound_trx_currency,
                                     /*  -->> FP 64978 || Arun Bacha || June 2016 || Removing the impound due date as value date is passed as receipt maturity date
                                  l_impound_due_date,
                             --<< FP  64978 || Arun Bacha || June 2016 || Removing the impound due date as value date is passed as receipt maturity date */
                                     l_control_id,
                                     l_input_source,
                                     l_cts_header_id;


                            IF    c_imp_match_detail_cp_nsf%NOTFOUND
                               OR c_imp_match_detail_cp_nsf%ROWCOUNT > 1
                            THEN
                                CLOSE c_imp_match_detail_cp_nsf;

                                RAISE e_no_match_detail;
                            END IF;

                            CLOSE c_imp_match_detail_cp_nsf;
                        ELSE
                            CLOSE c_imp_match_detail_cp_nsf_org;
                        END IF;

                        --<< FP64945   || Arun Bacha || MAY 2016 || Added  the below  to chech the match with the control name and number when couldnt with ORG account
                        log_message (
                               'Matched impound found id is  '
                            || l_impound_trx_id,
                            3);

                        -->> US US812543 || 09-SEP-2017 || Arun Bacha || added the code to store the ORG account details in the receipts table

                        g_control_bank := r_match_nsf.swift_bic;
                        g_control_branch := r_match_nsf.swift_bic;
                        g_control_account := r_match_nsf.originator_account;
                        g_control_swift_bic := r_match_nsf.swift_bic;

                        -->> US US812543 || 09-SEP-2017 || Arun Bacha || added the code to store the ORG account details in the receipts table

                        ---create receipts and impound application
                        insert_receipts (l_impound_trx_id,
                                         l_control_id,
                                         r_match_nsf.as_of_date,
                                         /*  -->> FP 64978 || Arun Bacha || June 2016 || Removing the impound due date as value date is passed as receipt maturity date
                                                     l_impound_due_date, */
                                         r_match_nsf.as_of_date,
                                         --<< FP 64978  || Arun Bacha || June 2016 || Removing the impound due date as value date is passed as receipt maturity date
                                         r_match_nsf.currency_code,
                                         l_impound_trx_currency,
                                         r_match_nsf.amount,
                                         g_funding_method,
                                         r_match_nsf.country,
                                         l_input_source,
                                         g_spread_tier,
                                         g_spread_rate,
                                         TRUE,
                                         r_match_nsf.bank_account_id);



                        update_impound_trx (l_impound_trx_id,
                                            NVL (r_match_nsf.amount, 0));


                        UPDATE xxmm_itd_cp_receipt_stag
                           SET receipt_batch_id = g_batch_id
                         WHERE ROWID = r_match_nsf.ROWID;

                        log_message ('Matched impound receipt created......',
                                     3);

                        log_message (
                               'match org '
                            || r_match_nsf.originator_account
                            || ' '
                            || l_control_id
                            || ' '
                            || r_match_nsf.attribute5,
                            1);
                        log_file (
                               'match originator Account :  '
                            || r_match_nsf.originator_account
                            || ' Control ID : '
                            || l_control_id
                            || ' '
                            || r_match_nsf.attribute5,
                            1);

                        -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||  Calling the Function to check whether the ORG account matches with one in IMMS and if not, insert the details into GTT table which is used while reporting exclusions
                        match_org_control (r_match_nsf.originator_account,
                                           l_control_id);

                        --<< PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||  Calling the Function to check whether the ORG account matches with one in IMMS and if not, insert the details into GTT table which is used while reporting exclusions
                        -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||  Calling the function to check for risk tier hold on cts and if any, release the hold if it placed by production

                        IF xxmm_lookup_utilities.lookup_code_exist (
                               NULL,
                               g_org_acc_exclsn_rpt_lookup,
                               g_org_risk_tier_hol_rel)
                        THEN
                            -->> Project G'day | Ranjitha | 26-APR-2016| Need to release hold at Impound level only for AUS. And hence passing Impound TRX ID as parameter
                            --rel_risk_hold (l_cts_header_id);
                            rel_risk_hold (l_cts_header_id, l_impound_trx_id);
                        --<< Project G'day | Ranjitha | 26-APR-2016| Need to release hold at Impound level only for AUS. And hence passing Impound TRX ID as parameter
                        END IF;
                    --<< PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||  Calling the function to check for risk tier hold on cts and if any, release the hold if it placed by production
                    EXCEPTION
                        WHEN e_no_match_detail
                        THEN
                            UPDATE xxmm_itd_cp_receipt_stag
                               SET match_flag = 'N', attribute6 = NULL
                             WHERE ROWID = r_match_nsf.ROWID;

                            log_message (
                                   'Update flag to N for record with no matching impound information: '
                                || TO_CHAR (SQL%ROWCOUNT),
                                1);
                    END;
                END LOOP;

                confirm_batch (g_batch_id);
            END LOOP;
        END IF;

        --<< PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||Added the condition to change the direction of flow based on the Country

        --create receipt batch with no match impounds

        log_message ('Starting to create no matched receipt batches ', 1);

        FOR r_no_match_batch IN c_no_match_batch
        LOOP
            log_file ('In Loop r_no_match_batch........c_no_match_batch');
            -->> PWR EU-15-600 | R Q4 | Arun Bacha | 18-Jul-2016 | Added the procedure to set the funding method according to the Bank Account ID
            --g_funding_method := xxmm_constants.gc_credit_push_fund_meth;
            set_funding_method (r_no_match_batch.bank_account_id);
            --<< PWR EU-15-600 | R Q4 |Arun Bacha | 18-Jul-2016 | Added the procedure to set the funding method according to the Bank Account ID
            get_fm_attributes (g_funding_method);

            SELECT COUNT (1)
              INTO l_no_match_count
              FROM xxmm_itd_cp_receipt_stag
             WHERE     inbound_file_id = p_inbound_file_id
                   AND bank_account_id = r_no_match_batch.bank_account_id
                   AND currency_code = r_no_match_batch.currency_code
                   AND country = r_no_match_batch.country
                   AND r_no_match_batch.match_flag = 'N';

            log_file ('Before calling insert_receipt_batch...');

            -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||Added the condition to change the direction of flow based on the Country
            IF xxmm_lookup_utilities.lookup_code_exist (
                   NULL,
                   xxmm_constants.gc_err_code_lt,
                   g_itd_rct)
            THEN
                insert_receipt_batch (
                    g_funding_method,
                    -->>Project G'Day | Ranjitha | 6-APR-2016 | Remit Presentation date should be baseed on OU timezone and only Date
                    --   SYSDATE,
                    TRUNC (g_clt_sysdate),
                    --<<Project G'Day | Ranjitha | 6-APR-2016 | Remit Presentation date should be baseed on OU timezone and only Date


                    -->>Ctiibank - Batch Header Currency for ADP's Credit Push  NSF Account - Receipt Batch Workbench, jwu
                    --r_no_match_batch.currency_code,
                    NVL (
                        xxmm_bank_utilities.get_account_currency (
                            r_no_match_batch.bank_account_id),
                        r_no_match_batch.currency_code),
                    --<<Ctiibank - Batch Header Currency for ADP's Credit Push  NSF Account - Receipt Batch Workbench

                    r_no_match_batch.currency_code,
                    1,
                    r_no_match_batch.bank_account_id,
                    r_no_match_batch.bank_account_id,
                    r_no_match_batch.country,
                    'Y',
                    l_match_count);
            ELSE
                insert_receipt_batch (
                    g_funding_method,
                    -->>Project G'Day | Ranjitha | 6-APR-2016 | Remit Presentation date should be baseed on OU timezone and only Date
                    --   SYSDATE,
                    TRUNC (g_clt_sysdate),
                    --<<Project G'Day | Ranjitha | 6-APR-2016 | Remit Presentation date should be baseed on OU timezone and only Date
                    -->>Ctiibank - Batch Header Currency for ADP's Credit Push  NSF Account - Receipt Batch Workbench, jwu
                    --r_no_match_batch.currency_code,
                    NVL (
                        xxmm_bank_utilities.get_account_currency (
                            r_no_match_batch.bank_account_id),
                        r_no_match_batch.currency_code),
                    --<<Ctiibank - Batch Header Currency for ADP's Credit Push  NSF Account - Receipt Batch Workbench
                    r_no_match_batch.currency_code,
                    1,
                    r_no_match_batch.bank_account_id,
                    r_no_match_batch.bank_account_id,
                    r_no_match_batch.country,
                    'Y',
                    l_match_count);
            END IF;

            --<< PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||Added the condition to change the direction of flow based on the Country


            log_file ('After calling insert_receipt_batch...');

            log_message (
                   'Starting to get bank account detail for bank account id:  '
                || TO_CHAR (r_no_match_batch.bank_account_id),
                1);

            SELECT TRIM (xbb.bank_number),
                   TRIM (xbb.bank_branch_number),
                   TRIM (xba.account_number),
                      TRIM (xbb.bank_number)
                   || ' '
                   || TRIM (xbb.bank_branch_number)
                   || ' '
                   || TRIM (xba.account_number)
              INTO g_bank_number,
                   g_branch_number,
                   g_bank_number,
                   l_bank_account
              FROM xxmm_bank_accounts xba, xxmm_bank_branches xbb
             WHERE     xba.bank_account_id = r_no_match_batch.bank_account_id
                   AND xbb.bank_branch_id = xba.bank_branch_id;


            g_country := r_no_match_batch.country;

            log_message ('Starting to create no matched receipts ', 3);
            log_file ('Starting to create no matched receipts ');

            FOR r_no_match
                IN c_no_match (r_no_match_batch.bank_account_id,
                               r_no_match_batch.currency_code,
                               r_no_match_batch.country)
            LOOP
                log_file ('In loop r_no_match........c_no_match');

                l_impound_trx_id := NULL;
                l_impound_trx_currency := NULL;
                l_impound_due_date := NULL;
                l_control_id := NULL;
                l_input_source := NULL;

                -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||Added the condition to change the direction of flow based on the Country
                IF NOT xxmm_lookup_utilities.lookup_code_exist (
                           NULL,
                           xxmm_constants.gc_err_code_lt,
                           g_itd_rct)
                THEN
                    --<< PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||Added the condition to change the direction of flow based on the Country
                    BEGIN
                        l_ctrl_number :=
                            extract_control_number_name (
                                r_no_match.bank_reference_no,
                                'NUMBER');

                        -->> karen jiang |Sept18,2014|add verification for control name and control number verification
                        SELECT ctrl.control_id, ctrl.input_source
                          INTO l_control_id, l_input_source
                          FROM xxmm_customer_controls ctrl
                         WHERE     ctrl.funding_method =
                                       xxmm_constants.gc_credit_push_fund_meth
                               --
                               -- Start Naeem 18-NOV-2014
                               --
                               --AND   r_no_match.bank_reference_no LIKE
                               --       '%' || ctrl.control_number || '%'
                               --AND  extract_control_number_name(r_no_match.bank_reference_no,'NUMBER') = ctrl.control_number
                               AND ctrl.control_number = l_ctrl_number
                               --
                               -- End Naeem 18-NOV-2014
                               --
                               --
                               -- Start Naeem 18-DEC-2014
                               --
                               --                          AND ( upper(r_no_match.bank_reference_no) LIKE
                               --                                 '%' || upper(ctrl.control_name) || '%'
                               --
                               --  End  Naeem 18-DEC-2014
                               --
                               --                           OR extract_control_name (
                               AND (   extract_control_name (               --
                                           --  End  Naeem 18-DEC-2014
                                           --
                                           UPPER (
                                               r_no_match.bank_reference_no)) LIKE
                                              '%'
                                           || UPPER (ctrl.control_name)
                                           || '%'
                                    OR UPPER (ctrl.control_name) LIKE
                                              '%'
                                           || extract_control_name (
                                                  UPPER (
                                                      r_no_match.bank_reference_no))
                                           || '%'
                                    OR xxmm_create_receipts.strip_control_name (
                                           xxmm_utilities.clean_special_chars (
                                               extract_control_name (
                                                   UPPER (
                                                       r_no_match.bank_reference_no)))) LIKE
                                              '%'
                                           || xxmm_create_receipts.strip_control_name (
                                                  xxmm_utilities.clean_special_chars (
                                                      UPPER (
                                                          ctrl.control_name)))
                                           || '%'
                                    OR xxmm_create_receipts.strip_control_name (
                                           xxmm_utilities.clean_special_chars (
                                               UPPER (ctrl.control_name))) LIKE
                                              '%'
                                           || xxmm_create_receipts.strip_control_name (
                                                  xxmm_utilities.clean_special_chars (
                                                      extract_control_name (
                                                          UPPER (
                                                              r_no_match.bank_reference_no))))
                                           || '%');

                        log_message (
                            'Found the control id is ' || l_control_id);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            l_control_id := NULL;
                            l_input_source := NULL;
                    END;

                    -->> karen jiang |Sept18,2014|add verification for control name and control number verification


                    IF l_control_id IS NULL
                    THEN
                        BEGIN
                            log_message (
                                   'Starting verification for control number OR matching name for reference "'
                                || r_no_match.bank_reference_no
                                || '"',
                                1);

                            l_ctrl_number :=
                                extract_control_number_name (
                                    r_no_match.bank_reference_no,
                                    'NUMBER');

                            SELECT ctrl.control_id, ctrl.input_source
                              INTO l_control_id, l_input_source
                              FROM xxmm_customer_controls ctrl
                             WHERE     ctrl.funding_method =
                                           xxmm_constants.gc_credit_push_fund_meth
                                   --
                                   --Start Naeem 18-NOV-2014
                                   --
                                   --AND (   r_no_match.bank_reference_no LIKE
                                   --           '%' || ctrl.control_number || '%'
                                   --AND ( extract_control_number_name(r_no_match.bank_reference_no,'NUMBER') = ctrl.control_number
                                   AND (   ctrl.control_number =
                                               l_ctrl_number
                                        --
                                        -- End Naeem 18-NOV-2014
                                        --
                                        --
                                        -- Start Naeem 18-DEC-2014
                                        --
                                        --                           OR upper(r_no_match.bank_reference_no) LIKE
                                        --                                 '%' || upper(ctrl.control_name) || '%'
                                        --
                                        -- Start Naeem 18-DEC-2014
                                        --
                                        OR extract_control_name (
                                               UPPER (
                                                   r_no_match.bank_reference_no)) LIKE
                                                  '%'
                                               || UPPER (ctrl.control_name)
                                               || '%'
                                        OR UPPER (ctrl.control_name) LIKE
                                                  '%'
                                               || extract_control_name (
                                                      UPPER (
                                                          r_no_match.bank_reference_no))
                                               || '%'
                                        OR xxmm_create_receipts.strip_control_name (
                                               xxmm_utilities.clean_special_chars (
                                                   extract_control_name (
                                                       UPPER (
                                                           r_no_match.bank_reference_no)))) LIKE
                                                  '%'
                                               || xxmm_create_receipts.strip_control_name (
                                                      xxmm_utilities.clean_special_chars (
                                                          UPPER (
                                                              ctrl.control_name)))
                                               || '%'
                                        OR xxmm_create_receipts.strip_control_name (
                                               xxmm_utilities.clean_special_chars (
                                                   UPPER (ctrl.control_name))) LIKE
                                                  '%'
                                               || xxmm_create_receipts.strip_control_name (
                                                      xxmm_utilities.clean_special_chars (
                                                          extract_control_name (
                                                              UPPER (
                                                                  r_no_match.bank_reference_no))))
                                               || '%');

                            log_message (
                                   'Found the matching control id '
                                || l_control_id,
                                3);
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                l_control_id := NULL;
                                l_input_source := NULL;
                                log_message ('Matching control id not found',
                                             3);
                        END;
                    END IF;
                -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||Added the condition to change the direction of flow based on the Country
                ELSIF xxmm_lookup_utilities.lookup_code_exist (
                          NULL,
                          xxmm_constants.gc_err_code_lt,
                          g_itd_rct)
                THEN
                    BEGIN
                        SELECT ctrl.control_id,
                               ctrl.input_source,
                               ctrl.control_name
                          INTO l_control_id, l_input_source, l_control_name
                          FROM xxmm_customer_controls ctrl
                        --->>> Start FP-66895 07-OCT-2019 Muhammad -- to filter Impounds for that particulart Originator Account.
--                         WHERE xxmm_create_receipts.get_org_unique_control_id (
--                                   r_no_match.originator_account) =
--                                   ctrl.control_id;
                         WHERE ctrl.control_id in (SELECT xbau.entity_id
                                                      --INTO l_control_id
                                                        FROM xxmm_bank_accounts xba, xxmm_bank_account_uses xbau
                                                       WHERE     (   xba.account_number = r_no_match.originator_account --<<START  George Felian 28-JUN-2016 PWR EU-15-600 US477483 Start
                                                                ---
                                                                -->>> Start FP-66895 27-NOV-2019 Muhammad -- to find the Sort Code and Originator Account with Account Name
                                                                ---
                                                                OR
                                                                (DECODE (
                                                                       g_check_sort_code,
                                                                       'Y',
                                                                       REPLACE (
                                                                                xba.account_name,
                                                                                ' ',
                                                                                ''),
                                                                      '@@@@') = r_no_match.originator_account)
                                                                ---
                                                                --<<< End FP-66895 27-NOV-2019 Muhammad -- to find the Sort Code and Originator Account with Account Name
                                                                ---
                                                                OR DECODE (
                                                                       g_check_sort_code,
                                                                       'Y', REPLACE (
                                                                                SUBSTR (xba.account_name,
                                                                                        INSTR (xba.account_name, ' ', 1)),
                                                                                ' ',
                                                                                ''),
                                                                       '@@@@') = r_no_match.originator_account) -->><END  George Felian 28-JUN-2016 PWR EU-15-600 US477483
                                                         AND xbau.entity_id = NVL (ctrl.control_id, xbau.entity_id)
                                                         AND xbau.account_usage_type = xxmm_constants.gc_org_acc_usage_type
                                                         AND xbau.entity_type = xxmm_constants.gc_entity_type
                                                         AND xba.bank_account_id = xbau.bank_account_id);
                    --->>> End FP-66895 07-OCT-2019 Muhammad -- to filter Impounds for that particulart Originator Account.
                    -->> FP64945  || Arun Bacha || MAY 2016 || Commented the code to check for the org match before control number or name
                    /*
                    xxmm_create_receipts.get_org_unique_control_id (
                                     r_no_match.originator_account) =
                                     ctrl.control_id
                               OR UPPER (
                                     TRIM (
                                        get_control_number_nl_fr (
                                           r_no_match.attribute4))) =
                                     UPPER (TRIM (ctrl.control_number))
                               OR NVL (UPPER (r_no_match.bank_reference_no),
                                       'NO_MATCH') LIKE
                                     '%' || DECODE(LENGTH(UPPER (ctrl.control_name)),2,'$%^&',1,'$%^&', UPPER (ctrl.control_name))|| '%'
                               OR UPPER (ctrl.control_name) LIKE
                                        '%'
                                     || NVL (UPPER (r_no_match.bank_reference_no),
                                             'NO_MATCH')
                                     || '%'
                               OR NVL (
                                     xxmm_create_receipts.strip_control_name (
                                        clean_special_chars (
                                           UPPER (r_no_match.bank_reference_no))),
                                     'NO_MATCH') LIKE
                                        '%'
                                     || DECODE(LENGTH(xxmm_create_receipts.strip_control_name (
                                           clean_special_chars (
                                              UPPER (ctrl.control_name)))),2,'$%^&',1,'$%^&',xxmm_create_receipts.strip_control_name (
                                           clean_special_chars (
                                              UPPER (ctrl.control_name))))
                                     || '%'
                               OR xxmm_create_receipts.strip_control_name (
                                     clean_special_chars (
                                        UPPER (ctrl.control_name))) LIKE
                                        '%'
                                     || NVL (
                                           xxmm_create_receipts.strip_control_name (
                                              clean_special_chars (
                                                 UPPER (
                                                    r_no_match.bank_reference_no))),
                                           'NO_MATCH')
                                     || '%');  */
                    --<<FP64945  || Arun Bacha || MAY 2016 || Commented the code to check for the org match before control number or name
                    -->>FP64945  || Arun Bacha || MAY 2016 || added THE code TO CHECK FOR THE  control NUMBER OR NAME
                    EXCEPTION
                        WHEN NO_DATA_FOUND
                        --OR TOO_MANY_ROWS
                        THEN
                            log_file('No_Data_Found');

                            BEGIN
                                SELECT ctrl.control_id,
                                       ctrl.input_source,
                                       ctrl.control_name
                                  INTO l_control_id,
                                       l_input_source,
                                       l_control_name
                                  FROM xxmm_customer_controls ctrl
                        --->>> Start FP-66895 07-OCT-2019 Muhammad -- to filter Impounds for that particulart Originator Account.
--                                 WHERE (   xxmm_create_receipts.get_org_unique_control_id (
--                                               r_no_match.originator_account) =
--                                               ctrl.control_id
                                 WHERE
--                                 ctrl.control_id in (SELECT xbau.entity_id
--                                                      --INTO l_control_id
--                                                        FROM xxmm_bank_accounts xba, xxmm_bank_account_uses xbau
--                                                       WHERE     (   xba.account_number = r_no_match.originator_account --<<START  George Felian 28-JUN-2016 PWR EU-15-600 US477483 Start
--                                                                OR DECODE (
--                                                                       g_check_sort_code,
--                                                                       'Y', REPLACE (
--                                                                                SUBSTR (xba.account_name,
--                                                                                        INSTR (xba.account_name, ' ', 1)),
--                                                                                ' ',
--                                                                                ''),
--                                                                       '@@@@') = r_no_match.originator_account) -->><END  George Felian 28-JUN-2016 PWR EU-15-600 US477483
--                                                         AND xbau.entity_id = NVL (ctrl.control_id, xbau.entity_id)
--                                                         AND xbau.account_usage_type = xxmm_constants.gc_org_acc_usage_type
--                                                         AND xbau.entity_type = xxmm_constants.gc_entity_type
--                                                         AND xba.bank_account_id = xbau.bank_account_id)
                    --->>> End FP-66895 07-OCT-2019 Muhammad -- to filter Impounds for that particulart Originator Account.
                                     --AND
                                     (UPPER (
                                               TRIM (
                                                   get_control_number_nl_fr (
                                                       r_no_match.attribute4))) =
                                               UPPER (
                                                   TRIM (ctrl.control_number))
                                        OR NVL (
                                               UPPER (
                                                   r_no_match.bank_reference_no),
                                               'NO_MATCH') LIKE
                                                  '%'
                                               || DECODE (
                                                      LENGTH (
                                                          UPPER (
                                                              ctrl.control_name)),
                                                      4, '$%^&', --FP65163,IMMS | UK | FS Ticket | 1.5 | Faster Payments auto-receipted under incorrect company code,jwu
                                                      3, '$%^&', --FP65163,IMMS | UK | FS Ticket | 1.5 | Faster Payments auto-receipted under incorrect company code,jwu
                                                      2, '$%^&',
                                                      1, '$%^&',
                                                      UPPER (
                                                          ctrl.control_name))
                                               || '%'
                                        OR (NVL (
                                                UPPER (
                                                    r_no_match.bank_reference_no),
                                                'NO_MATCH') =
                                                UPPER (ctrl.control_name)) --FP65163,IMMS | UK | FS Ticket | 1.5 | Faster Payments auto-receipted under incorrect company code,jwu
                                        OR UPPER (ctrl.control_name) LIKE
                                                  '%'
                                               || NVL (
                                                      UPPER (
                                                          r_no_match.bank_reference_no),
                                                      'NO_MATCH')
                                               || '%'
                                        OR NVL (
                                               xxmm_create_receipts.strip_control_name (
                                                   clean_special_chars (
                                                       UPPER (
                                                           r_no_match.bank_reference_no))),
                                               'NO_MATCH') LIKE
                                                  '%'
                                               || DECODE (
                                                      LENGTH (
                                                          xxmm_create_receipts.strip_control_name (
                                                              clean_special_chars (
                                                                  UPPER (
                                                                      ctrl.control_name)))),
                                                      4, '$%^&', --FP65163,IMMS | UK | FS Ticket | 1.5 | Faster Payments auto-receipted under incorrect company code,jwu
                                                      3, '$%^&', --FP65163,IMMS | UK | FS Ticket | 1.5 | Faster Payments auto-receipted under incorrect company code,jwu
                                                      2, '$%^&',
                                                      1, '$%^&',
                                                      xxmm_create_receipts.strip_control_name (
                                                          clean_special_chars (
                                                              UPPER (
                                                                  ctrl.control_name))))
                                               || '%'
                                        OR NVL (
                                               xxmm_create_receipts.strip_control_name (
                                                   xxmm_create_receipts.clean_special_chars (
                                                       UPPER (
                                                           r_no_match.bank_reference_no))),
                                               'NO_MATCH') =
                                               xxmm_create_receipts.strip_control_name (
                                                   xxmm_create_receipts.clean_special_chars (
                                                       UPPER (
                                                           ctrl.control_name))) --FP65163,IMMS | UK | FS Ticket | 1.5 | Faster Payments auto-receipted under incorrect company code,jwu
                                        OR xxmm_create_receipts.strip_control_name (
                                               clean_special_chars (
                                                   UPPER (ctrl.control_name))) LIKE
                                                  '%'
                                               || NVL (
                                                      xxmm_create_receipts.strip_control_name (
                                                          clean_special_chars (
                                                              UPPER (
                                                                  r_no_match.bank_reference_no))),
                                                      'NO_MATCH')
                                               || '%');


                                --<<FP64945 || Arun Bacha || MAY 2016 || Added the code to check for the  control number or name
                                -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||  If the matched control has control name length less 2 characters create an unidentified receipt
                                IF LENGTH (l_control_name) <= 2
                                THEN
                                    l_control_id := NULL;
                                END IF;

                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    l_control_id := NULL;
                                    l_input_source := NULL;

                            END;

                            /*
                         -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||  If the matched control has control name length less 2 characters create an unidentified receipt
                              IF length(l_control_name) <= 2
                              THEN
                              l_control_id := NULL;
                              END IF;
                         --<< PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||  If the matched control has control name length less 2 characters create an unidentified receipt
                                       */


                            log_message (
                                'Found the control id is ' || l_control_id,
                                3);
                    WHEN TOO_MANY_ROWS
                    THEN
                            log_file('too_many_rows');

                            BEGIN
                                SELECT ctrl.control_id,
                                       ctrl.input_source,
                                       ctrl.control_name
                                  INTO l_control_id,
                                       l_input_source,
                                       l_control_name
                                  FROM xxmm_customer_controls ctrl
                        --->>> Start FP-66895 07-OCT-2019 Muhammad -- to filter Impounds for that particulart Originator Account.
--                                 WHERE (   xxmm_create_receipts.get_org_unique_control_id (
--                                               r_no_match.originator_account) =
--                                               ctrl.control_id
                                 WHERE ( ctrl.control_id in (SELECT xbau.entity_id
                                                      --INTO l_control_id
                                                        FROM xxmm_bank_accounts xba, xxmm_bank_account_uses xbau
                                                       WHERE     (   xba.account_number = r_no_match.originator_account --<<START  George Felian 28-JUN-2016 PWR EU-15-600 US477483 Start
                                                                OR DECODE (
                                                                       g_check_sort_code,
                                                                       'Y', REPLACE (
                                                                                SUBSTR (xba.account_name,
                                                                                        INSTR (xba.account_name, ' ', 1)),
                                                                                ' ',
                                                                                ''),
                                                                       '@@@@') = r_no_match.originator_account) -->><END  George Felian 28-JUN-2016 PWR EU-15-600 US477483
                                                         AND xbau.entity_id = NVL (ctrl.control_id, xbau.entity_id)
                                                         AND xbau.account_usage_type = xxmm_constants.gc_org_acc_usage_type
                                                         AND xbau.entity_type = xxmm_constants.gc_entity_type
                                                         AND xba.bank_account_id = xbau.bank_account_id )
                    --->>> End FP-66895 07-OCT-2019 Muhammad -- to filter Impounds for that particulart Originator Account.
---
--- Commented because No need to check Control Name if the Originator Account is matched with Multiple Controls
---
                                     --OR (
                                     /*UPPER (
                                     --AND ( UPPER (
                                               TRIM (
                                                   get_control_number_nl_fr (
                                                       r_no_match.attribute4))) =
                                               UPPER (
                                                   TRIM (ctrl.control_number))
                                        OR NVL (
                                               UPPER (
                                                   r_no_match.bank_reference_no),
                                               'NO_MATCH') LIKE
                                                  '%'
                                               || DECODE (
                                                      LENGTH (
                                                          UPPER (
                                                              ctrl.control_name)),
                                                      4, '$%^&', --FP65163,IMMS | UK | FS Ticket | 1.5 | Faster Payments auto-receipted under incorrect company code,jwu
                                                      3, '$%^&', --FP65163,IMMS | UK | FS Ticket | 1.5 | Faster Payments auto-receipted under incorrect company code,jwu
                                                      2, '$%^&',
                                                      1, '$%^&',
                                                      UPPER (
                                                          ctrl.control_name))
                                               || '%'
                                        OR (NVL (
                                                UPPER (
                                                    r_no_match.bank_reference_no),
                                                'NO_MATCH') =
                                                UPPER (ctrl.control_name)) --FP65163,IMMS | UK | FS Ticket | 1.5 | Faster Payments auto-receipted under incorrect company code,jwu
                                        OR UPPER (ctrl.control_name) LIKE
                                                  '%'
                                               || NVL (
                                                      UPPER (
                                                          r_no_match.bank_reference_no),
                                                      'NO_MATCH')
                                               || '%'
                                        OR NVL (
                                               xxmm_create_receipts.strip_control_name (
                                                   clean_special_chars (
                                                       UPPER (
                                                           r_no_match.bank_reference_no))),
                                               'NO_MATCH') LIKE
                                                  '%'
                                               || DECODE (
                                                      LENGTH (
                                                          xxmm_create_receipts.strip_control_name (
                                                              clean_special_chars (
                                                                  UPPER (
                                                                      ctrl.control_name)))),
                                                      4, '$%^&', --FP65163,IMMS | UK | FS Ticket | 1.5 | Faster Payments auto-receipted under incorrect company code,jwu
                                                      3, '$%^&', --FP65163,IMMS | UK | FS Ticket | 1.5 | Faster Payments auto-receipted under incorrect company code,jwu
                                                      2, '$%^&',
                                                      1, '$%^&',
                                                      xxmm_create_receipts.strip_control_name (
                                                          clean_special_chars (
                                                              UPPER (
                                                                  ctrl.control_name))))
                                               || '%'
                                        OR */
/*
                                        NVL (
                                               xxmm_create_receipts.strip_control_name (
                                                   xxmm_create_receipts.clean_special_chars (
                                                       UPPER (
                                                           r_no_match.bank_reference_no))),
                                               'NO_MATCH') =
                                               xxmm_create_receipts.strip_control_name (
                                                   xxmm_create_receipts.clean_special_chars (
                                                       UPPER (
                                                           ctrl.control_name))) --FP65163,IMMS | UK | FS Ticket | 1.5 | Faster Payments auto-receipted under incorrect company code,jwu
                                        OR xxmm_create_receipts.strip_control_name (
                                               clean_special_chars (
                                                   UPPER (ctrl.control_name))) LIKE
                                                  '%'
                                               || NVL (
                                                      xxmm_create_receipts.strip_control_name (
                                                          clean_special_chars (
                                                              UPPER (
                                                                  r_no_match.bank_reference_no))),
                                                      'NO_MATCH')
                                               || '%') */
---
--- Commented because No need to check Control Name if the Originator Account is matched with Multiple Controls
---
                                               --|| '%'
                                        )
                                        AND rownum=1
                                        ;


                                --<<FP64945 || Arun Bacha || MAY 2016 || Added the code to check for the  control number or name
                                -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||  If the matched control has control name length less 2 characters create an unidentified receipt
                                IF LENGTH (l_control_name) <= 2
                                THEN
                                    l_control_id := NULL;
                                END IF;

                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    l_control_id := NULL;
                                    l_input_source := NULL;

                            END;


                    WHEN OTHERS
                    THEN
                            l_control_id := NULL;
                            l_input_source := NULL;


                    END;
                END IF;

                -->> US US812543 || 09-SEP-2017 || Arun Bacha || added the code to store the ORG account details in the receipts table

                g_control_bank := r_no_match.swift_bic;
                g_control_branch := r_no_match.swift_bic;
                g_control_account := r_no_match.originator_account;
                g_control_swift_bic := r_no_match.swift_bic;

                -->> US US812543 || 09-SEP-2017 || Arun Bacha || added the code to store the ORG account details in the receipts table


                insert_receipts (NULL,
                                 l_control_id,
                                 r_no_match.as_of_date,
                                 r_no_match.as_of_date,
                                 r_no_match.currency_code,
                                 r_no_match.currency_code,
                                 r_no_match.amount,
                                 g_funding_method,
                                 r_no_match.country,
                                 l_input_source,
                                 g_spread_tier,
                                 g_spread_rate,
                                 FALSE,
                                 r_no_match.bank_account_id);


                UPDATE xxmm_itd_cp_receipt_stag
                   SET receipt_batch_id = g_batch_id
                 WHERE ROWID = r_no_match.ROWID;

                log_message (
                       'match org '
                    || r_no_match.originator_account
                    || ' '
                    || l_control_id
                    || ' '
                    || r_no_match.attribute5,
                    1);
                log_file (
                       'match org Account :'
                    || r_no_match.originator_account
                    || ' Control ID :  '
                    || l_control_id
                    || ' '
                    || r_no_match.attribute5);
                -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||  Calling the Function to check whether the ORG account matches with one in IMMS and if not, insert the details into GTT table which is used while reporting exclusions
                match_org_control (r_no_match.originator_account,
                                   l_control_id);
                --<< PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||  Calling the Function to check whether the ORG account matches with one in IMMS and if not, insert the details into GTT table which is used while reporting exclusions
            END LOOP;

            confirm_batch (g_batch_id);
        END LOOP;

        --<< PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||Added the condition to change the direction of flow based on the Country
        itd_report (p_inbound_file_id);

        -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||Added the condition to purge the data only if the lookup code exists
        IF xxmm_lookup_utilities.lookup_code_exist (
               NULL,
               xxmm_constants.gc_err_code_lt,
               g_itd_rct)
        THEN
            purge_stag_table (p_inbound_file_id);
        END IF;
    --<< PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||Added the condition to purge the data only if the lookup code exists
    log_file('Exiting......');
    EXCEPTION
        WHEN OTHERS
        THEN
            g_err_msg :=
                   'OTHER EXCEPTION in procedure create_apply_conf_rec , the error text is : '
                || SQLERRM;
            log_message (g_err_msg);
            log_error (g_err_msg, xxmm_constants.msg_type_error);

            raise_application_error (-20010, g_err_msg);
    END create_apply_conf_rec;


     /* ************************************************************************
     *            COPYRIGHT (c) 2020 ADP Canada, Financial Systems          *
     ************************************************************************
     *                                                                      *
     * Module Name  :  create_apply_conf_rec_uk                             *
     * Module Type  : PL/SQL Procedur
     * Inputs:        p_inbound_file_id number                              *
     * Purpose      : Procedure to create reciepts UK INTRA day files
     *               originater account, client control and Name            *
     *                                                                      *
     ************************************************************************
     *                            BIBLIOGRAPHY                              *
     ************************************************************************
     *                                                                      *
     ************************************************************************
     *   Date       |      Author          |  SCR    | Remarks              *
     ************************************************************************
     * 26-MAY-2020  George Felian       IMM 20-253 UK Intraday Receipt Logic*
     ************************************************************************
     */
/* Formatted on 6/6/2020 3:09:21 PM (QP5 v5.215.12089.38647) */
PROCEDURE create_apply_conf_rec_uk (errbuf              OUT VARCHAR2,
                                    retcode             OUT VARCHAR2,
                                    p_inbound_file_id       NUMBER)
IS
   -- Used to create Receipt Batch -CP/NSF bank account, funding method and Matched to impound
   CURSOR c_match_batch_cp_nsf
   IS
      SELECT DISTINCT bank_account_id,
                      currency_code,
                      country,
                      match_flag,
                      attribute6 funding_method -->> George Felian    11-MAY-2020    IMM 20-253 UK Intraday Receipt Logic - Multiple Matches for Account Number Matching
        FROM xxmm_itd_cp_receipt_stag xicrs
       WHERE inbound_file_id = p_inbound_file_id;

-- Used to create receipts for the above reciept batches
 CURSOR c_match_cp_nsf_uk (
      p_bank_account_id    NUMBER,
      p_currency_code      VARCHAR2,
      p_country            VARCHAR2,
      p_funding_method     NUMBER,
      p_match_flag         VARCHAR2)
   IS
      SELECT ROWID, xicrs.*
        FROM xxmm_itd_cp_receipt_stag xicrs
       WHERE     inbound_file_id = p_inbound_file_id
             AND bank_account_id = p_bank_account_id
             AND currency_code = p_currency_code
             AND country = p_country
             AND match_flag = p_match_flag
             AND attribute6 = p_funding_method;

 -- used to get no of days to purge records in XXMM_ITD_REPORT_ALL
  CURSOR c_purge_itd_table
   IS
      SELECT lookup_code, attribute2
        FROM xxmm_lookups_v
       WHERE     lookup_type = g_org_acc_exclsn_rpt_lookup
             AND attribute2 IS NOT NULL;

   l_match_count            NUMBER;
   l_no_match_count         NUMBER;
   l_bank_account           VARCHAR2 (200);
   l_impound_trx_id         xxmm_cts_impound_trx.impound_trx_id%TYPE;
   l_impound_trx_currency   xxmm_cts_impound_trx.impound_trx_currency%TYPE;
   l_impound_due_date       xxmm_cts_impound_trx.impound_due_date%TYPE;
   l_control_id             xxmm_customer_controls.control_id%TYPE;
   -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 || added a variable to fetch control name while creating unmatched receipts
   l_control_name           xxmm_customer_controls.control_name%TYPE;
   --<< PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 || added a variable to fetch control name while creating unmatched receipts
   l_input_source           xxmm_customer_controls.input_source%TYPE;
   l_cts_header_id          xxmm_cts_headers.cts_header_id%TYPE;
   e_no_match_detail        EXCEPTION;

   l_ctrl_number            VARCHAR2 (30) := NULL;
   l_country                xxmm_lookups_v.lookup_code%TYPE := NULL;
   lc_attribute3   CONSTANT xxmm_lookups_v.attribute3%TYPE := 'ATTRIBUTE3';
   r_match_cp_nsf_uk        c_match_cp_nsf_uk%ROWTYPE;
    -- George Felian   15-JUL-2020      FP68479  - Receipt application om Unapplied Receipts
   l_receipt_application    BOOLEAN;
BEGIN
   g_intraday_flag := 'Y';
   g_srv_sysdate := SYSDATE;
   g_spread_tier := NULL;
   g_spread_rate := NULL;


   -->>Project G'Day | Ranjitha | 4-APR-2016 | Setting the Client timezone based on country lookup
   -- Set client time zone
   log_message ('Setting the Client Time Zone ', 3);
   --log_file ('MIQ Setting the Client Time Zone ');


   l_country :=
      xxmm_lookup_utilities.get_lookup_default_values (
         'NULL',
         xxmm_constants.gc_input_source_lt).attribute5;
   log_message ('Country is: ' || l_country, 3);
   --log_file ('MIQ Country is: ' || l_country);
   xxmm_timezones.set_client_timezone (
      NVL (xxmm_lookup_utilities.get_code_attribute (
              p_source_value         => NULL,
              p_type                 => xxmm_constants.gc_country_lt,
              p_code                 => l_country,
              p_attribute_category   => xxmm_constants.gc_country_lt,
              p_attribute            => lc_attribute3),
           439));

   --<< Project G'Day | Ranjitha | 4-APR-2016 | Setting the Client timezone based on country lookup
   log_message ('xxmm_timezones.set_client_timezone completed');
   --create receipt batch with match impounds

   log_message ('Call update_itd_stag_match_flag_uk');

   -- match transactions from staging table
   update_itd_stag_match_flag_uk (p_inbound_file_id);

   xxmm_utilities.populate_who_insert (g_creation_date,
                                       g_created_by,
                                       g_last_update_date,
                                       g_last_updated_by,
                                       g_last_update_login);


   log_message ('Starting to create matched receipt batches');

   FOR r_match_batch_cp IN c_match_batch_cp_nsf -- George Felian    11-MAY-2020 -- Remove hard coding of funding method (g_funding_method)
   LOOP
      -- get_fm_attributes (g_funding_method); -- George Felian    11-MAY-2020 -- Remove hard coding of funding method (g_funding_method)
      get_fm_attributes (r_match_batch_cp.funding_method);

      log_message (
            'Starting to create matched receipt batches for Bank Account ID: '
         || r_match_batch_cp.bank_account_id
         || ' Funding Method: '
         || r_match_batch_cp.funding_method
         || ' Match Flag: '
         || r_match_batch_cp.match_flag);

      SELECT COUNT (1)
        INTO l_match_count
        FROM xxmm_itd_cp_receipt_stag
       WHERE     inbound_file_id = p_inbound_file_id
             AND bank_account_id = r_match_batch_cp.bank_account_id
             AND currency_code = r_match_batch_cp.currency_code
             AND country = r_match_batch_cp.country
             AND match_flag = r_match_batch_cp.match_flag
             AND attribute6 = r_match_batch_cp.funding_method;

      --xxmm_constants.gc_credit_push_fund_meth;
      --<< George Felian    11-MAY-2020    IMM 20-253 UK Intraday Receipt Logic - Multiple Matches for Account Number Matchi
      insert_receipt_batch (
         r_match_batch_cp.funding_method,
         -->>Project G'Day | Ranjitha | 6-APR-2016 | Remit Presentation date should be baseed on OU timezone and only Date
         --   SYSDATE,
         TRUNC (g_clt_sysdate),
         --<<Project G'Day | Ranjitha | 6-APR-2016 | Remit Presentation date should be baseed on OU timezone and only Date
         -->>Ctiibank - Batch Header Currency for ADP's Credit Push  NSF Account - Receipt Batch Workbench, jwu
         --r_match_batch_cp.currency_code,
         NVL (
            xxmm_bank_utilities.get_account_currency (
               r_match_batch_cp.bank_account_id),
            r_match_batch_cp.currency_code),
         --<<Ctiibank - Batch Header Currency for ADP's Credit Push  NSF Account - Receipt Batch Workbench
         r_match_batch_cp.currency_code,
         1,
         r_match_batch_cp.bank_account_id,
         r_match_batch_cp.bank_account_id,
         r_match_batch_cp.country,
         'Y',
         l_match_count);

      log_message ('Receipt Batch_id : ' || g_batch_id);

      log_message (
            'Starting to get bank account detail for bank account id:  '
         || TO_CHAR (r_match_batch_cp.bank_account_id),
         3);

      SELECT TRIM (xbb.bank_number),
             TRIM (xbb.bank_branch_number),
             TRIM (xba.account_number),
                TRIM (xbb.bank_number)
             || ' '
             || TRIM (xbb.bank_branch_number)
             || ' '
             || TRIM (xba.account_number)
        INTO g_bank_number,
             g_branch_number,
             g_account_number,
             l_bank_account
        FROM xxmm_bank_accounts xba, xxmm_bank_branches xbb
       WHERE     xba.bank_account_id = r_match_batch_cp.bank_account_id
             AND xbb.bank_branch_id = xba.bank_branch_id;


      g_country := r_match_batch_cp.country;

      log_message ('Starting to create receipts ' || g_batch_id);


      FOR r_match_cp IN c_match_cp_nsf_uk (r_match_batch_cp.bank_account_id,
                                           r_match_batch_cp.currency_code,
                                           r_match_batch_cp.country,
                                           r_match_batch_cp.funding_method,
                                           r_match_batch_cp.match_flag)
      LOOP
         l_impound_trx_id := NULL;
         l_impound_trx_currency := NULL;
         l_impound_due_date := NULL;
         l_control_id := NULL;
         l_input_source := NULL;
         l_cts_header_id := NULL;
         -->> START George Felian   15-JUL-2020      FP68479  - Receipt application om Unapplied Receipts
         l_receipt_application := FALSE;
         --<< END George Felian   15-JUL-2020      FP68479  - Receipt application om Unapplied Receipts

         BEGIN
            log_message (
               'Get details for impound_trx_id:  ' || r_match_cp.attribute8,
               3);

            IF r_match_batch_cp.match_flag = 'Y'
            THEN
               SELECT imp.impound_trx_id,
                      imp.impound_trx_currency,
                      ctrl.control_id,
                      ctrl.input_source,
                      cts.cts_header_id
                 INTO l_impound_trx_id,
                      l_impound_trx_currency,
                      l_control_id,
                      l_input_source,
                      l_cts_header_id
                 FROM xxmm_cts_impound_trx imp,
                      xxmm_cts_headers cts,
                      xxmm_customer_controls ctrl
                WHERE     cts.cts_header_id = imp.cts_header_id
                      AND cts.control_id = ctrl.control_id
                      AND imp.impound_trx_id =
                             TO_NUMBER (r_match_cp.attribute8);

             -->> START George Felian   15-JUL-2020      FP68479  - Receipt application om Unapplied Receipts
             l_receipt_application := TRUE;
             --<< END George Felian   15-JUL-2020      FP68479  - Receipt application om Unapplied Receipts

            ELSIF     r_match_batch_cp.match_flag = 'N'
                  AND r_match_cp.attribute7 IS NOT NULL
            THEN
               log_message (
                  'Get details for control_id:  ' || r_match_cp.attribute7,
                  3);

               SELECT ctrl.control_id, ctrl.input_source
                 INTO l_control_id, l_input_source
                 FROM xxmm_customer_controls ctrl
                WHERE ctrl.control_id = TO_NUMBER (r_match_cp.attribute7);

                -->> START George Felian   15-JUL-2020      FP68479  - Receipt application om Unapplied Receipts
                l_receipt_application := FALSE;
                --<< END George Felian   15-JUL-2020      FP68479  - Receipt application om Unapplied Receipts

            END IF;
         END;

         g_control_bank := r_match_cp.swift_bic;
         g_control_branch := r_match_cp.swift_bic;
         g_control_account := r_match_cp.originator_account;
         g_control_swift_bic := r_match_cp.swift_bic;

         IF r_match_batch_cp.match_flag = 'Y'
         THEN
            log_message (
               'Create Receipt for impound_trx_id:  ' || l_impound_trx_id,
               3);
         ELSIF r_match_batch_cp.match_flag = 'N'
         THEN
            log_message ('Create Receipt for control_id:  ' || l_control_id,
                         3);
         END IF;

         insert_receipts (l_impound_trx_id,
                          l_control_id,
                          r_match_cp.as_of_date,
                          r_match_cp.as_of_date,
                          r_match_cp.currency_code,
                          -->> George Felian   26-MAY-2020       IMM 20-253 UK Intraday Receipt Logic
                          -- ensure functional currency is set
                            r_match_cp.currency_code,
                       --   l_impound_trx_currency,
                          -->> George Felian   26-MAY-2020       IMM 20-253 UK Intraday Receipt Logic
                          r_match_cp.amount,
                          r_match_batch_cp.funding_method,
                          r_match_cp.country,
                          l_input_source,
                          g_spread_tier,
                          g_spread_rate,
                        -->> START George Felian   15-JUL-2020      FP68479  - Receipt application om Unapplied Receipts
                        l_receipt_application, --TRUE for match, False for no match
                         -- TRUE,
                        --<< END George Felian   15-JUL-2020      FP68479  - Receipt application om Unapplied Receipts
                          r_match_cp.bank_account_id);



         IF r_match_cp.match_flag = 'Y'
         THEN
            log_message (
               'Apply Receipt for impound_trx_id:  ' || l_impound_trx_id,
               3);
            update_impound_trx (TO_NUMBER (r_match_cp.attribute8), -- impound_trx_id,
                                NVL (r_match_cp.amount, 0));


            -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||  Calling the Function to check whether the ORG account matches with one in IMMS and if not, insert the details into GTT table which is used while reporting exclusions


            --<< PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||  Calling the Function to check whether the ORG account matches with one in IMMS and if not, insert the details into GTT table which is used while reporting exclusions
            -->> PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||  Calling the Function to check for Risk Review hold and if any, the remove the Hold if it is placed by production
            IF xxmm_lookup_utilities.lookup_code_exist (
                  NULL,
                  g_org_acc_exclsn_rpt_lookup,
                  g_org_risk_tier_hol_rel)
            THEN
               -->> Project G'day | Ranjitha | 26-APR-2016| Need to release hold at Impound level only for AUS. And hence passing Impound TRX ID as parameter
               --rel_risk_hold (l_cts_header_id)
               log_message (
                  'Check for holds for impound_trx_id:  ' || l_impound_trx_id,
                  3);
               rel_risk_hold (l_cts_header_id, l_impound_trx_id);
            --<< Project G'day | Ranjitha | 26-APR-2016| Need to release hold at Impound level only for AUS. And hence passing Impound TRX ID as parameter
            END IF;
         --<< PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||  Calling the Function to check for Risk Review hold and if any, the remove the Hold if it is placed by production

         END IF;

         log_message (
               'Identify Originator Account Exceptions for: '
            || r_match_cp.originator_account,
            3);


         match_org_control_uk  (r_match_cp.originator_account,
                               l_control_id,
                               p_inbound_file_id,
                               r_match_cp.bank_reference_no,
                               r_match_cp.attribute4);
         log_message (
               'Update xxmm_itd_cp_receipt_stag with receipt batch_id : '
            || g_batch_id,
            3);

         UPDATE xxmm_itd_cp_receipt_stag
            SET receipt_batch_id = g_batch_id
          WHERE ROWID = r_match_cp.ROWID;
      END LOOP;

      log_message ('Confirm Receipt Batch  : ' || g_batch_id);
      confirm_batch (g_batch_id);
   END LOOP;

   log_message (
      'Run itd_report for inbound_file_id: ' || TO_CHAR (p_inbound_file_id));

   itd_report (p_inbound_file_id);

   log_message (
         'Purge Staging table for inbound_file_id: '
      || TO_CHAR (p_inbound_file_id));

   FOR r_purge_itd_table IN c_purge_itd_table -- George Felian    11-MAY-2020 -- Remove hard coding of funding method (g_funding_method)
   LOOP
      DELETE FROM xxmm_itd_report
            WHERE     org_category = r_purge_itd_table.lookup_code
                  AND TRUNC (CREATION_DATE) <
                           TRUNC (SYSDATE)
                         - TO_NUMBER (r_purge_itd_table.ATTRIBUTE2);
   END LOOP;

   purge_stag_table (p_inbound_file_id);

   log_message (
         'Ending create_apply_conf_rec_uk for inbound_file_id: '
      || TO_CHAR (p_inbound_file_id));


   --<< PWR EU-15-600 || R Q3 || Arun Bacha || March 2016 ||Added the condition to purge the data only if the lookup code exists
   log_file ('Exiting......');
EXCEPTION
   WHEN OTHERS
   THEN
      g_err_msg :=
            'OTHER EXCEPTION in procedure create_apply_conf_rec_uk , the error text is : '
         || SQLERRM;
      log_message (g_err_msg);
      log_error (g_err_msg, xxmm_constants.msg_type_error);

      raise_application_error (-20010, g_err_msg);
END create_apply_conf_rec_uk;

FUNCTION VALIDATE_BANK_NUMBER(i_impound_trx_id IN xxmm_cts_impound_trx_all.impound_trx_id%TYPE
                               )  RETURN BOOLEAN -- 09-Mar-2023 start of Validation on Bank number to contain only numeric values -- FP70355
IS
    l_impound_bank   xxmm_cts_impound_trx_all.impound_bank%TYPE;
BEGIN

 log_message ('Starting >> VALIDATE_BANK_NUMBER' );

        SELECT impound_bank
          INTO l_impound_bank
          FROM xxmm_cts_impound_trx
         WHERE impound_trx_id = i_impound_trx_id;

log_message ('fetched impound bank : '|| l_impound_bank);

        IF REGEXP_LIKE (l_impound_bank, '^[^a-zA-Z]*$')
        THEN
           log_message (
                'Impound bank is Numeric value which is Valid');
                RETURN FALSE;
        ELSE
        log_message ('Skipping this impound for creating receipt , and not adding it to the receipt batch ....');
       RETURN TRUE;
        END IF;

        EXCEPTION WHEN OTHERS THEN
        RETURN TRUE;
      Log_message('Exception occured in Validate_bank_number .. Skipping this impound trx id : '||i_impound_trx_id);
END VALIDATE_BANK_NUMBER; -- 09-Mar-2023 End of Validation on Bank number to contain only numeric values -- FP70355

END xxmm_create_receipts;
/
